/*
 * Copyright 2015-2020 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opencb.opencga.server.json.writers.cli;

import org.opencb.opencga.server.json.beans.Category;
import org.opencb.opencga.server.json.beans.Endpoint;
import org.opencb.opencga.server.json.beans.RestApi;
import org.opencb.opencga.server.json.config.CategoryConfig;
import org.opencb.opencga.server.json.config.CommandLineConfiguration;
import org.opencb.opencga.server.json.writers.ParentClientRestApiWriter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ParserCliRestApiWriter extends ParentClientRestApiWriter {

    public ParserCliRestApiWriter(RestApi restApi, CommandLineConfiguration config) {
        super(restApi, config);
    }

    @Override
    protected String getClassImports(String key) {
        StringBuilder sb = new StringBuilder();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sb.append("/*\n");
        sb.append("* Copyright 2015-").append(sdf.format(new Date())).append(" OpenCB\n");
        sb.append("*\n");
        sb.append("* Licensed under the Apache License, Version 2.0 (the \"License\");\n");
        sb.append("* you may not use this file except in compliance with the License.\n");
        sb.append("* You may obtain a copy of the License at\n");
        sb.append("*\n");
        sb.append("*     http://www.apache.org/licenses/LICENSE-2.0\n");
        sb.append("*\n");
        sb.append("* Unless required by applicable law or agreed to in writing, software\n");
        sb.append("* distributed under the License is distributed on an \"AS IS\" BASIS,\n");
        sb.append("* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n");
        sb.append("* See the License for the specific language governing permissions and\n");
        sb.append("* limitations under the License.\n");
        sb.append("*/\n");
        sb.append("\n");
        sb.append("package ").append(config.getOptions().getParserPackage()).append(";\n");
        sb.append("\n");
        sb.append("import com.beust.jcommander.JCommander;\n");
        sb.append("import org.opencb.commons.utils.CommandLineUtils;\n");
        sb.append("import org.opencb.opencga.app.cli.CliOptionsParser;\n");
        sb.append("import org.opencb.opencga.app.cli.GeneralCliOptions;\n");
        sb.append("import org.opencb.opencga.app.cli.admin.AdminCliOptionsParser;\n");
        sb.append("import org.opencb.opencga.core.common.GitRepositoryState;\n");
        sb.append("\n");
        sb.append("import java.util.*;\n");
        sb.append("\n");
        sb.append("import ").append(config.getOptions().getOptionsPackage()).append(".*;\n");
        sb.append("\n");
        sb.append("\n");
        sb.append("/*\n");
        sb.append("* WARNING: AUTOGENERATED CODE\n");
        sb.append("*\n");
        sb.append("* This code was generated by a tool.\n");
        sb.append("* Autogenerated on: ").append(sdf.format(new Date())).append("\n");
        sb.append("*\n");
        sb.append("* Manual changes to this file may cause unexpected behavior in your application.\n");
        sb.append("* Manual changes to this file will be overwritten if the code is regenerated.\n");
        sb.append("*    Command line version: ").append(restApi.getVersion()).append("\n");
        sb.append("*    Command line commit: ").append(restApi.getCommit()).append("\n");
        sb.append("*/\n");

        return sb.toString();
    }

    @Override
    protected String getClassHeader(String key) {
        StringBuilder sb = new StringBuilder();
        sb.append("\n");
        sb.append("public class OpencgaCliOptionsParser extends CliOptionsParser {\n");
        sb.append("\n");
        sb.append("    private final GeneralCliOptions.CommonCommandOptions commonCommandOptions;\n");
        for (Category category : availableCategories.values()) {
            sb.append("    private final " + getAsClassName(category.getName()) + "CommandOptions " + getAsVariableName(category.getName()) +
                    "CommandOptions;\n");
        }
        sb.append("\n");
        sb.append("    enum OutputFormat {IDS, ID_CSV, NAME_ID_MAP, ID_LIST, RAW, PRETTY_JSON, PLAIN_JSON}\n");
        sb.append("\n");
        sb.append("    public OpencgaCliOptionsParser() {\n");
        sb.append("\n");
        sb.append("        jCommander.setExpandAtSign(false);\n");
        sb.append("        commonCommandOptions = new GeneralCliOptions.CommonCommandOptions();\n");

        for (Category category : availableCategories.values()) {
            CategoryConfig config = availableCategoryConfigs.get(getIdCategory(category));
            sb.append("\n");
            sb.append("        " + getAsVariableName(category.getName()) + "CommandOptions = new " + getAsClassName(category.getName())
                    + "CommandOptions(commonCommandOptions, jCommander);\n");
            sb.append("        jCommander.addCommand(\"" + getCategoryCommandName(category, config)
                    + "\", " + getAsVariableName(category.getName()) + "CommandOptions);\n");
            sb.append("        JCommander " + getAsVariableName(category.getName()) + "SubCommands = jCommander.getCommands().get(\""
                    + getCategoryCommandName(category, config) + "\");\n");
            for (Endpoint endpoint : category.getEndpoints()) {

                if (!"POST".equals(endpoint.getMethod()) || endpoint.hasPrimitiveBodyParams(config)) {
                    String commandName = getMethodName(category, endpoint).replaceAll("_", "-");
                    if (config.isAvailableCommand(commandName)) {
                        sb.append("        " + getAsVariableName(category.getName()) + "SubCommands.addCommand(\"" + commandName + "\", "
                                + getAsVariableName(category.getName()) + "CommandOptions." + getAsCamelCase(commandName) +
                                "CommandOptions);\n");
                    }
                }
            }
        }
        sb.append("    }\n");
        return sb.toString();
    }

    public void write() {
        StringBuffer sb = new StringBuffer();
        sb.append(getClassImports(""));
        sb.append(getClassHeader(""));
        sb.append(getClassMethods(""));
        sb.append("}");

        File file = new File(getClassFileName(""));
        try {
            writeToFile(file, sb);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected String getClassMethods(String key) {
        StringBuilder sb = new StringBuilder();

        sb.append(getTemplateParser());
        for (Category category : availableCategories.values()) {

            sb.append("    \n");
            sb.append("    public " + getAsClassName(category.getName()) + "CommandOptions get" + getAsClassName(category.getName())
                    + "CommandOptions() {\n");
            sb.append("        return " + getAsVariableName(category.getName()) + "CommandOptions;\n");
            sb.append("    }\n");
            sb.append("    \n");
        }
        return sb.toString();
    }

    private String getTemplateParser() {
        try {
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            File file = new File(classLoader.getResource("parserAbstractMethods.template").getFile());
            String res = readFile(file.getAbsolutePath());
            res = res.replaceAll("##@@ANALYSIS@@##", getAnalysisCategories());
            res = res.replaceAll("##@@OPERATIONS@@##", getOperationsCategories());

            return res;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }

    private String getOperationsCategories() {
        String res = "";
        for (CategoryConfig category : config.getApiConfig().getCategoryConfigList()) {
            if (category.isOperations()) {
                res += "\"" + getCategoryCommandName(availableCategories.get(category.getKey()), category) + "\"" + ", ";
            }
        }
        return res.substring(0, res.lastIndexOf(", "));
    }

    private String getAnalysisCategories() {
        String res = "";
        for (CategoryConfig category : config.getApiConfig().getCategoryConfigList()) {
            if (category.isAnalysis()) {
                res += "\"" + getCategoryCommandName(availableCategories.get(category.getKey()), category) + "\"" + ", ";
            }
        }
        return res.substring(0, res.lastIndexOf(", "));
    }

    private String readFile(String file) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line = null;
        StringBuilder stringBuilder = new StringBuilder();
        String ls = System.getProperty("line.separator");

        try {
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
                stringBuilder.append(ls);
            }

            return stringBuilder.toString();
        } finally {
            reader.close();
        }
    }

    @Override
    protected String getClassFileName(String key) {
        Category category = availableCategories.get(key);
        return config.getOptions().getOutputDir() + "/OpencgaCliOptionsParser.java";
        //return "/tmp/OpencgaCliOptionsParser.java";
    }
}
