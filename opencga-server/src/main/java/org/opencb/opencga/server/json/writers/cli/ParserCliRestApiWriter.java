/*
 * Copyright 2015-2020 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opencb.opencga.server.json.writers.cli;

import org.apache.commons.lang3.StringUtils;
import org.opencb.opencga.server.json.beans.Category;
import org.opencb.opencga.server.json.beans.Endpoint;
import org.opencb.opencga.server.json.beans.Parameter;
import org.opencb.opencga.server.json.beans.RestApi;
import org.opencb.opencga.server.json.config.CategoryConfig;
import org.opencb.opencga.server.json.config.CommandLineConfiguration;
import org.opencb.opencga.server.json.utils.CommandLineUtils;
import org.opencb.opencga.server.json.writers.ParentClientRestApiWriter;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class ParserCliRestApiWriter extends ParentClientRestApiWriter {

    public ParserCliRestApiWriter(RestApi restApi, CommandLineConfiguration config) {
        super(restApi, config);
    }

    @Override
    String getClassImports(String key) {
        StringBuilder sb = new StringBuilder();
        Category category = availableCategories.get(key);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ");
        sb.append("/*\n");
        sb.append("* Copyright 2015-{} OpenCB" + sdf.format(new Date()) + "\n");
        sb.append("*\n");
        sb.append("* Licensed under the Apache License, Version 2.0 (the \"License\");\n");
        sb.append("* you may not use this file except in compliance with the License.\n");
        sb.append("* You may obtain a copy of the License at\n");
        sb.append("*\n");
        sb.append("*     http://www.apache.org/licenses/LICENSE-2.0\n");
        sb.append("*\n");
        sb.append("* Unless required by applicable law or agreed to in writing, software\n");
        sb.append("* distributed under the License is distributed on an \"AS IS\" BASIS,\n");
        sb.append("* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n");
        sb.append("* See the License for the specific language governing permissions and\n");
        sb.append("* limitations under the License.\n");
        sb.append("*/\n");
        sb.append("\n");
        sb.append("package " + config.getOptions().getParserPackage() + ";\n");
        sb.append("\n");
        sb.append("import com.beust.jcommander.JCommander;\n");
        sb.append("import org.opencb.commons.utils.CommandLineUtils;\n");
        sb.append("import org.opencb.opencga.app.cli.CliOptionsParser;\n");
        sb.append("import org.opencb.opencga.app.cli.GeneralCliOptions;\n");
        sb.append("import org.opencb.opencga.app.cli.admin.AdminCliOptionsParser;\n");
        sb.append("import org.opencb.opencga.core.common.GitRepositoryState;\n");
        sb.append("\n");
        sb.append("import java.util.*;\n");
        sb.append("\n");
        sb.append("import " + config.getOptions().getOptionsPackage() + ".*;\n");
        sb.append("\n");
        sb.append("\n");
        sb.append("/*\n");
        sb.append("* WARNING: AUTOGENERATED CODE\n");
        sb.append("*\n");
        sb.append("* This code was generated by a tool.\n");
        sb.append("* Autogenerated on: " + sdf.format(new Date()) + "\n");
        sb.append("*\n");
        sb.append("* Manual changes to this file may cause unexpected behavior in your application.\n");
        sb.append("* Manual changes to this file will be overwritten if the code is regenerated.\n");
        sb.append("*/\n");
        sb.append("\n");
        sb.append("\n");
        sb.append("/**\n");
        sb.append(" * This class contains methods for the " + category.getName() + " command line.\n");
        sb.append(" *    Command line version: 3.0\n");
        sb.append(" *    PATH: " + category.getPath() + "\n");
        sb.append(" */\n");
        return sb.toString();
    }

    @Override
    String getClassHeader(String key) {
        StringBuilder sb = new StringBuilder();
        //Category category = availableCategories.get(key);
        CategoryConfig config = availableCategoryConfigs.get(key);
        sb.append("\n");
        sb.append("public class OpencgaCliOptionsParser extends CliOptionsParser {\n");
        sb.append("\n");
        sb.append("    private final GeneralCliOptions.CommonCommandOptions commonCommandOptions;\n");
        for (Category category : availableCategories.values()) {
            sb.append("    private final " + getAsClassName(category.getName()) + "CommandOptions " + getAsVariableName(category.getName()) +
                    "CommandOptions;\n");
        }
        sb.append("\n");
        sb.append("    enum OutputFormat {{IDS, ID_CSV, NAME_ID_MAP, ID_LIST, RAW, PRETTY_JSON, PLAIN_JSON}}");
        sb.append("\n");
        sb.append("    public OpencgaCliOptionsParser() {\n");
        sb.append("\n");
        sb.append("        jCommander.setExpandAtSign(false);\n");
        sb.append("        commonCommandOptions = new GeneralCliOptions.CommonCommandOptions();\n");

        for (Category category : availableCategories.values()) {
            sb.append("\n");
            sb.append("        " + getAsVariableName(category.getName()) + "CommandOptions = new " + getAsClassName(category.getName())
                    + "CommandOptions(commonCommandOptions, jCommander);\n");
            sb.append("        jCommander.addCommand(\"" + availableCategoryConfigs.get(getIdCategory(category)).getKey().toLowerCase()
                    + "\", " + getAsVariableName(category.getName()) + "CommandOptions);\n");
            sb.append("        JCommander " + getAsVariableName(category.getName()) + "SubCommands = jCommander.getCommands().get(\""
                    + availableCategoryConfigs.get(getIdCategory(category)).getKey().toLowerCase() + "\");\n");
            for (Endpoint endpoint : category.getEndpoints()) {
                if (!"POST".equals(endpoint.getMethod()) || endpoint.hasPrimitiveBodyParams(config)) {
                    String commandName = getMethodName(category, endpoint).replaceAll("_", "-");
                    if (config.isAvailableCommand(commandName)) {
                        sb.append("        " + getAsVariableName(category.getName()) + "SubCommands.addCommand(\"" + commandName + "\", "
                                + getAsVariableName(category.getName()) + "CommandOptions." + getAsCamelCase(commandName) +
                                "CommandOptions);\n");
                    }
                }
            }
        }
        sb.append("    }\n");
        return sb.toString();
    }

    @Override
    String getClassMethods(String key) {
        return "";
    }

    private String getReturn(Category category, Endpoint endpoint, CategoryConfig config, String commandName) {
        String res =
                "        return openCGAClient.get" + getAsClassName(config.getKey()) + "Client()."
                        + getAsCamelCase(commandName) + "(";
        res += endpoint.getPathParams();
        res += endpoint.getMandatoryQueryParams(config);
        if (endpoint.hasPrimitiveBodyParams(config)) {
            res += getAsVariableName(endpoint.getBodyParamsObject()) + ", ";
        }
        if (endpoint.hasQueryParams()) {
            res += "queryParams";
        }
        if (res.trim().endsWith(",")) {
            res = res.substring(0, res.lastIndexOf(","));
        }
        res += ");\n";
        return res;
    }

    private String getBodyParams(Endpoint endpoint, CategoryConfig config) {
        StringBuilder sb = new StringBuilder();
        if (endpoint.hasPrimitiveBodyParams(config)) {
            String bodyParamsObject = endpoint.getBodyParamsObject();
            sb.append("        " + bodyParamsObject + " " + getAsVariableName(bodyParamsObject) + " = new " + bodyParamsObject + "()");
            for (Parameter parameter : endpoint.getParameters()) {
                if (parameter.getData() != null && !parameter.getData().isEmpty()) {
                    for (Parameter body_param : parameter.getData()) {
                        if (config.isAvailableSubCommand(body_param.getName()) && CommandLineUtils.isPrimitive(body_param.getType())) {
                            //sometimes the name of the parameter has the prefix "body" so as not to coincide with another parameter
                            // with the same name, but the setter does not have this prefix, so it must be removed
                            sb.append("\n            .set" + getAsClassName(body_param.getName().replaceAll("body_", "")) +
                                    "(commandOptions."
                                    + normaliceNames(getAsCamelCase(body_param.getName())) + ")");
                        }
                    }
                }
            }
            sb.append(";\n");
        }
        return sb.toString();
    }

    private String getQueryParams(Endpoint endpoint) {
        String res = "\n        ObjectMap queryParams = new ObjectMap();\n";
        boolean enc = false;
        for (Parameter parameter : endpoint.getParameters()) {
            if ("query".equals(parameter.getParam()) && !parameter.isRequired() && CommandLineUtils.isPrimitive(parameter.getType())) {
                enc = true;
                if (StringUtils.isNotEmpty(parameter.getType()) && "string".equalsIgnoreCase(parameter.getType())) {
                    res += "        queryParams.putIfNotEmpty(\"" + normaliceNames(parameter.getName()) + "\", commandOptions."
                            + normaliceNames(parameter.getName()) + ");\n";
                } else {
                    res += "        queryParams.putIfNotNull(\"" + normaliceNames(parameter.getName()) + "\", commandOptions."
                            + normaliceNames(parameter.getName()) + ");\n";
                }
            }
        }
        if (enc)
            return res + "\n";

        return "";
    }

    private String getValidResponseNames(String responseClass) {
        Map<String, String> validResponse = new HashMap<>();
        validResponse.put("map", "ObjectMap");
        validResponse.put("Map", "ObjectMap");
        validResponse.put("Object", "ObjectMap");
        validResponse.put("", "ObjectMap");

        responseClass = responseClass.replace('$', '.');
        if (validResponse.containsKey(responseClass)) {
            return validResponse.get(responseClass);
        }
        return responseClass;
    }

    private String normaliceNames(String name) {
        name = getAsCamelCase(name, "\\.");
        if (invalidNames.containsKey(name)) {
            name = invalidNames.get(name);
        }
        return name;
    }

    @Override
    String getClassFileName(String key) {
        Category category = availableCategories.get(key);
        // return config.getOptions().getParserOutputDir() + "/OpencgaCliOptionsParser.java";
        return "/tmp/OpencgaCliOptionsParser.java";
    }
}
