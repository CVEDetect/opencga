package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import com.beust.jcommander.ParametersDelegate;

import java.util.List;

import static org.opencb.opencga.app.cli.GeneralCliOptions.*;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-10-14
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Analysis - Variant command line.
 *    OpenCGA version: 2.2.0-SNAPSHOT
 *    PATH: /{apiVersion}/analysis/variant
 */
@Parameters(commandNames = {"variant"}, commandDescription = "Analysis - Variant commands")
public class AnalysisVariantCommandOptions {

        public JCommander jCommander;
        public CommonCommandOptions commonCommandOptions;

        public AggregationStatsCommandOptions aggregationStatsCommandOptions;
        public MetadataAnnotationCommandOptions metadataAnnotationCommandOptions;
        public QueryAnnotationCommandOptions queryAnnotationCommandOptions;
        public RunCircosCommandOptions runCircosCommandOptions;
        public DeleteCohortStatsCommandOptions deleteCohortStatsCommandOptions;
        public InfoCohortStatsCommandOptions infoCohortStatsCommandOptions;
        public RunCohortStatsCommandOptions runCohortStatsCommandOptions;
        public RunExportCommandOptions runExportCommandOptions;
        public GenotypesFamilyCommandOptions genotypesFamilyCommandOptions;
        public RunFamilyQcCommandOptions runFamilyQcCommandOptions;
        public DeleteFileCommandOptions deleteFileCommandOptions;
        public RunGatkCommandOptions runGatkCommandOptions;
        public RunGenomePlotCommandOptions runGenomePlotCommandOptions;
        public RunGwasCommandOptions runGwasCommandOptions;
        public RunIndexCommandOptions runIndexCommandOptions;
        public RunIndividualQcCommandOptions runIndividualQcCommandOptions;
        public RunInferredSexCommandOptions runInferredSexCommandOptions;
        public QueryKnockoutGeneCommandOptions queryKnockoutGeneCommandOptions;
        public QueryKnockoutIndividualCommandOptions queryKnockoutIndividualCommandOptions;
        public RunKnockoutCommandOptions runKnockoutCommandOptions;
        public RunMendelianErrorCommandOptions runMendelianErrorCommandOptions;
        public MetadataCommandOptions metadataCommandOptions;
        public QueryMutationalSignatureCommandOptions queryMutationalSignatureCommandOptions;
        public RunMutationalSignatureCommandOptions runMutationalSignatureCommandOptions;
        public RunPlinkCommandOptions runPlinkCommandOptions;
        public QueryCommandOptions queryCommandOptions;
        public RunRelatednessCommandOptions runRelatednessCommandOptions;
        public RunRvtestsCommandOptions runRvtestsCommandOptions;
        public AggregationStatsSampleCommandOptions aggregationStatsSampleCommandOptions;
        public RunSampleEligibilityCommandOptions runSampleEligibilityCommandOptions;
        public RunSampleQcCommandOptions runSampleQcCommandOptions;
        public QuerySampleCommandOptions querySampleCommandOptions;
        public RunSampleCommandOptions runSampleCommandOptions;
        public QuerySampleStatsCommandOptions querySampleStatsCommandOptions;
        public RunSampleStatsCommandOptions runSampleStatsCommandOptions;
        public RunStatsExportCommandOptions runStatsExportCommandOptions;
        public RunStatsCommandOptions runStatsCommandOptions;


    public AnalysisVariantCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        this.jCommander = jCommander;
        this.commonCommandOptions = commonCommandOptions;
        this.aggregationStatsCommandOptions = new AggregationStatsCommandOptions();
        this.metadataAnnotationCommandOptions = new MetadataAnnotationCommandOptions();
        this.queryAnnotationCommandOptions = new QueryAnnotationCommandOptions();
        this.runCircosCommandOptions = new RunCircosCommandOptions();
        this.deleteCohortStatsCommandOptions = new DeleteCohortStatsCommandOptions();
        this.infoCohortStatsCommandOptions = new InfoCohortStatsCommandOptions();
        this.runCohortStatsCommandOptions = new RunCohortStatsCommandOptions();
        this.runExportCommandOptions = new RunExportCommandOptions();
        this.genotypesFamilyCommandOptions = new GenotypesFamilyCommandOptions();
        this.runFamilyQcCommandOptions = new RunFamilyQcCommandOptions();
        this.deleteFileCommandOptions = new DeleteFileCommandOptions();
        this.runGatkCommandOptions = new RunGatkCommandOptions();
        this.runGenomePlotCommandOptions = new RunGenomePlotCommandOptions();
        this.runGwasCommandOptions = new RunGwasCommandOptions();
        this.runIndexCommandOptions = new RunIndexCommandOptions();
        this.runIndividualQcCommandOptions = new RunIndividualQcCommandOptions();
        this.runInferredSexCommandOptions = new RunInferredSexCommandOptions();
        this.queryKnockoutGeneCommandOptions = new QueryKnockoutGeneCommandOptions();
        this.queryKnockoutIndividualCommandOptions = new QueryKnockoutIndividualCommandOptions();
        this.runKnockoutCommandOptions = new RunKnockoutCommandOptions();
        this.runMendelianErrorCommandOptions = new RunMendelianErrorCommandOptions();
        this.metadataCommandOptions = new MetadataCommandOptions();
        this.queryMutationalSignatureCommandOptions = new QueryMutationalSignatureCommandOptions();
        this.runMutationalSignatureCommandOptions = new RunMutationalSignatureCommandOptions();
        this.runPlinkCommandOptions = new RunPlinkCommandOptions();
        this.queryCommandOptions = new QueryCommandOptions();
        this.runRelatednessCommandOptions = new RunRelatednessCommandOptions();
        this.runRvtestsCommandOptions = new RunRvtestsCommandOptions();
        this.aggregationStatsSampleCommandOptions = new AggregationStatsSampleCommandOptions();
        this.runSampleEligibilityCommandOptions = new RunSampleEligibilityCommandOptions();
        this.runSampleQcCommandOptions = new RunSampleQcCommandOptions();
        this.querySampleCommandOptions = new QuerySampleCommandOptions();
        this.runSampleCommandOptions = new RunSampleCommandOptions();
        this.querySampleStatsCommandOptions = new QuerySampleStatsCommandOptions();
        this.runSampleStatsCommandOptions = new RunSampleStatsCommandOptions();
        this.runStatsExportCommandOptions = new RunStatsExportCommandOptions();
        this.runStatsCommandOptions = new RunStatsCommandOptions();
    
    }
    
    @Parameters(commandNames = {"aggregationStats"}, commandDescription ="Calculate and fetch aggregation stats")
    public class AggregationStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--saved-filter"}, description = "Use a saved filter at User level", required = false, arity = 1)
        public String savedFilter; 
    
        @Parameter(names = {"--region"}, description = "List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.: 2,3:100000-200000", required = false, arity = 1)
        public String region; 
    
        @Parameter(names = {"--type"}, description = "List of types, accepted values are SNV, MNV, INDEL, SV, COPY_NUMBER, COPY_NUMBER_LOSS, COPY_NUMBER_GAIN, INSERTION, DELETION, DUPLICATION, TANDEM_DUPLICATION, BREAKEND, e.g. SNV,INDEL", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--project", "-p"}, description = "Project [user@]project where project can be either the ID or the alias", required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--study", "-s"}, description = "Filter variants from the given studies, these can be either the numeric ID or the alias with the format user@project:study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--cohort"}, description = "Select variants with calculated stats for the selected cohorts", required = false, arity = 1)
        public String cohort; 
    
        @Parameter(names = {"--cohort-stats-ref"}, description = "Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsRef; 
    
        @Parameter(names = {"--cohort-stats-alt"}, description = "Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsAlt; 
    
        @Parameter(names = {"--cohort-stats-maf"}, description = "Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsMaf; 
    
        @Parameter(names = {"--cohort-stats-mgf"}, description = "Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsMgf; 
    
        @Parameter(names = {"--cohort-stats-pass"}, description = "Filter PASS frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL>0.8", required = false, arity = 1)
        public String cohortStatsPass; 
    
        @Parameter(names = {"--missing-alleles"}, description = "Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}", required = false, arity = 1)
        public String missingAlleles; 
    
        @Parameter(names = {"--missing-genotypes"}, description = "Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}", required = false, arity = 1)
        public String missingGenotypes; 
    
        @Parameter(names = {"--score"}, description = "Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}", required = false, arity = 1)
        public String score; 
    
        @Parameter(names = {"--annotation-exists"}, description = "Return only annotated variants", required = false, arity = 1)
        public boolean annotationExists; 
    
        @Parameter(names = {"--gene"}, description = "List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref' parameter", required = false, arity = 1)
        public String gene; 
    
        @Parameter(names = {"--ct"}, description = "List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578. Accepts aliases 'loss_of_function' and 'protein_altering'", required = false, arity = 1)
        public String ct; 
    
        @Parameter(names = {"--xref"}, description = "List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC, Ensembl genes, dbSNP, ClinVar, HPO, Cosmic, ...", required = false, arity = 1)
        public String xref; 
    
        @Parameter(names = {"--biotype"}, description = "List of biotypes, e.g. protein_coding", required = false, arity = 1)
        public String biotype; 
    
        @Parameter(names = {"--protein-substitution"}, description = "Protein substitution scores include SIFT and PolyPhen. You can query using the score {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant", required = false, arity = 1)
        public String proteinSubstitution; 
    
        @Parameter(names = {"--conservation"}, description = "Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g. phastCons>0.5,phylop<0.1,gerp>0.1", required = false, arity = 1)
        public String conservation; 
    
        @Parameter(names = {"--population-frequency-alt"}, description = "Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyAlt; 
    
        @Parameter(names = {"--population-frequency-ref"}, description = "Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyRef; 
    
        @Parameter(names = {"--population-frequency-maf"}, description = "Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyMaf; 
    
        @Parameter(names = {"--transcript-flag"}, description = "List of transcript flags. e.g. canonical, CCDS, basic, LRG, MANE Select, MANE Plus Clinical, EGLH_HaemOnc, TSO500", required = false, arity = 1)
        public String transcriptFlag; 
    
        @Parameter(names = {"--gene-trait-id"}, description = "List of gene trait association id. e.g. 'umls:C0007222' , 'OMIM:269600'", required = false, arity = 1)
        public String geneTraitId; 
    
        @Parameter(names = {"--go"}, description = "List of GO (Gene Ontology) terms. e.g. 'GO:0002020'", required = false, arity = 1)
        public String go; 
    
        @Parameter(names = {"--expression"}, description = "List of tissues of interest. e.g. 'lung'", required = false, arity = 1)
        public String expression; 
    
        @Parameter(names = {"--protein-keyword"}, description = "List of Uniprot protein variant annotation keywords", required = false, arity = 1)
        public String proteinKeyword; 
    
        @Parameter(names = {"--drug"}, description = "List of drug names", required = false, arity = 1)
        public String drug; 
    
        @Parameter(names = {"--functional-score"}, description = "Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 , cadd_raw<=0.3", required = false, arity = 1)
        public String functionalScore; 
    
        @Parameter(names = {"--clinical"}, description = "Clinical source: clinvar, cosmic", required = false, arity = 1)
        public String clinical; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--clinical-confirmed-status"}, description = "Clinical confirmed status", required = false, arity = 1)
        public boolean clinicalConfirmedStatus; 
    
        @Parameter(names = {"--custom-annotation"}, description = "Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}", required = false, arity = 1)
        public String customAnnotation; 
    
        @Parameter(names = {"--trait"}, description = "List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...", required = false, arity = 1)
        public String trait; 
    
        @Parameter(names = {"--field"}, description = "List of facet fields separated by semicolons, e.g.: studies;type. For nested faceted fields use >>, e.g.: chromosome>>type;percentile(gerp)", required = false, arity = 1)
        public String field; 
    
  }
    @Parameters(commandNames = {"metadata-annotation"}, commandDescription ="Read variant annotations metadata from any saved versions")
    public class MetadataAnnotationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--annotation-id"}, description = "Annotation identifier", required = false, arity = 1)
        public String annotationId; 
    
        @Parameter(names = {"--project", "-p"}, description = "Project [user@]project where project can be either the ID or the alias", required = false, arity = 1)
        public String project; 
    
  }
    @Parameters(commandNames = {"query-annotation"}, commandDescription ="Query variant annotations from any saved versions")
    public class QueryAnnotationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--id"}, description = "List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g. rs116600158,19:7177679:C:T", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--region"}, description = "List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.: 2,3:100000-200000", required = false, arity = 1)
        public String region; 
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--annotation-id"}, description = "Annotation identifier", required = false, arity = 1)
        public String annotationId; 
    
  }
    @Parameters(commandNames = {"run-circos"}, commandDescription ="Generate a Circos plot for a given sample.")
    public class RunCircosCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--title"}, description = "The body web service title parameter", required = false, arity = 1)
        public String title;
    
        @Parameter(names = {"--density"}, description = "The body web service density parameter", required = false, arity = 1)
        public String density;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"delete-cohort-stats"}, commandDescription ="Delete cohort variant stats from a cohort.")
    public class DeleteCohortStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--cohort"}, description = "Cohort ID or UUID", required = false, arity = 1)
        public String cohort; 
    
  }
    @Parameters(commandNames = {"info-cohort-stats"}, commandDescription ="Read cohort variant stats from list of cohorts.")
    public class InfoCohortStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--cohort"}, description = "Comma separated list of cohort IDs or UUIDs up to a maximum of 100", required = true, arity = 1)
        public String cohort; 
    
  }
    @Parameters(commandNames = {"run-cohort-stats"}, commandDescription ="Compute cohort variant stats for the selected list of samples.")
    public class RunCohortStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--cohort"}, description = "The body web service cohort parameter", required = false, arity = 1)
        public String cohort;
    
        @Parameter(names = {"--samples"}, description = "The body web service samples parameter", required = false, arity = 1)
        public String samples;
    
        @Parameter(names = {"--index"}, description = "The body web service index parameter", required = false, arity = 1)
        public boolean index;
    
        @Parameter(names = {"--sample-annotation"}, description = "The body web service sampleAnnotation parameter", required = false, arity = 1)
        public String sampleAnnotation;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"run-export"}, commandDescription ="Filter and export variants from the variant storage to a file")
    public class RunExportCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--project", "-p"}, description = "Project [user@]project where project can be either the ID or the alias", required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
        @Parameter(names = {"--output-file-name"}, description = "The body web service outputFileName parameter", required = false, arity = 1)
        public String outputFileName;
    
        @Parameter(names = {"--output-format"}, description = "The body web service outputFormat parameter", required = false, arity = 1)
        public String outputFormat;
    
        @Parameter(names = {"--variants-file"}, description = "The body web service variantsFile parameter", required = false, arity = 1)
        public String variantsFile;
    
        @Parameter(names = {"--body_include"}, description = "The body web service include parameter", required = false, arity = 1)
        public String bodyInclude;
    
        @Parameter(names = {"--body_exclude"}, description = "The body web service exclude parameter", required = false, arity = 1)
        public String bodyExclude;
    
        @Parameter(names = {"--compress"}, description = "The body web service compress parameter", required = false, arity = 1)
        public boolean compress;
    
        @Parameter(names = {"--summary"}, description = "The body web service summary parameter", required = false, arity = 1)
        public boolean summary;
    
  }
    @Parameters(commandNames = {"genotypes-family"}, commandDescription ="Calculate the possible genotypes for the members of a family")
    public class GenotypesFamilyCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--family"}, description = "Family id", required = false, arity = 1)
        public String family; 
    
        @Parameter(names = {"--clinical-analysis"}, description = "Clinical analysis id", required = false, arity = 1)
        public String clinicalAnalysis; 
    
        @Parameter(names = {"--mode-of-inheritance"}, description = "Mode of inheritance", required = true, arity = 1)
        public String modeOfInheritance; 
    
        @Parameter(names = {"--penetrance"}, description = "Penetrance", required = false, arity = 1)
        public String penetrance; 
    
        @Parameter(names = {"--disorder"}, description = "Disorder id", required = false, arity = 1)
        public String disorder; 
    
  }
    @Parameters(commandNames = {"run-family-qc"}, commandDescription ="Run quality control (QC) for a given family. It computes the relatedness scores among the family members")
    public class RunFamilyQcCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--family"}, description = "The body web service family parameter", required = false, arity = 1)
        public String family;
    
        @Parameter(names = {"--relatedness-method"}, description = "The body web service relatednessMethod parameter", required = false, arity = 1)
        public String relatednessMethod;
    
        @Parameter(names = {"--relatedness-maf"}, description = "The body web service relatednessMaf parameter", required = false, arity = 1)
        public String relatednessMaf;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"delete-file"}, commandDescription =" [DEPRECATED] Use operation/variant/delete")
    public class DeleteFileCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--file"}, description = "Files to remove", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--resume"}, description = "Resume a previously failed indexation", required = false, arity = 1)
        public boolean resume; 
    
  }
    @Parameters(commandNames = {"run-gatk"}, commandDescription ="GATK is a Genome Analysis Toolkit for variant discovery in high-throughput sequencing data. Supported Gatk commands: HaplotypeCaller")
    public class RunGatkCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--command"}, description = "The body web service command parameter", required = false, arity = 1)
        public String command;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"run-genomePlot"}, commandDescription ="Generate a genome plot for a given sample.")
    public class RunGenomePlotCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample;
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id;
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description;
    
        @Parameter(names = {"--config-file"}, description = "The body web service configFile parameter", required = false, arity = 1)
        public String configFile;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"run-gwas"}, commandDescription ="Run a Genome Wide Association Study between two cohorts.")
    public class RunGwasCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--phenotype"}, description = "The body web service phenotype parameter", required = false, arity = 1)
        public String phenotype;
    
        @Parameter(names = {"--index"}, description = "The body web service index parameter", required = false, arity = 1)
        public boolean index;
    
        @Parameter(names = {"--index-score-id"}, description = "The body web service indexScoreId parameter", required = false, arity = 1)
        public String indexScoreId;
    
        @Parameter(names = {"--case-cohort"}, description = "The body web service caseCohort parameter", required = false, arity = 1)
        public String caseCohort;
    
        @Parameter(names = {"--case-cohort-samples-annotation"}, description = "The body web service caseCohortSamplesAnnotation parameter", required = false, arity = 1)
        public String caseCohortSamplesAnnotation;
    
        @Parameter(names = {"--case-cohort-samples"}, description = "The body web service caseCohortSamples parameter", required = false, arity = 1)
        public String caseCohortSamples;
    
        @Parameter(names = {"--control-cohort"}, description = "The body web service controlCohort parameter", required = false, arity = 1)
        public String controlCohort;
    
        @Parameter(names = {"--control-cohort-samples-annotation"}, description = "The body web service controlCohortSamplesAnnotation parameter", required = false, arity = 1)
        public String controlCohortSamplesAnnotation;
    
        @Parameter(names = {"--control-cohort-samples"}, description = "The body web service controlCohortSamples parameter", required = false, arity = 1)
        public String controlCohortSamples;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"run-index"}, commandDescription =" [DEPRECATED] Use operation/variant/index")
    public class RunIndexCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--file"}, description = "The body web service file parameter", required = false, arity = 1)
        public String file;
    
        @Parameter(names = {"--resume"}, description = "The body web service resume parameter", required = false, arity = 1)
        public boolean resume;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
        @Parameter(names = {"--transform"}, description = "The body web service transform parameter", required = false, arity = 1)
        public boolean transform;
    
        @Parameter(names = {"--gvcf"}, description = "The body web service gvcf parameter", required = false, arity = 1)
        public boolean gvcf;
    
        @Parameter(names = {"--normalization-skip"}, description = "The body web service normalizationSkip parameter", required = false, arity = 1)
        public boolean normalizationSkip;
    
        @Parameter(names = {"--reference-genome"}, description = "The body web service referenceGenome parameter", required = false, arity = 1)
        public String referenceGenome;
    
        @Parameter(names = {"--family"}, description = "The body web service family parameter", required = false, arity = 1)
        public boolean family;
    
        @Parameter(names = {"--somatic"}, description = "The body web service somatic parameter", required = false, arity = 1)
        public boolean somatic;
    
        @Parameter(names = {"--load"}, description = "The body web service load parameter", required = false, arity = 1)
        public boolean load;
    
        @Parameter(names = {"--load-split-data"}, description = "The body web service loadSplitData parameter", required = false, arity = 1)
        public String loadSplitData;
    
        @Parameter(names = {"--load-multi-file-data"}, description = "The body web service loadMultiFileData parameter", required = false, arity = 1)
        public boolean loadMultiFileData;
    
        @Parameter(names = {"--load-sample-index"}, description = "The body web service loadSampleIndex parameter", required = false, arity = 1)
        public String loadSampleIndex;
    
        @Parameter(names = {"--load-archive"}, description = "The body web service loadArchive parameter", required = false, arity = 1)
        public String loadArchive;
    
        @Parameter(names = {"--load-hom-ref"}, description = "The body web service loadHomRef parameter", required = false, arity = 1)
        public String loadHomRef;
    
        @Parameter(names = {"--post-load-check"}, description = "The body web service postLoadCheck parameter", required = false, arity = 1)
        public String postLoadCheck;
    
        @Parameter(names = {"--include-genotypes"}, description = "The body web service includeGenotypes parameter", required = false, arity = 1)
        public String includeGenotypes;
    
        @Parameter(names = {"--include-sample-data"}, description = "The body web service includeSampleData parameter", required = false, arity = 1)
        public String includeSampleData;
    
        @Parameter(names = {"--merge"}, description = "The body web service merge parameter", required = false, arity = 1)
        public String merge;
    
        @Parameter(names = {"--deduplication-policy"}, description = "The body web service deduplicationPolicy parameter", required = false, arity = 1)
        public String deduplicationPolicy;
    
        @Parameter(names = {"--calculate-stats"}, description = "The body web service calculateStats parameter", required = false, arity = 1)
        public boolean calculateStats;
    
        @Parameter(names = {"--aggregation-mapping-file"}, description = "The body web service aggregationMappingFile parameter", required = false, arity = 1)
        public String aggregationMappingFile;
    
        @Parameter(names = {"--annotate"}, description = "The body web service annotate parameter", required = false, arity = 1)
        public boolean annotate;
    
        @Parameter(names = {"--annotator"}, description = "The body web service annotator parameter", required = false, arity = 1)
        public String annotator;
    
        @Parameter(names = {"--overwrite-annotations"}, description = "The body web service overwriteAnnotations parameter", required = false, arity = 1)
        public boolean overwriteAnnotations;
    
        @Parameter(names = {"--index-search"}, description = "The body web service indexSearch parameter", required = false, arity = 1)
        public boolean indexSearch;
    
        @Parameter(names = {"--skip-indexed-files"}, description = "The body web service skipIndexedFiles parameter", required = false, arity = 1)
        public boolean skipIndexedFiles;
    
  }
    @Parameters(commandNames = {"run-individual-qc"}, commandDescription ="Run quality control (QC) for a given individual. It includes inferred sex and  mendelian errors (UDP)")
    public class RunIndividualQcCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--individual"}, description = "The body web service individual parameter", required = false, arity = 1)
        public String individual;
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample;
    
        @Parameter(names = {"--inferred-sex-method"}, description = "The body web service inferredSexMethod parameter", required = false, arity = 1)
        public String inferredSexMethod;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"run-inferredSex"}, commandDescription ="Infer sex from chromosome mean coverages.")
    public class RunInferredSexCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--individual"}, description = "The body web service individual parameter", required = false, arity = 1)
        public String individual;
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"query-knockout-gene"}, commandDescription ="Fetch values from KnockoutAnalysis result, by genes")
    public class QueryKnockoutGeneCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job"}, description = "Job ID or UUID", required = false, arity = 1)
        public String job; 
    
  }
    @Parameters(commandNames = {"query-knockout-individual"}, commandDescription ="Fetch values from KnockoutAnalysis result, by individuals")
    public class QueryKnockoutIndividualCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job"}, description = "Job ID or UUID", required = false, arity = 1)
        public String job; 
    
  }
    @Parameters(commandNames = {"run-knockout"}, commandDescription ="Obtains the list of knocked out genes for each sample.")
    public class RunKnockoutCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample;
    
        @Parameter(names = {"--gene"}, description = "The body web service gene parameter", required = false, arity = 1)
        public String gene;
    
        @Parameter(names = {"--panel"}, description = "The body web service panel parameter", required = false, arity = 1)
        public String panel;
    
        @Parameter(names = {"--biotype"}, description = "The body web service biotype parameter", required = false, arity = 1)
        public String biotype;
    
        @Parameter(names = {"--consequence-type"}, description = "The body web service consequenceType parameter", required = false, arity = 1)
        public String consequenceType;
    
        @Parameter(names = {"--filter"}, description = "The body web service filter parameter", required = false, arity = 1)
        public String filter;
    
        @Parameter(names = {"--qual"}, description = "The body web service qual parameter", required = false, arity = 1)
        public String qual;
    
        @Parameter(names = {"--skip-genes-file"}, description = "The body web service skipGenesFile parameter", required = false, arity = 1)
        public boolean skipGenesFile;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
        @Parameter(names = {"--index"}, description = "The body web service index parameter", required = false, arity = 1)
        public boolean index;
    
  }
    @Parameters(commandNames = {"run-mendelianError"}, commandDescription ="Run mendelian error analysis to infer uniparental disomy regions.")
    public class RunMendelianErrorCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--family"}, description = "The body web service family parameter", required = false, arity = 1)
        public String family;
    
        @Parameter(names = {"--individual"}, description = "The body web service individual parameter", required = false, arity = 1)
        public String individual;
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"metadata"}, commandDescription ="")
    public class MetadataCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--project", "-p"}, description = "Project [user@]project where project can be either the ID or the alias", required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--study", "-s"}, description = "Filter variants from the given studies, these can be either the numeric ID or the alias with the format user@project:study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--file"}, description = "Filter variants from the files specified. This will set includeFile parameter when not provided", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--sample"}, description = "Filter variants by sample genotype. This will automatically set 'includeSample' parameter when not provided. This filter accepts multiple 3 forms: 1) List of samples: Samples that contain the main variant. Accepts AND (;) and OR (,) operators.  e.g. HG0097,HG0098 . 2) List of samples with genotypes: {sample}:{gt1},{gt2}. Accepts AND (;) and OR (,) operators.  e.g. HG0097:0/0;HG0098:0/1,1/1 . Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT, HET_MISS and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT . 3) Sample with segregation mode: {sample}:{segregation}. Only one sample accepted.Accepted segregation modes: [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]. Value is case insensitive. e.g. HG0097:DeNovo Sample must have parents defined and indexed. ", required = false, arity = 1)
        public String sample; 
    
        @Parameter(names = {"--include-study"}, description = "List of studies to include in the result. Accepts 'all' and 'none'.", required = false, arity = 1)
        public String includeStudy; 
    
        @Parameter(names = {"--include-file"}, description = "List of files to be returned. Accepts 'all' and 'none'. If undefined, automatically includes files used for filtering. If none, no file is included.", required = false, arity = 1)
        public String includeFile; 
    
        @Parameter(names = {"--include-sample"}, description = "List of samples to be included in the result. Accepts 'all' and 'none'. If undefined, automatically includes samples used for filtering. If none, no sample is included.", required = false, arity = 1)
        public String includeSample; 
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
  }
    @Parameters(commandNames = {"query-mutationalSignature"}, commandDescription ="Run mutational signature analysis for a given sample. Use context index.")
    public class QueryMutationalSignatureCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Filter variants from the given studies, these can be either the numeric ID or the alias with the format user@project:study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--sample"}, description = "Sample name", required = false, arity = 1)
        public String sample; 
    
        @Parameter(names = {"--ct"}, description = "List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578. Accepts aliases 'loss_of_function' and 'protein_altering'", required = false, arity = 1)
        public String ct; 
    
        @Parameter(names = {"--biotype"}, description = "List of biotypes, e.g. protein_coding", required = false, arity = 1)
        public String biotype; 
    
        @Parameter(names = {"--file-data"}, description = "Filter by file data (i.e. FILTER, QUAL and INFO columns from VCF file). [{file}:]{key}{op}{value}[,;]* . If no file is specified, will use all files from 'file' filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many fields can be combined. e.g. file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10,FILTER=PASS,LowDP", required = false, arity = 1)
        public String fileData; 
    
        @Parameter(names = {"--filter"}, description = "Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the filter. e.g.: PASS,LowGQX", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--qual"}, description = "Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual. e.g.: >123.4", required = false, arity = 1)
        public String qual; 
    
        @Parameter(names = {"--region"}, description = "List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.: 2,3:100000-200000", required = false, arity = 1)
        public String region; 
    
        @Parameter(names = {"--gene"}, description = "List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref' parameter", required = false, arity = 1)
        public String gene; 
    
        @Parameter(names = {"--panel"}, description = "Filter by genes from the given disease panel", required = false, arity = 1)
        public String panel; 
    
        @Parameter(names = {"--panel-mode-of-inheritance"}, description = "Filter genes from specific panels that match certain mode of inheritance. Accepted values : [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]", required = false, arity = 1)
        public String panelModeOfInheritance; 
    
        @Parameter(names = {"--panel-confidence"}, description = "Filter genes from specific panels that match certain confidence. Accepted values : [ high, medium, low, rejected ]", required = false, arity = 1)
        public String panelConfidence; 
    
        @Parameter(names = {"--panel-role-in-cancer"}, description = "Filter genes from specific panels that match certain role in cancer. Accepted values : [ both, oncogene, tumorSuppressorGene, fusion ]", required = false, arity = 1)
        public String panelRoleInCancer; 
    
        @Parameter(names = {"--fitting"}, description = "Compute the relative proportions of the different mutational signatures demonstrated by the tumour", required = false, arity = 1)
        public boolean fitting; 
    
  }
    @Parameters(commandNames = {"run-mutationalSignature"}, commandDescription ="Run mutational signature analysis for a given sample.")
    public class RunMutationalSignatureCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample;
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id;
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description;
    
        @Parameter(names = {"--release"}, description = "The body web service release parameter", required = false, arity = 1)
        public String release;
    
        @Parameter(names = {"--fitting"}, description = "The body web service fitting parameter", required = false, arity = 1)
        public boolean fitting;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"run-plink"}, commandDescription ="Plink is a whole genome association analysis toolset, designed to perform a range of basic, large-scale analyses.")
    public class RunPlinkCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"query"}, commandDescription ="Filter and fetch variants from indexed VCF files in the variant storage")
    public class QueryCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include", "-I"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude", "-E"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--sort"}, description = "Sort the results", required = false, arity = 1)
        public boolean sort; 
    
        @Parameter(names = {"--summary"}, description = "Fast fetch of main variant parameters", required = false, arity = 1)
        public boolean summary; 
    
        @Parameter(names = {"--approximate-count"}, description = "Get an approximate count, instead of an exact total count. Reduces execution time", required = false, arity = 1)
        public boolean approximateCount; 
    
        @Parameter(names = {"--approximate-count-sampling-size"}, description = "Sampling size to get the approximate count. Larger values increase accuracy but also increase execution time", required = false, arity = 1)
        public int approximateCountSamplingSize; 
    
        @Parameter(names = {"--saved-filter"}, description = "Use a saved filter at User level", required = false, arity = 1)
        public String savedFilter; 
    
        @Parameter(names = {"--id"}, description = "List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g. rs116600158,19:7177679:C:T", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--region"}, description = "List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.: 2,3:100000-200000", required = false, arity = 1)
        public String region; 
    
        @Parameter(names = {"--type"}, description = "List of types, accepted values are SNV, MNV, INDEL, SV, COPY_NUMBER, COPY_NUMBER_LOSS, COPY_NUMBER_GAIN, INSERTION, DELETION, DUPLICATION, TANDEM_DUPLICATION, BREAKEND, e.g. SNV,INDEL", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--reference"}, description = "Reference allele", required = false, arity = 1)
        public String reference; 
    
        @Parameter(names = {"--alternate"}, description = "Main alternate allele", required = false, arity = 1)
        public String alternate; 
    
        @Parameter(names = {"--project", "-p"}, description = "Project [user@]project where project can be either the ID or the alias", required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--study", "-s"}, description = "Filter variants from the given studies, these can be either the numeric ID or the alias with the format user@project:study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--file"}, description = "Filter variants from the files specified. This will set includeFile parameter when not provided", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--filter"}, description = "Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the filter. e.g.: PASS,LowGQX", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--qual"}, description = "Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual. e.g.: >123.4", required = false, arity = 1)
        public String qual; 
    
        @Parameter(names = {"--file-data"}, description = "Filter by file data (i.e. FILTER, QUAL and INFO columns from VCF file). [{file}:]{key}{op}{value}[,;]* . If no file is specified, will use all files from 'file' filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many fields can be combined. e.g. file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10,FILTER=PASS,LowDP", required = false, arity = 1)
        public String fileData; 
    
        @Parameter(names = {"--sample"}, description = "Filter variants by sample genotype. This will automatically set 'includeSample' parameter when not provided. This filter accepts multiple 3 forms: 1) List of samples: Samples that contain the main variant. Accepts AND (;) and OR (,) operators.  e.g. HG0097,HG0098 . 2) List of samples with genotypes: {sample}:{gt1},{gt2}. Accepts AND (;) and OR (,) operators.  e.g. HG0097:0/0;HG0098:0/1,1/1 . Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT, HET_MISS and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT . 3) Sample with segregation mode: {sample}:{segregation}. Only one sample accepted.Accepted segregation modes: [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]. Value is case insensitive. e.g. HG0097:DeNovo Sample must have parents defined and indexed. ", required = false, arity = 1)
        public String sample; 
    
        @Parameter(names = {"--genotype"}, description = "Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g. HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT, HET_MISS and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample' parameter when not provided", required = false, arity = 1)
        public String genotype; 
    
        @Parameter(names = {"--sample-data"}, description = "Filter by any SampleData field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is specified, will use all samples from 'sample' or 'genotype' filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can be combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10", required = false, arity = 1)
        public String sampleData; 
    
        @Parameter(names = {"--sample-annotation"}, description = "Selects some samples using metadata information from Catalog. e.g. age>20;phenotype=hpo:123,hpo:456;name=smith", required = false, arity = 1)
        public String sampleAnnotation; 
    
        @Parameter(names = {"--sample-metadata"}, description = "Return the samples metadata group by study. Sample names will appear in the same order as their corresponding genotypes.", required = false, arity = 1)
        public boolean sampleMetadata; 
    
        @Parameter(names = {"--unknown-genotype"}, description = "Returned genotype for unknown genotypes. Common values: [0/0, 0|0, ./.]", required = false, arity = 1)
        public String unknownGenotype; 
    
        @Parameter(names = {"--sample-limit"}, description = "Limit the number of samples to be included in the result", required = false, arity = 1)
        public int sampleLimit; 
    
        @Parameter(names = {"--sample-skip"}, description = "Skip some samples from the result. Useful for sample pagination.", required = false, arity = 1)
        public int sampleSkip; 
    
        @Parameter(names = {"--cohort"}, description = "Select variants with calculated stats for the selected cohorts", required = false, arity = 1)
        public String cohort; 
    
        @Parameter(names = {"--cohort-stats-ref"}, description = "Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsRef; 
    
        @Parameter(names = {"--cohort-stats-alt"}, description = "Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsAlt; 
    
        @Parameter(names = {"--cohort-stats-maf"}, description = "Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsMaf; 
    
        @Parameter(names = {"--cohort-stats-mgf"}, description = "Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsMgf; 
    
        @Parameter(names = {"--cohort-stats-pass"}, description = "Filter PASS frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL>0.8", required = false, arity = 1)
        public String cohortStatsPass; 
    
        @Parameter(names = {"--missing-alleles"}, description = "Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}", required = false, arity = 1)
        public String missingAlleles; 
    
        @Parameter(names = {"--missing-genotypes"}, description = "Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}", required = false, arity = 1)
        public String missingGenotypes; 
    
        @Parameter(names = {"--score"}, description = "Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}", required = false, arity = 1)
        public String score; 
    
        @Parameter(names = {"--family"}, description = "Filter variants where any of the samples from the given family contains the variant (HET or HOM_ALT)", required = false, arity = 1)
        public String family; 
    
        @Parameter(names = {"--family-disorder"}, description = "Specify the disorder to use for the family segregation", required = false, arity = 1)
        public String familyDisorder; 
    
        @Parameter(names = {"--family-segregation"}, description = "Filter by segregation mode from a given family. Accepted values: [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]", required = false, arity = 1)
        public String familySegregation; 
    
        @Parameter(names = {"--family-members"}, description = "Sub set of the members of a given family", required = false, arity = 1)
        public String familyMembers; 
    
        @Parameter(names = {"--family-proband"}, description = "Specify the proband child to use for the family segregation", required = false, arity = 1)
        public String familyProband; 
    
        @Parameter(names = {"--include-study"}, description = "List of studies to include in the result. Accepts 'all' and 'none'.", required = false, arity = 1)
        public String includeStudy; 
    
        @Parameter(names = {"--include-file"}, description = "List of files to be returned. Accepts 'all' and 'none'. If undefined, automatically includes files used for filtering. If none, no file is included.", required = false, arity = 1)
        public String includeFile; 
    
        @Parameter(names = {"--include-sample"}, description = "List of samples to be included in the result. Accepts 'all' and 'none'. If undefined, automatically includes samples used for filtering. If none, no sample is included.", required = false, arity = 1)
        public String includeSample; 
    
        @Parameter(names = {"--include-sample-data"}, description = "List of Sample Data keys (i.e. FORMAT column from VCF file) from Sample Data to include in the output. e.g: DP,AD. Accepts 'all' and 'none'.", required = false, arity = 1)
        public String includeSampleData; 
    
        @Parameter(names = {"--include-genotype"}, description = "Include genotypes, apart of other formats defined with includeFormat", required = false, arity = 1)
        public String includeGenotype; 
    
        @Parameter(names = {"--include-sample-id"}, description = "Include sampleId on each result", required = false, arity = 1)
        public String includeSampleId; 
    
        @Parameter(names = {"--annotation-exists"}, description = "Return only annotated variants", required = false, arity = 1)
        public boolean annotationExists; 
    
        @Parameter(names = {"--gene"}, description = "List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref' parameter", required = false, arity = 1)
        public String gene; 
    
        @Parameter(names = {"--ct"}, description = "List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578. Accepts aliases 'loss_of_function' and 'protein_altering'", required = false, arity = 1)
        public String ct; 
    
        @Parameter(names = {"--xref"}, description = "List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC, Ensembl genes, dbSNP, ClinVar, HPO, Cosmic, ...", required = false, arity = 1)
        public String xref; 
    
        @Parameter(names = {"--biotype"}, description = "List of biotypes, e.g. protein_coding", required = false, arity = 1)
        public String biotype; 
    
        @Parameter(names = {"--protein-substitution"}, description = "Protein substitution scores include SIFT and PolyPhen. You can query using the score {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant", required = false, arity = 1)
        public String proteinSubstitution; 
    
        @Parameter(names = {"--conservation"}, description = "Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g. phastCons>0.5,phylop<0.1,gerp>0.1", required = false, arity = 1)
        public String conservation; 
    
        @Parameter(names = {"--population-frequency-alt"}, description = "Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyAlt; 
    
        @Parameter(names = {"--population-frequency-ref"}, description = "Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyRef; 
    
        @Parameter(names = {"--population-frequency-maf"}, description = "Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyMaf; 
    
        @Parameter(names = {"--transcript-flag"}, description = "List of transcript flags. e.g. canonical, CCDS, basic, LRG, MANE Select, MANE Plus Clinical, EGLH_HaemOnc, TSO500", required = false, arity = 1)
        public String transcriptFlag; 
    
        @Parameter(names = {"--gene-trait-id"}, description = "List of gene trait association id. e.g. 'umls:C0007222' , 'OMIM:269600'", required = false, arity = 1)
        public String geneTraitId; 
    
        @Parameter(names = {"--go"}, description = "List of GO (Gene Ontology) terms. e.g. 'GO:0002020'", required = false, arity = 1)
        public String go; 
    
        @Parameter(names = {"--expression"}, description = "List of tissues of interest. e.g. 'lung'", required = false, arity = 1)
        public String expression; 
    
        @Parameter(names = {"--protein-keyword"}, description = "List of Uniprot protein variant annotation keywords", required = false, arity = 1)
        public String proteinKeyword; 
    
        @Parameter(names = {"--drug"}, description = "List of drug names", required = false, arity = 1)
        public String drug; 
    
        @Parameter(names = {"--functional-score"}, description = "Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 , cadd_raw<=0.3", required = false, arity = 1)
        public String functionalScore; 
    
        @Parameter(names = {"--clinical"}, description = "Clinical source: clinvar, cosmic", required = false, arity = 1)
        public String clinical; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--clinical-confirmed-status"}, description = "Clinical confirmed status", required = false, arity = 1)
        public boolean clinicalConfirmedStatus; 
    
        @Parameter(names = {"--custom-annotation"}, description = "Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}", required = false, arity = 1)
        public String customAnnotation; 
    
        @Parameter(names = {"--panel"}, description = "Filter by genes from the given disease panel", required = false, arity = 1)
        public String panel; 
    
        @Parameter(names = {"--panel-mode-of-inheritance"}, description = "Filter genes from specific panels that match certain mode of inheritance. Accepted values : [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]", required = false, arity = 1)
        public String panelModeOfInheritance; 
    
        @Parameter(names = {"--panel-confidence"}, description = "Filter genes from specific panels that match certain confidence. Accepted values : [ high, medium, low, rejected ]", required = false, arity = 1)
        public String panelConfidence; 
    
        @Parameter(names = {"--panel-role-in-cancer"}, description = "Filter genes from specific panels that match certain role in cancer. Accepted values : [ both, oncogene, tumorSuppressorGene, fusion ]", required = false, arity = 1)
        public String panelRoleInCancer; 
    
        @Parameter(names = {"--trait"}, description = "List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...", required = false, arity = 1)
        public String trait; 
    
  }
    @Parameters(commandNames = {"run-relatedness"}, commandDescription ="Compute a score to quantify relatedness between samples.")
    public class RunRelatednessCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--individuals"}, description = "The body web service individuals parameter", required = false, arity = 1)
        public String individuals;
    
        @Parameter(names = {"--samples"}, description = "The body web service samples parameter", required = false, arity = 1)
        public String samples;
    
        @Parameter(names = {"--minor-allele-freq"}, description = "The body web service minorAlleleFreq parameter", required = false, arity = 1)
        public String minorAlleleFreq;
    
        @Parameter(names = {"--method"}, description = "The body web service method parameter", required = false, arity = 1)
        public String method;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"run-rvtests"}, commandDescription ="Rvtests is a flexible software package for genetic association studies. Supported RvTests commands: rvtest, vcf2kinship")
    public class RunRvtestsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--command"}, description = "The body web service command parameter", required = false, arity = 1)
        public String command;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"aggregationStats-sample"}, commandDescription ="Calculate and fetch sample aggregation stats")
    public class AggregationStatsSampleCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--saved-filter"}, description = "Use a saved filter at User level", required = false, arity = 1)
        public String savedFilter; 
    
        @Parameter(names = {"--region"}, description = "List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.: 2,3:100000-200000", required = false, arity = 1)
        public String region; 
    
        @Parameter(names = {"--type"}, description = "List of types, accepted values are SNV, MNV, INDEL, SV, COPY_NUMBER, COPY_NUMBER_LOSS, COPY_NUMBER_GAIN, INSERTION, DELETION, DUPLICATION, TANDEM_DUPLICATION, BREAKEND, e.g. SNV,INDEL", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--project", "-p"}, description = "Project [user@]project where project can be either the ID or the alias", required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--study", "-s"}, description = "Filter variants from the given studies, these can be either the numeric ID or the alias with the format user@project:study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--file"}, description = "Filter variants from the files specified. This will set includeFile parameter when not provided", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--filter"}, description = "Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the filter. e.g.: PASS,LowGQX", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--sample"}, description = "Filter variants by sample genotype. This will automatically set 'includeSample' parameter when not provided. This filter accepts multiple 3 forms: 1) List of samples: Samples that contain the main variant. Accepts AND (;) and OR (,) operators.  e.g. HG0097,HG0098 . 2) List of samples with genotypes: {sample}:{gt1},{gt2}. Accepts AND (;) and OR (,) operators.  e.g. HG0097:0/0;HG0098:0/1,1/1 . Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT, HET_MISS and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT . 3) Sample with segregation mode: {sample}:{segregation}. Only one sample accepted.Accepted segregation modes: [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]. Value is case insensitive. e.g. HG0097:DeNovo Sample must have parents defined and indexed. ", required = false, arity = 1)
        public String sample; 
    
        @Parameter(names = {"--genotype"}, description = "Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g. HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT, HET_MISS and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample' parameter when not provided", required = false, arity = 1)
        public String genotype; 
    
        @Parameter(names = {"--sample-annotation"}, description = "Selects some samples using metadata information from Catalog. e.g. age>20;phenotype=hpo:123,hpo:456;name=smith", required = false, arity = 1)
        public String sampleAnnotation; 
    
        @Parameter(names = {"--family"}, description = "Filter variants where any of the samples from the given family contains the variant (HET or HOM_ALT)", required = false, arity = 1)
        public String family; 
    
        @Parameter(names = {"--family-disorder"}, description = "Specify the disorder to use for the family segregation", required = false, arity = 1)
        public String familyDisorder; 
    
        @Parameter(names = {"--family-segregation"}, description = "Filter by segregation mode from a given family. Accepted values: [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]", required = false, arity = 1)
        public String familySegregation; 
    
        @Parameter(names = {"--family-members"}, description = "Sub set of the members of a given family", required = false, arity = 1)
        public String familyMembers; 
    
        @Parameter(names = {"--family-proband"}, description = "Specify the proband child to use for the family segregation", required = false, arity = 1)
        public String familyProband; 
    
        @Parameter(names = {"--ct"}, description = "List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578. Accepts aliases 'loss_of_function' and 'protein_altering'", required = false, arity = 1)
        public String ct; 
    
        @Parameter(names = {"--biotype"}, description = "List of biotypes, e.g. protein_coding", required = false, arity = 1)
        public String biotype; 
    
        @Parameter(names = {"--population-frequency-alt"}, description = "Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyAlt; 
    
        @Parameter(names = {"--clinical"}, description = "Clinical source: clinvar, cosmic", required = false, arity = 1)
        public String clinical; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--clinical-confirmed-status"}, description = "Clinical confirmed status", required = false, arity = 1)
        public boolean clinicalConfirmedStatus; 
    
        @Parameter(names = {"--field"}, description = "List of facet fields separated by semicolons, e.g.: studies;type. For nested faceted fields use >>, e.g.: chromosome>>type . Accepted values: chromosome, type, genotype, consequenceType, biotype, clinicalSignificance, dp, qual, filter", required = false, arity = 1)
        public String field; 
    
  }
    @Parameters(commandNames = {"run-sample-eligibility"}, commandDescription ="Filter samples by a complex query involving metadata and variants data")
    public class RunSampleEligibilityCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--query"}, description = "The body web service query parameter", required = false, arity = 1)
        public String query;
    
        @Parameter(names = {"--index"}, description = "The body web service index parameter", required = false, arity = 1)
        public boolean index;
    
        @Parameter(names = {"--cohort-id"}, description = "The body web service cohortId parameter", required = false, arity = 1)
        public String cohortId;
    
  }
    @Parameters(commandNames = {"run-sample-qc"}, commandDescription ="Run quality control (QC) for a given sample. It includes variant stats, and if the sample is somatic, mutational signature and genome plot are calculated.")
    public class RunSampleQcCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample;
    
        @Parameter(names = {"--variant-stats-id"}, description = "The body web service variantStatsId parameter", required = false, arity = 1)
        public String variantStatsId;
    
        @Parameter(names = {"--variant-stats-description"}, description = "The body web service variantStatsDescription parameter", required = false, arity = 1)
        public String variantStatsDescription;
    
        @Parameter(names = {"--signature-id"}, description = "The body web service signatureId parameter", required = false, arity = 1)
        public String signatureId;
    
        @Parameter(names = {"--signature-description"}, description = "The body web service signatureDescription parameter", required = false, arity = 1)
        public String signatureDescription;
    
        @Parameter(names = {"--signature-release"}, description = "The body web service signatureRelease parameter", required = false, arity = 1)
        public String signatureRelease;
    
        @Parameter(names = {"--genome-plot-id"}, description = "The body web service genomePlotId parameter", required = false, arity = 1)
        public String genomePlotId;
    
        @Parameter(names = {"--genome-plot-description"}, description = "The body web service genomePlotDescription parameter", required = false, arity = 1)
        public String genomePlotDescription;
    
        @Parameter(names = {"--genome-plot-config-file"}, description = "The body web service genomePlotConfigFile parameter", required = false, arity = 1)
        public String genomePlotConfigFile;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
  }
    @Parameters(commandNames = {"query-sample"}, commandDescription ="Get sample data of a given variant")
    public class QuerySampleCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--variant"}, description = "Variant", required = false, arity = 1)
        public String variant; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study where all the samples belong to", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--genotype"}, description = "Genotypes that the sample must have to be selected", required = false, arity = 1)
        public String genotype; 
    
  }
    @Parameters(commandNames = {"run-sample"}, commandDescription ="Get samples given a set of variants")
    public class RunSampleCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--genotypes"}, description = "The body web service genotypes parameter", required = false, arity = 1)
        public String genotypes;
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample;
    
        @Parameter(names = {"--samples-in-all-variants"}, description = "The body web service samplesInAllVariants parameter", required = false, arity = 1)
        public boolean samplesInAllVariants;
    
        @Parameter(names = {"--max-variants"}, description = "The body web service maxVariants parameter", required = false, arity = 1)
        public int maxVariants;
    
  }
    @Parameters(commandNames = {"query-sample-stats"}, commandDescription ="Obtain sample variant stats from a sample.")
    public class QuerySampleStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--region"}, description = "List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.: 2,3:100000-200000", required = false, arity = 1)
        public String region; 
    
        @Parameter(names = {"--type"}, description = "List of types, accepted values are SNV, MNV, INDEL, SV, COPY_NUMBER, COPY_NUMBER_LOSS, COPY_NUMBER_GAIN, INSERTION, DELETION, DUPLICATION, TANDEM_DUPLICATION, BREAKEND, e.g. SNV,INDEL", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--study", "-s"}, description = "Filter variants from the given studies, these can be either the numeric ID or the alias with the format user@project:study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--file"}, description = "Filter variants from the files specified. This will set includeFile parameter when not provided", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--filter"}, description = "Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the filter. e.g.: PASS,LowGQX", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--sample-data"}, description = "Filter by any SampleData field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is specified, will use all samples from 'sample' or 'genotype' filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can be combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10", required = false, arity = 1)
        public String sampleData; 
    
        @Parameter(names = {"--ct"}, description = "List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578. Accepts aliases 'loss_of_function' and 'protein_altering'", required = false, arity = 1)
        public String ct; 
    
        @Parameter(names = {"--biotype"}, description = "List of biotypes, e.g. protein_coding", required = false, arity = 1)
        public String biotype; 
    
        @Parameter(names = {"--transcript-flag"}, description = "List of transcript flags. e.g. canonical, CCDS, basic, LRG, MANE Select, MANE Plus Clinical, EGLH_HaemOnc, TSO500", required = false, arity = 1)
        public String transcriptFlag; 
    
        @Parameter(names = {"--population-frequency-alt"}, description = "Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyAlt; 
    
        @Parameter(names = {"--clinical"}, description = "Clinical source: clinvar, cosmic", required = false, arity = 1)
        public String clinical; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--clinical-confirmed-status"}, description = "Clinical confirmed status", required = false, arity = 1)
        public boolean clinicalConfirmedStatus; 
    
        @Parameter(names = {"--filter-transcript"}, description = "Do filter transcripts when obtaining transcript counts", required = false, arity = 1)
        public boolean filterTranscript; 
    
        @Parameter(names = {"--sample"}, description = "Sample ID", required = true, arity = 1)
        public String sample; 
    
  }
    @Parameters(commandNames = {"run-sample-stats"}, commandDescription ="Compute sample variant stats for the selected list of samples.")
    public class RunSampleStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample;
    
        @Parameter(names = {"--individual"}, description = "The body web service individual parameter", required = false, arity = 1)
        public String individual;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
        @Parameter(names = {"--index"}, description = "The body web service index parameter", required = false, arity = 1)
        public boolean index;
    
        @Parameter(names = {"--index-overwrite"}, description = "The body web service indexOverwrite parameter", required = false, arity = 1)
        public boolean indexOverwrite;
    
        @Parameter(names = {"--index-id"}, description = "The body web service indexId parameter", required = false, arity = 1)
        public String indexId;
    
        @Parameter(names = {"--index-description"}, description = "The body web service indexDescription parameter", required = false, arity = 1)
        public String indexDescription;
    
  }
    @Parameters(commandNames = {"run-stats-export"}, commandDescription ="Export calculated variant stats and frequencies")
    public class RunStatsExportCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--project", "-p"}, description = "Project [user@]project where project can be either the ID or the alias", required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--cohorts"}, description = "The body web service cohorts parameter", required = false, arity = 1)
        public String cohorts;
    
        @Parameter(names = {"--output"}, description = "The body web service output parameter", required = false, arity = 1)
        public String output;
    
        @Parameter(names = {"--region"}, description = "The body web service region parameter", required = false, arity = 1)
        public String region;
    
        @Parameter(names = {"--gene"}, description = "The body web service gene parameter", required = false, arity = 1)
        public String gene;
    
        @Parameter(names = {"--output-format"}, description = "The body web service outputFormat parameter", required = false, arity = 1)
        public String outputFormat;
    
  }
    @Parameters(commandNames = {"run-stats"}, commandDescription ="Compute variant stats for any cohort and any set of variants.")
    public class RunStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study", "-s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--cohort"}, description = "The body web service cohort parameter", required = false, arity = 1)
        public String cohort;
    
        @Parameter(names = {"--samples"}, description = "The body web service samples parameter", required = false, arity = 1)
        public String samples;
    
        @Parameter(names = {"--region"}, description = "The body web service region parameter", required = false, arity = 1)
        public String region;
    
        @Parameter(names = {"--gene"}, description = "The body web service gene parameter", required = false, arity = 1)
        public String gene;
    
        @Parameter(names = {"--outdir"}, description = "The body web service outdir parameter", required = false, arity = 1)
        public String outdir;
    
        @Parameter(names = {"--output-file-name"}, description = "The body web service outputFileName parameter", required = false, arity = 1)
        public String outputFileName;
    
        @Parameter(names = {"--aggregation-mapping-file"}, description = "The body web service aggregationMappingFile parameter", required = false, arity = 1)
        public String aggregationMappingFile;
    
  }
}