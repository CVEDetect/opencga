/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.core.response.RestResponse;
import java.lang.Object;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.app.cli.main.options.StudyCommandOptions;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.catalog.utils.ParamUtils.AddRemoveAction;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.audit.AuditRecord;
import org.opencb.opencga.core.models.common.Enums.Entity;
import org.opencb.opencga.core.models.common.Enums.PermissionRuleAction;
import org.opencb.opencga.core.models.common.Enums.Resource;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.study.CustomGroup;
import org.opencb.opencga.core.models.study.Group;
import org.opencb.opencga.core.models.study.GroupCreateParams;
import org.opencb.opencga.core.models.study.GroupUpdateParams;
import org.opencb.opencga.core.models.study.PermissionRule;
import org.opencb.opencga.core.models.study.Study;
import org.opencb.opencga.core.models.study.StudyAclUpdateParams;
import org.opencb.opencga.core.models.study.StudyCreateParams;
import org.opencb.opencga.core.models.study.StudyUpdateParams;
import org.opencb.opencga.core.models.study.TemplateParams;
import org.opencb.opencga.core.models.study.Variable;
import org.opencb.opencga.core.models.study.VariableSet;
import org.opencb.opencga.core.models.study.VariableSetCreateParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-27 13:07:31
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class StudyCommandExecutor extends OpencgaCommandExecutor {

    private StudyCommandOptions studyCommandOptions;

    public StudyCommandExecutor(StudyCommandOptions studyCommandOptions) {
        super(studyCommandOptions.commonCommandOptions);
        this.studyCommandOptions = studyCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Studies command line");
        
        String subCommandString = getParsedSubCommand(studyCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "updateAcl":
                queryResponse = updateAcl();
                break;
            case "create":
                queryResponse = create();
                break;
            case "search":
                queryResponse = search();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "aggregationStats":
                queryResponse = aggregationStats();
                break;
            case "info":
                queryResponse = info();
                break;
            case "searchAudit":
                queryResponse = searchAudit();
                break;
            case "groups":
                queryResponse = groups();
                break;
            case "updateGroups":
                queryResponse = updateGroups();
                break;
            case "updateUsers":
                queryResponse = updateUsers();
                break;
            case "permissionRules":
                queryResponse = permissionRules();
                break;
            case "updatePermissionRules":
                queryResponse = updatePermissionRules();
                break;
            case "runTemplates":
                queryResponse = runTemplates();
                break;
            case "uploadTemplates":
                queryResponse = uploadTemplates();
                break;
            case "deleteTemplates":
                queryResponse = deleteTemplates();
                break;
            case "update":
                queryResponse = update();
                break;
            case "variableSets":
                queryResponse = variableSets();
                break;
            case "updateVariableSets":
                queryResponse = updateVariableSets();
                break;
            case "updateVariables":
                queryResponse = updateVariables();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<ObjectMap> updateAcl() throws ClientException {
        logger.debug("Executing updateAcl in Study command line");

        StudyCommandOptions.UpdateAclCommandOptions commandOptions = studyCommandOptions.updateAclCommandOptions;
        StudyAclUpdateParams studyAclUpdateParams = new StudyAclUpdateParams()
                .setStudy(commandOptions.study)
                .setTemplate(commandOptions.template);

        return openCGAClient.getStudyClient().updateAcl(commandOptions.members,commandOptions.action, studyAclUpdateParams);
    }
    
    private RestResponse<Study> create() throws ClientException {
        logger.debug("Executing create in Study command line");

        StudyCommandOptions.CreateCommandOptions commandOptions = studyCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);

        StudyCreateParams studyCreateParams = new StudyCreateParams()
                .setId(commandOptions.id)
                .setName(commandOptions.name)
                .setAlias(commandOptions.alias)
                .setDescription(commandOptions.description)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate);

        return openCGAClient.getStudyClient().create(studyCreateParams, queryParams);
    }
    
    private RestResponse<Study> search() throws ClientException {
        logger.debug("Executing search in Study command line");

        StudyCommandOptions.SearchCommandOptions commandOptions = studyCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("alias", commandOptions.alias);
        queryParams.putIfNotEmpty("fqn", commandOptions.fqn);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);
        queryParams.putIfNotEmpty("release", commandOptions.release);

        return openCGAClient.getStudyClient().search(commandOptions.project, queryParams);
    }
    
    private RestResponse<ObjectMap> acl() throws ClientException {
        logger.debug("Executing acl in Study command line");

        StudyCommandOptions.AclCommandOptions commandOptions = studyCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getStudyClient().acl(commandOptions.studies, queryParams);
    }
    
    private RestResponse<FacetField> aggregationStats() throws ClientException {
        logger.debug("Executing aggregationStats in Study command line");

        StudyCommandOptions.AggregationStatsCommandOptions commandOptions = studyCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("defaultParam", commandOptions.defaultParam);
        queryParams.putIfNotEmpty("fileFields", commandOptions.fileFields);
        queryParams.putIfNotEmpty("individualFields", commandOptions.individualFields);
        queryParams.putIfNotEmpty("familyFields", commandOptions.familyFields);
        queryParams.putIfNotEmpty("sampleFields", commandOptions.sampleFields);
        queryParams.putIfNotEmpty("cohortFields", commandOptions.cohortFields);
        queryParams.putIfNotEmpty("jobFields", commandOptions.jobFields);

        return openCGAClient.getStudyClient().aggregationStats(commandOptions.studies, queryParams);
    }
    
    private RestResponse<Study> info() throws ClientException {
        logger.debug("Executing info in Study command line");

        StudyCommandOptions.InfoCommandOptions commandOptions = studyCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);

        return openCGAClient.getStudyClient().info(commandOptions.studies, queryParams);
    }
    
    private RestResponse<AuditRecord> searchAudit() throws ClientException {
        logger.debug("Executing searchAudit in Study command line");

        StudyCommandOptions.SearchAuditCommandOptions commandOptions = studyCommandOptions.searchAuditCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("operationId", commandOptions.operationId);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("action", commandOptions.action);
        queryParams.putIfNotNull("resource", commandOptions.resource);
        queryParams.putIfNotEmpty("resourceId", commandOptions.resourceId);
        queryParams.putIfNotEmpty("resourceUuid", commandOptions.resourceUuid);
        queryParams.putIfNotNull("status", commandOptions.status);
        queryParams.putIfNotEmpty("date", commandOptions.date);

        return openCGAClient.getStudyClient().searchAudit(commandOptions.study, queryParams);
    }
    
    private RestResponse<CustomGroup> groups() throws ClientException {
        logger.debug("Executing groups in Study command line");

        StudyCommandOptions.GroupsCommandOptions commandOptions = studyCommandOptions.groupsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getStudyClient().groups(commandOptions.study, queryParams);
    }
    
    private RestResponse<Group> updateGroups() throws ClientException {
        logger.debug("Executing updateGroups in Study command line");

        StudyCommandOptions.UpdateGroupsCommandOptions commandOptions = studyCommandOptions.updateGroupsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("action", commandOptions.action);

        GroupCreateParams groupCreateParams = new GroupCreateParams()
                .setId(commandOptions.id);

        return openCGAClient.getStudyClient().updateGroups(commandOptions.study, groupCreateParams, queryParams);
    }
    
    private RestResponse<Group> updateUsers() throws ClientException {
        logger.debug("Executing updateUsers in Study command line");

        StudyCommandOptions.UpdateUsersCommandOptions commandOptions = studyCommandOptions.updateUsersCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("action", commandOptions.action);

        GroupUpdateParams groupUpdateParams = new GroupUpdateParams();

        return openCGAClient.getStudyClient().updateUsers(commandOptions.study,commandOptions.group, groupUpdateParams, queryParams);
    }
    
    private RestResponse<PermissionRule> permissionRules() throws ClientException {
        logger.debug("Executing permissionRules in Study command line");

        StudyCommandOptions.PermissionRulesCommandOptions commandOptions = studyCommandOptions.permissionRulesCommandOptions;
        return openCGAClient.getStudyClient().permissionRules(commandOptions.study,commandOptions.entity);
    }
    
    private RestResponse<PermissionRule> updatePermissionRules() throws ClientException {
        logger.debug("Executing updatePermissionRules in Study command line");

        StudyCommandOptions.UpdatePermissionRulesCommandOptions commandOptions = studyCommandOptions.updatePermissionRulesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("action", commandOptions.action);

        PermissionRule permissionRule = new PermissionRule()
                .setId(commandOptions.id);

        return openCGAClient.getStudyClient().updatePermissionRules(commandOptions.study,commandOptions.entity, permissionRule, queryParams);
    }
    
    private RestResponse<Job> runTemplates() throws ClientException {
        logger.debug("Executing runTemplates in Study command line");

        StudyCommandOptions.RunTemplatesCommandOptions commandOptions = studyCommandOptions.runTemplatesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        TemplateParams templateParams = new TemplateParams()
                .setId(commandOptions.id)
                .setOverwrite(commandOptions.overwrite)
                .setResume(commandOptions.resume);

        return openCGAClient.getStudyClient().runTemplates(commandOptions.study, templateParams, queryParams);
    }
    
    private RestResponse<String> uploadTemplates() throws ClientException {
        logger.debug("Executing uploadTemplates in Study command line");

        StudyCommandOptions.UploadTemplatesCommandOptions commandOptions = studyCommandOptions.uploadTemplatesCommandOptions;
        ObjectMap queryParams = new ObjectMap();
        return openCGAClient.getStudyClient().uploadTemplates(commandOptions.study, queryParams);
    }
    
    private RestResponse<Boolean> deleteTemplates() throws ClientException {
        logger.debug("Executing deleteTemplates in Study command line");

        StudyCommandOptions.DeleteTemplatesCommandOptions commandOptions = studyCommandOptions.deleteTemplatesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getStudyClient().deleteTemplates(commandOptions.study,commandOptions.templateId, queryParams);
    }
    
    private RestResponse<Study> update() throws ClientException {
        logger.debug("Executing update in Study command line");

        StudyCommandOptions.UpdateCommandOptions commandOptions = studyCommandOptions.updateCommandOptions;
        StudyUpdateParams studyUpdateParams = new StudyUpdateParams()
                .setName(commandOptions.name)
                .setAlias(commandOptions.alias)
                .setDescription(commandOptions.description)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate);

        return openCGAClient.getStudyClient().update(commandOptions.study, studyUpdateParams);
    }
    
    private RestResponse<VariableSet> variableSets() throws ClientException {
        logger.debug("Executing variableSets in Study command line");

        StudyCommandOptions.VariableSetsCommandOptions commandOptions = studyCommandOptions.variableSetsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("id", commandOptions.id);

        return openCGAClient.getStudyClient().variableSets(commandOptions.study, queryParams);
    }
    
    private RestResponse<VariableSet> updateVariableSets() throws ClientException {
        logger.debug("Executing updateVariableSets in Study command line");

        StudyCommandOptions.UpdateVariableSetsCommandOptions commandOptions = studyCommandOptions.updateVariableSetsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("action", commandOptions.action);

        VariableSetCreateParams variableSetCreateParams = new VariableSetCreateParams()
                .setId(commandOptions.id)
                .setName(commandOptions.name)
                .setDescription(commandOptions.description);

        return openCGAClient.getStudyClient().updateVariableSets(commandOptions.study, variableSetCreateParams, queryParams);
    }
    
    private RestResponse<VariableSet> updateVariables() throws ClientException {
        logger.debug("Executing updateVariables in Study command line");

        StudyCommandOptions.UpdateVariablesCommandOptions commandOptions = studyCommandOptions.updateVariablesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("action", commandOptions.action);

        Variable variable = new Variable()
                .setId(commandOptions.id)
                .setName(commandOptions.name)
                .setCategory(commandOptions.category)
                .setDefaultValue(commandOptions.defaultValue)
                .setRequired(commandOptions.required)
                .setMultiValue(commandOptions.multiValue)
                .setDependsOn(commandOptions.dependsOn)
                .setDescription(commandOptions.description);

        return openCGAClient.getStudyClient().updateVariables(commandOptions.study,commandOptions.variableSet, variable, queryParams);
    }
    
}
