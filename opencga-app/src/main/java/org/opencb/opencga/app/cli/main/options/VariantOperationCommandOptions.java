/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.ParametersDelegate;
import com.beust.jcommander.Parameter;
import static org.opencb.opencga.app.cli.GeneralCliOptions.*;
import com.beust.jcommander.Parameters;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-05 17:10:12
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the VariantOperation command line.
 *    Command line version: 2.1.0
 *    PATH: operation
 */
@Parameters(commandNames = {"operations - variant storage"}, commandDescription = "VariantOperation commands")
public class VariantOperationCommandOptions {

        public JCommander jCommander;
        public CommonCommandOptions commonCommandOptions;

        public ConfigureCellbaseCommandOptions configureCellbaseCommandOptions;
        public AggregateVariantCommandOptions aggregateVariantCommandOptions;
        public DeleteVariantAnnotationCommandOptions deleteVariantAnnotationCommandOptions;
        public IndexVariantAnnotationCommandOptions indexVariantAnnotationCommandOptions;
        public SaveVariantAnnotationCommandOptions saveVariantAnnotationCommandOptions;
        public ConfigureVariantCommandOptions configureVariantCommandOptions;
        public AggregateVariantFamilyCommandOptions aggregateVariantFamilyCommandOptions;
        public IndexVariantFamilyCommandOptions indexVariantFamilyCommandOptions;
        public LauncherVariantIndexCommandOptions launcherVariantIndexCommandOptions;
        public RunVariantJulieCommandOptions runVariantJulieCommandOptions;
        public RepairVariantMetadataCommandOptions repairVariantMetadataCommandOptions;
        public SynchronizeVariantMetadataCommandOptions synchronizeVariantMetadataCommandOptions;
        public IndexVariantSampleCommandOptions indexVariantSampleCommandOptions;
        public ConfigureSampleIndexCommandOptions configureSampleIndexCommandOptions;
        public DeleteVariantScoreCommandOptions deleteVariantScoreCommandOptions;
        public IndexVariantScoreCommandOptions indexVariantScoreCommandOptions;
        public SecondaryIndexVariantCommandOptions secondaryIndexVariantCommandOptions;
        public DeleteVariantSecondaryIndexCommandOptions deleteVariantSecondaryIndexCommandOptions;
        public IndexVariantStatsCommandOptions indexVariantStatsCommandOptions;


    public VariantOperationCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        this.jCommander = jCommander;
        this.commonCommandOptions = commonCommandOptions;
        this.configureCellbaseCommandOptions = new ConfigureCellbaseCommandOptions();
        this.aggregateVariantCommandOptions = new AggregateVariantCommandOptions();
        this.deleteVariantAnnotationCommandOptions = new DeleteVariantAnnotationCommandOptions();
        this.indexVariantAnnotationCommandOptions = new IndexVariantAnnotationCommandOptions();
        this.saveVariantAnnotationCommandOptions = new SaveVariantAnnotationCommandOptions();
        this.configureVariantCommandOptions = new ConfigureVariantCommandOptions();
        this.aggregateVariantFamilyCommandOptions = new AggregateVariantFamilyCommandOptions();
        this.indexVariantFamilyCommandOptions = new IndexVariantFamilyCommandOptions();
        this.launcherVariantIndexCommandOptions = new LauncherVariantIndexCommandOptions();
        this.runVariantJulieCommandOptions = new RunVariantJulieCommandOptions();
        this.repairVariantMetadataCommandOptions = new RepairVariantMetadataCommandOptions();
        this.synchronizeVariantMetadataCommandOptions = new SynchronizeVariantMetadataCommandOptions();
        this.indexVariantSampleCommandOptions = new IndexVariantSampleCommandOptions();
        this.configureSampleIndexCommandOptions = new ConfigureSampleIndexCommandOptions();
        this.deleteVariantScoreCommandOptions = new DeleteVariantScoreCommandOptions();
        this.indexVariantScoreCommandOptions = new IndexVariantScoreCommandOptions();
        this.secondaryIndexVariantCommandOptions = new SecondaryIndexVariantCommandOptions();
        this.deleteVariantSecondaryIndexCommandOptions = new DeleteVariantSecondaryIndexCommandOptions();
        this.indexVariantStatsCommandOptions = new IndexVariantStatsCommandOptions();
    
    }
    
    
    @Parameters(commandNames = {"configure-cellbase"}, commandDescription = "Update Cellbase configuration.")
    public class ConfigureCellbaseCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--project"}, description = "Project [user@]project where project can be either the ID or the alias",
                              required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--annotation-update"}, description = "Create and load variant annotations into the database",
                              required = false, arity = 1)
        public boolean annotationUpdate; 
    
        @Parameter(names = {"--annotation-save-id"}, description = "Save a copy of the current variant annotation at the database",
                              required = false, arity = 1)
        public String annotationSaveId; 
    
  }
  
  
    @Parameters(commandNames = {"aggregate-variant"}, commandDescription = "Find variants where not all the samples are present, and fill "
                              + "the empty values, excluding HOM-REF (0/0) values.")
    public class AggregateVariantCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"delete-variant-annotation"}, commandDescription = "Deletes a saved copy of variant annotation.")
    public class DeleteVariantAnnotationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--project"}, description = "Project [user@]project where project can be either the ID or the alias",
                              required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--annotation-id"}, description = "Annotation identifier", required = false, arity = 1)
        public String annotationId; 
    
  }
  
  
    @Parameters(commandNames = {"index-variant-annotation"}, commandDescription = "Create and load variant annotations into the database.")
    public class IndexVariantAnnotationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--project"}, description = "Project [user@]project where project can be either the ID or the alias",
                              required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"save-variant-annotation"}, commandDescription = "Save a copy of the current variant annotation at the "
                              + "database.")
    public class SaveVariantAnnotationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--project"}, description = "Project [user@]project where project can be either the ID or the alias",
                              required = false, arity = 1)
        public String project; 
    
  }
  
  
    @Parameters(commandNames = {"configure-variant"}, commandDescription = "Update Variant Storage Engine configuration. Can be updated "
                              + "at Project or Study level.")
    public class ConfigureVariantCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--project"}, description = "Project [user@]project where project can be either the ID or the alias",
                              required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"aggregate-variant-family"}, commandDescription = "Find variants where not all the samples are present, "
                              + "and fill the empty values.")
    public class AggregateVariantFamilyCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"index-variant-family"}, commandDescription = "Build the family index.")
    public class IndexVariantFamilyCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"launcher-variant-index"}, commandDescription = "Detect non-indexed VCF files in the study, and submit a "
                              + "job for indexing them.")
    public class LauncherVariantIndexCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"run-variant-julie"}, commandDescription = "Transform VariantStats into PopulationFrequency values and "
                              + "updates the VariantAnnotation.")
    public class RunVariantJulieCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--project"}, description = "project", required = false, arity = 1)
        public String project; 
    
  }
  
  
    @Parameters(commandNames = {"repair-variant-metadata"}, commandDescription = "Execute some repairs on Variant Storage Metadata. "
                              + "Advanced users only.")
    public class RepairVariantMetadataCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
  }
  
  
    @Parameters(commandNames = {"synchronize-variant-metadata"}, commandDescription = "Synchronize catalog with variant storage metadata.")
    public class SynchronizeVariantMetadataCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"index-variant-sample"}, commandDescription = "Build and annotate the sample index.")
    public class IndexVariantSampleCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"configure-sample-index"}, commandDescription = "Update SampleIndex configuration.")
    public class ConfigureSampleIndexCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"delete-variant-score"}, commandDescription = "Remove a variant score in the database.")
    public class DeleteVariantScoreCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--name"}, description = "Unique name of the score within the study", required = false, arity = 1)
        public String name; 
    
        @Parameter(names = {"--resume"}, description = "Resume a previously failed remove", required = false, arity = 1)
        public boolean resume; 
    
        @Parameter(names = {"--force"}, description = "Force remove of partially indexed scores", required = false, arity = 1)
        public boolean force; 
    
  }
  
  
    @Parameters(commandNames = {"index-variant-score"}, commandDescription = "Index a variant score in the database.")
    public class IndexVariantScoreCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"secondary-index-variant"}, commandDescription = "Creates a secondary index using a search engine. If "
                              + "samples are provided, sample data will be added to the secondary index.")
    public class SecondaryIndexVariantCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--project"}, description = "Project [user@]project where project can be either the ID or the alias",
                              required = false, arity = 1)
        public String project; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"delete-variant-secondary-index"}, commandDescription = "Remove a secondary index from the search engine "
                              + "for a specific set of samples.")
    public class DeleteVariantSecondaryIndexCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--samples"}, description = "Samples to remove. Needs to provide all the samples in the secondary index.",
                              required = false, arity = 1)
        public String samples; 
    
  }
  
  
    @Parameters(commandNames = {"index-variant-stats"}, commandDescription = "Compute variant stats for any cohort and any set of "
                              + "variants and index the result in the variant storage database.")
    public class IndexVariantStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
  }
  
  
}
