/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors.catalog;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.opencga.app.cli.main.options.ProjectCommandOptions;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.project.Project;
import org.opencb.opencga.core.models.project.ProjectCreateParams;
import org.opencb.opencga.core.models.project.ProjectUpdateParams;
import org.opencb.opencga.core.models.study.Study;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-05 17:10:13
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class ProjectCommandExecutor extends OpencgaCommandExecutor {

    private ProjectCommandOptions projectCommandOptions;

    public ProjectCommandExecutor(ProjectCommandOptions projectCommandOptions) {
        super(projectCommandOptions.commonCommandOptions);
        this.projectCommandOptions = projectCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Projects command line");
        
        String subCommandString = getParsedSubCommand(projectCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "create":
                queryResponse = create();
                break;
            case "search":
                queryResponse = search();
                break;
            case "aggregationStats":
                queryResponse = aggregationStats();
                break;
            case "info":
                queryResponse = info();
                break;
            case "incRelease":
                queryResponse = incRelease();
                break;
            case "studies":
                queryResponse = studies();
                break;
            case "update":
                queryResponse = update();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<Project> create() throws ClientException {
        logger.debug("Executing create in Project command line");

        ProjectCommandOptions.CreateCommandOptions commandOptions = projectCommandOptions.createCommandOptions;
        ProjectCreateParams projectCreateParams = new ProjectCreateParams()
                .setId(commandOptions.id)
                .setName(commandOptions.name)
                .setDescription(commandOptions.description);

        return openCGAClient.getProjectClient().create(projectCreateParams);
    }
    
    private RestResponse<Project> search() throws ClientException {
        logger.debug("Executing search in Project command line");

        ProjectCommandOptions.SearchCommandOptions commandOptions = projectCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("owner", commandOptions.owner);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("fqn", commandOptions.fqn);
        queryParams.putIfNotEmpty("organization", commandOptions.organization);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);

        return openCGAClient.getProjectClient().search(queryParams);
    }
    
    private RestResponse<FacetField> aggregationStats() throws ClientException {
        logger.debug("Executing aggregationStats in Project command line");

        ProjectCommandOptions.AggregationStatsCommandOptions commandOptions = projectCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("defaultParam", commandOptions.defaultParam);
        queryParams.putIfNotEmpty("fileFields", commandOptions.fileFields);
        queryParams.putIfNotEmpty("individualFields", commandOptions.individualFields);
        queryParams.putIfNotEmpty("familyFields", commandOptions.familyFields);
        queryParams.putIfNotEmpty("sampleFields", commandOptions.sampleFields);
        queryParams.putIfNotEmpty("cohortFields", commandOptions.cohortFields);
        queryParams.putIfNotEmpty("jobFields", commandOptions.jobFields);

        return openCGAClient.getProjectClient().aggregationStats(commandOptions.projects, queryParams);
    }
    
    private RestResponse<Project> info() throws ClientException {
        logger.debug("Executing info in Project command line");

        ProjectCommandOptions.InfoCommandOptions commandOptions = projectCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);

        return openCGAClient.getProjectClient().info(commandOptions.projects, queryParams);
    }
    
    private RestResponse<Integer> incRelease() throws ClientException {
        logger.debug("Executing incRelease in Project command line");

        ProjectCommandOptions.IncReleaseCommandOptions commandOptions = projectCommandOptions.incReleaseCommandOptions;
        return openCGAClient.getProjectClient().incRelease(commandOptions.project);
    }
    
    private RestResponse<Study> studies() throws ClientException {
        logger.debug("Executing studies in Project command line");

        ProjectCommandOptions.StudiesCommandOptions commandOptions = projectCommandOptions.studiesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);

        return openCGAClient.getProjectClient().studies(commandOptions.project, queryParams);
    }
    
    private RestResponse<Project> update() throws ClientException {
        logger.debug("Executing update in Project command line");

        ProjectCommandOptions.UpdateCommandOptions commandOptions = projectCommandOptions.updateCommandOptions;
        ProjectUpdateParams projectUpdateParams = new ProjectUpdateParams()
                .setName(commandOptions.name)
                .setDescription(commandOptions.description);

        return openCGAClient.getProjectClient().update(commandOptions.project, projectUpdateParams);
    }
    
}
