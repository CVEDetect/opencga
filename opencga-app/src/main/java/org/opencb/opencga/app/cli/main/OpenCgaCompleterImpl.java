/*
 * Copyright 2015-2021-11-23 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opencb.opencga.app.cli.main;

import org.jline.reader.Candidate;
import org.opencb.opencga.app.cli.session.CliSessionManager;
import org.opencb.opencga.client.config.ClientConfiguration;
import org.opencb.opencga.client.config.Host;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;


/*
 * WARNING: AUTOGENERATED CODE
 *
 * This code was generated by a tool.
 * Autogenerated on: 2021-11-23
 *
 * Manual changes to this file may cause unexpected behavior in your application.
 * Manual changes to this file will be overwritten if the code is regenerated.
 *    Command line version: 2.2.0-SNAPSHOT
 *    Command line commit: c3f7e1b78ed43a24fab681078982443ceac76160
 */

public class OpenCgaCompleterImpl extends OpenCgaCompleter {

    public List<Candidate> checkCandidates(Map<String, List<Candidate>> candidatesMap, String line) {
        List<Candidate> res = new ArrayList();
        if (line.trim().contains(" ") || candidatesMap.keySet().contains(line)) {
            String[] commandLine = line.split(" ");
            if (commandLine.length == 2 && commandLine[0].equals("use") && commandLine[1].equals("host")) {
                res = getHostCandidates();
            } else if (commandLine.length == 2 && commandLine[0].equals("use") && commandLine[1].equals("study")) {
                res = getStudyCandidates();
            } else if (commandLine.length == 2) {
                for (String candidate : candidatesMap.keySet()) {
                    if (candidate.equals(commandLine[0])) {
                        res = getCandidates(candidatesMap.get(candidate), commandLine[1]);
                    }
                }
            } else if (commandLine.length == 1 && candidatesMap.keySet().contains(line)) {
                res.addAll(candidatesMap.get(line));
            }
        } else {
            res = getCandidates(commands, line);
        }
        return res;
    }

    private List<Candidate> getHostCandidates() {
        List<Host> hosts = ClientConfiguration.getInstance().getRest().getHosts();
        List<Candidate> res = new ArrayList();
        for (Host host : hosts) {
            res.add(new Candidate(host.getName()));
        }
        return res;
    }

    private List<Candidate> getStudyCandidates() {
        List<String> studies = CliSessionManager.getStudies();
        List<Candidate> res = new ArrayList();
        for (String study : studies) {
            res.add(new Candidate(study));
        }
        return res;
    }

    private List<Candidate> getCandidates(List<Candidate> list, String s) {
        List<Candidate> res = new ArrayList();
        for (Candidate candidate : list) {
            if (candidate.value().startsWith(s)) {
                res.add(candidate);
            }
        }
        return res;
    }
}