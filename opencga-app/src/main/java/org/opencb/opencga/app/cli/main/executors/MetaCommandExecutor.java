/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import java.util.List;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.app.cli.main.options.MetaCommandOptions;
import org.opencb.opencga.client.exceptions.ClientException;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-09-02 11:54:59
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class MetaCommandExecutor extends OpencgaCommandExecutor {

    private MetaCommandOptions metaCommandOptions;

    public MetaCommandExecutor(MetaCommandOptions metaCommandOptions) {
        super(metaCommandOptions.commonCommandOptions);
        this.metaCommandOptions = metaCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Meta command line");
        
        String subCommandString = getParsedSubCommand(metaCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "about":
                queryResponse = about();
                break;
            case "api":
                queryResponse = api();
                break;
            case "fail":
                queryResponse = fail();
                break;
            case "ping":
                queryResponse = ping();
                break;
            case "status":
                queryResponse = status();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<ObjectMap> about() throws ClientException {
        logger.debug("Executing about in Meta command line");

        MetaCommandOptions.AboutCommandOptions commandOptions = metaCommandOptions.aboutCommandOptions;
        return openCGAClient.getMetaClient().about();
    }
    
    private RestResponse<List> api() throws ClientException {
        logger.debug("Executing api in Meta command line");

        MetaCommandOptions.ApiCommandOptions commandOptions = metaCommandOptions.apiCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("category", commandOptions.category);

        return openCGAClient.getMetaClient().api(queryParams);
    }
    
    private RestResponse<ObjectMap> fail() throws ClientException {
        logger.debug("Executing fail in Meta command line");

        MetaCommandOptions.FailCommandOptions commandOptions = metaCommandOptions.failCommandOptions;
        return openCGAClient.getMetaClient().fail();
    }
    
    private RestResponse<String> ping() throws ClientException {
        logger.debug("Executing ping in Meta command line");

        MetaCommandOptions.PingCommandOptions commandOptions = metaCommandOptions.pingCommandOptions;
        return openCGAClient.getMetaClient().ping();
    }
    
    private RestResponse<ObjectMap> status() throws ClientException {
        logger.debug("Executing status in Meta command line");

        MetaCommandOptions.StatusCommandOptions commandOptions = metaCommandOptions.statusCommandOptions;
        return openCGAClient.getMetaClient().status();
    }
    
}
