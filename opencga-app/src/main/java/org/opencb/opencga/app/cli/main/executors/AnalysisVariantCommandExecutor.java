package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.CliSession;
import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.app.cli.main.CommandLineUtils;

import java.util.List;

import org.opencb.opencga.app.cli.main.options.AnalysisVariantCommandOptions;

import org.opencb.opencga.core.models.variant.SampleEligibilityAnalysisParams;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.opencga.core.models.variant.CircosAnalysisParams;
import org.opencb.opencga.core.models.variant.VariantExportParams;
import org.opencb.biodata.models.variant.metadata.SampleVariantStats;
import org.opencb.opencga.core.models.variant.SampleVariantFilterParams;
import org.opencb.biodata.models.variant.metadata.Aggregation;
import org.opencb.biodata.models.variant.metadata.VariantMetadata;
import org.opencb.opencga.core.models.variant.IndividualQcAnalysisParams;
import org.opencb.commons.datastore.core.QueryResponse;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividual;
import org.opencb.biodata.models.variant.avro.VariantAnnotation;
import org.opencb.biodata.models.variant.Variant;
import org.opencb.opencga.core.models.variant.PlinkWrapperParams;
import org.opencb.opencga.core.models.variant.MendelianErrorAnalysisParams;
import org.opencb.opencga.core.models.variant.MutationalSignatureAnalysisParams;
import org.opencb.opencga.core.models.variant.CohortVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.biodata.models.clinical.qc.Signature;
import org.opencb.opencga.core.models.variant.RelatednessAnalysisParams;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.core.models.variant.FamilyQcAnalysisParams;
import org.opencb.opencga.core.models.variant.SampleVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.GwasAnalysisParams;
import org.opencb.opencga.core.models.variant.KnockoutAnalysisParams;
import java.util.Map;
import org.opencb.biodata.models.clinical.ClinicalProperty.ModeOfInheritance;
import org.opencb.opencga.core.models.operations.variant.VariantStatsExportParams;
import org.opencb.opencga.core.models.variant.VariantIndexParams;
import org.opencb.biodata.models.clinical.ClinicalProperty.Penetrance;
import org.opencb.biodata.models.variant.metadata.VariantSetStats;
import org.opencb.opencga.core.models.variant.GatkWrapperParams;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByGene;
import org.opencb.opencga.core.models.variant.AnnotationVariantQueryParams;
import org.opencb.opencga.core.models.variant.SampleQcAnalysisParams;
import org.opencb.opencga.core.models.variant.RvtestsWrapperParams;
import org.opencb.opencga.core.models.variant.VariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.GenomePlotAnalysisParams;
import org.opencb.opencga.core.models.variant.InferredSexAnalysisParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-11-08
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Analysis - Variant command line.
 *    OpenCGA version: 2.2.0-SNAPSHOT
 *    PATH: /{apiVersion}/analysis/variant
 */
public class AnalysisVariantCommandExecutor extends OpencgaCommandExecutor {

    private AnalysisVariantCommandOptions analysisVariantCommandOptions;

    public AnalysisVariantCommandExecutor(AnalysisVariantCommandOptions analysisVariantCommandOptions) {
        super(analysisVariantCommandOptions.commonCommandOptions);
        this.analysisVariantCommandOptions = analysisVariantCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Analysis - Variant command line");

        String subCommandString = getParsedSubCommand(analysisVariantCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "aggregationStats":
                queryResponse = aggregationStats();
                break;
            case "metadata-annotation":
                queryResponse = metadataAnnotation();
                break;
            case "query-annotation":
                queryResponse = queryAnnotation();
                break;
            case "run-circos":
                queryResponse = runCircos();
                break;
            case "delete-cohort-stats":
                queryResponse = deleteCohortStats();
                break;
            case "info-cohort-stats":
                queryResponse = infoCohortStats();
                break;
            case "run-cohort-stats":
                queryResponse = runCohortStats();
                break;
            case "run-export":
                queryResponse = runExport();
                break;
            case "genotypes-family":
                queryResponse = genotypesFamily();
                break;
            case "run-family-qc":
                queryResponse = runFamilyQc();
                break;
            case "delete-file":
                queryResponse = deleteFile();
                break;
            case "run-gatk":
                queryResponse = runGatk();
                break;
            case "run-genomePlot":
                queryResponse = runGenomePlot();
                break;
            case "run-gwas":
                queryResponse = runGwas();
                break;
            case "run-index":
                queryResponse = runIndex();
                break;
            case "run-individual-qc":
                queryResponse = runIndividualQc();
                break;
            case "run-inferredSex":
                queryResponse = runInferredSex();
                break;
            case "query-knockout-gene":
                queryResponse = queryKnockoutGene();
                break;
            case "query-knockout-individual":
                queryResponse = queryKnockoutIndividual();
                break;
            case "run-knockout":
                queryResponse = runKnockout();
                break;
            case "run-mendelianError":
                queryResponse = runMendelianError();
                break;
            case "metadata":
                queryResponse = metadata();
                break;
            case "query-mutationalSignature":
                queryResponse = queryMutationalSignature();
                break;
            case "run-mutationalSignature":
                queryResponse = runMutationalSignature();
                break;
            case "run-plink":
                queryResponse = runPlink();
                break;
            case "query":
                queryResponse = query();
                break;
            case "run-relatedness":
                queryResponse = runRelatedness();
                break;
            case "run-rvtests":
                queryResponse = runRvtests();
                break;
            case "aggregationStats-sample":
                queryResponse = aggregationStatsSample();
                break;
            case "run-sample-eligibility":
                queryResponse = runSampleEligibility();
                break;
            case "run-sample-qc":
                queryResponse = runSampleQc();
                break;
            case "query-sample":
                queryResponse = querySample();
                break;
            case "run-sample":
                queryResponse = runSample();
                break;
            case "query-sample-stats":
                queryResponse = querySampleStats();
                break;
            case "run-sample-stats":
                queryResponse = runSampleStats();
                break;
            case "run-stats-export":
                queryResponse = runStatsExport();
                break;
            case "run-stats":
                queryResponse = runStats();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<QueryResponse> aggregationStats() throws Exception {

        logger.debug("Executing aggregationStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.AggregationStatsCommandOptions commandOptions = analysisVariantCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().aggregationStats(queryParams);
    }

    private RestResponse<ObjectMap> metadataAnnotation() throws Exception {

        logger.debug("Executing metadataAnnotation in Analysis - Variant command line");

        AnalysisVariantCommandOptions.MetadataAnnotationCommandOptions commandOptions = analysisVariantCommandOptions.metadataAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);
        queryParams.putIfNotEmpty("project", commandOptions.project);

        return openCGAClient.getVariantClient().metadataAnnotation(queryParams);
    }

    private RestResponse<VariantAnnotation> queryAnnotation() throws Exception {

        logger.debug("Executing queryAnnotation in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryAnnotationCommandOptions commandOptions = analysisVariantCommandOptions.queryAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);

        return openCGAClient.getVariantClient().queryAnnotation(queryParams);
    }

    private RestResponse<String> runCircos() throws Exception {

        logger.debug("Executing runCircos in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunCircosCommandOptions commandOptions = analysisVariantCommandOptions.runCircosCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        CircosAnalysisParams circosAnalysisParams = new CircosAnalysisParams()
            .setTitle(commandOptions.title)
            .setDensity(commandOptions.density)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runCircos(circosAnalysisParams, queryParams);
    }

    private RestResponse<SampleVariantStats> deleteCohortStats() throws Exception {

        logger.debug("Executing deleteCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.DeleteCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.deleteCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().deleteCohortStats(queryParams);
    }

    private RestResponse<VariantSetStats> infoCohortStats() throws Exception {

        logger.debug("Executing infoCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.InfoCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.infoCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().infoCohortStats(commandOptions.cohort, queryParams);
    }

    private RestResponse<Job> runCohortStats() throws Exception {

        logger.debug("Executing runCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.runCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        CohortVariantStatsAnalysisParams cohortVariantStatsAnalysisParams = new CohortVariantStatsAnalysisParams()
            .setCohort(commandOptions.cohort)
            .setSamples(CommandLineUtils.getListValues(commandOptions.samples))
            .setIndex(commandOptions.index)
            .setSampleAnnotation(commandOptions.sampleAnnotation)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runCohortStats(cohortVariantStatsAnalysisParams, queryParams);
    }

    private RestResponse<Job> runExport() throws Exception {

        logger.debug("Executing runExport in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunExportCommandOptions commandOptions = analysisVariantCommandOptions.runExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        VariantExportParams variantExportParams = new VariantExportParams()
            .setOutdir(commandOptions.outdir)
            .setOutputFileName(commandOptions.outputFileName)
            .setOutputFormat(commandOptions.outputFormat)
            .setVariantsFile(commandOptions.variantsFile)
            .setInclude(commandOptions.bodyInclude)
            .setExclude(commandOptions.bodyExclude)
            .setCompress(commandOptions.compress)
            .setLimit(commandOptions.limit)
            .setSkip(commandOptions.skip)
            .setSummary(commandOptions.summary);
        return openCGAClient.getVariantClient().runExport(variantExportParams, queryParams);
    }

    private RestResponse<ObjectMap> genotypesFamily() throws Exception {

        logger.debug("Executing genotypesFamily in Analysis - Variant command line");

        AnalysisVariantCommandOptions.GenotypesFamilyCommandOptions commandOptions = analysisVariantCommandOptions.genotypesFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("clinicalAnalysis", commandOptions.clinicalAnalysis);
        queryParams.putIfNotNull("penetrance", commandOptions.penetrance);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().genotypesFamily(commandOptions.modeOfInheritance, queryParams);
    }

    private RestResponse<Job> runFamilyQc() throws Exception {

        logger.debug("Executing runFamilyQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunFamilyQcCommandOptions commandOptions = analysisVariantCommandOptions.runFamilyQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        FamilyQcAnalysisParams familyQcAnalysisParams = new FamilyQcAnalysisParams()
            .setFamily(commandOptions.family)
            .setRelatednessMethod(commandOptions.relatednessMethod)
            .setRelatednessMaf(commandOptions.relatednessMaf)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runFamilyQc(familyQcAnalysisParams, queryParams);
    }

    private RestResponse<Job> deleteFile() throws Exception {

        logger.debug("Executing deleteFile in Analysis - Variant command line");

        AnalysisVariantCommandOptions.DeleteFileCommandOptions commandOptions = analysisVariantCommandOptions.deleteFileCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotNull("resume", commandOptions.resume);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().deleteFile(queryParams);
    }

    private RestResponse<Job> runGatk() throws Exception {

        logger.debug("Executing runGatk in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGatkCommandOptions commandOptions = analysisVariantCommandOptions.runGatkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        GatkWrapperParams gatkWrapperParams = new GatkWrapperParams()
            .setCommand(commandOptions.command)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runGatk(gatkWrapperParams, queryParams);
    }

    private RestResponse<Job> runGenomePlot() throws Exception {

        logger.debug("Executing runGenomePlot in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGenomePlotCommandOptions commandOptions = analysisVariantCommandOptions.runGenomePlotCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        GenomePlotAnalysisParams genomePlotAnalysisParams = new GenomePlotAnalysisParams()
            .setSample(commandOptions.sample)
            .setId(commandOptions.id)
            .setDescription(commandOptions.description)
            .setConfigFile(commandOptions.configFile)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runGenomePlot(genomePlotAnalysisParams, queryParams);
    }

    private RestResponse<Job> runGwas() throws Exception {

        logger.debug("Executing runGwas in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGwasCommandOptions commandOptions = analysisVariantCommandOptions.runGwasCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        GwasAnalysisParams gwasAnalysisParams = new GwasAnalysisParams()
            .setPhenotype(commandOptions.phenotype)
            .setIndex(commandOptions.index)
            .setIndexScoreId(commandOptions.indexScoreId)
            .setCaseCohort(commandOptions.caseCohort)
            .setCaseCohortSamplesAnnotation(commandOptions.caseCohortSamplesAnnotation)
            .setCaseCohortSamples(CommandLineUtils.getListValues(commandOptions.caseCohortSamples))
            .setControlCohort(commandOptions.controlCohort)
            .setControlCohortSamplesAnnotation(commandOptions.controlCohortSamplesAnnotation)
            .setControlCohortSamples(CommandLineUtils.getListValues(commandOptions.controlCohortSamples))
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runGwas(gwasAnalysisParams, queryParams);
    }

    private RestResponse<Job> runIndex() throws Exception {

        logger.debug("Executing runIndex in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunIndexCommandOptions commandOptions = analysisVariantCommandOptions.runIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        VariantIndexParams variantIndexParams = new VariantIndexParams()
            .setFile(commandOptions.file)
            .setResume(commandOptions.resume)
            .setOutdir(commandOptions.outdir)
            .setTransform(commandOptions.transform)
            .setGvcf(commandOptions.gvcf)
            .setNormalizationSkip(commandOptions.normalizationSkip)
            .setReferenceGenome(commandOptions.referenceGenome)
            .setFamily(commandOptions.family)
            .setSomatic(commandOptions.somatic)
            .setLoad(commandOptions.load)
            .setLoadSplitData(commandOptions.loadSplitData)
            .setLoadMultiFileData(commandOptions.loadMultiFileData)
            .setLoadSampleIndex(commandOptions.loadSampleIndex)
            .setLoadArchive(commandOptions.loadArchive)
            .setLoadHomRef(commandOptions.loadHomRef)
            .setPostLoadCheck(commandOptions.postLoadCheck)
            .setIncludeGenotypes(commandOptions.includeGenotypes)
            .setIncludeSampleData(commandOptions.includeSampleData)
            .setMerge(commandOptions.merge)
            .setDeduplicationPolicy(commandOptions.deduplicationPolicy)
            .setCalculateStats(commandOptions.calculateStats)
            .setAggregationMappingFile(commandOptions.aggregationMappingFile)
            .setAnnotate(commandOptions.annotate)
            .setAnnotator(commandOptions.annotator)
            .setOverwriteAnnotations(commandOptions.overwriteAnnotations)
            .setIndexSearch(commandOptions.indexSearch)
            .setSkipIndexedFiles(commandOptions.skipIndexedFiles);
        return openCGAClient.getVariantClient().runIndex(variantIndexParams, queryParams);
    }

    private RestResponse<Job> runIndividualQc() throws Exception {

        logger.debug("Executing runIndividualQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunIndividualQcCommandOptions commandOptions = analysisVariantCommandOptions.runIndividualQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        IndividualQcAnalysisParams individualQcAnalysisParams = new IndividualQcAnalysisParams()
            .setIndividual(commandOptions.individual)
            .setSample(commandOptions.sample)
            .setInferredSexMethod(commandOptions.inferredSexMethod)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runIndividualQc(individualQcAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInferredSex() throws Exception {

        logger.debug("Executing runInferredSex in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunInferredSexCommandOptions commandOptions = analysisVariantCommandOptions.runInferredSexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        InferredSexAnalysisParams inferredSexAnalysisParams = new InferredSexAnalysisParams()
            .setIndividual(commandOptions.individual)
            .setSample(commandOptions.sample)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runInferredSex(inferredSexAnalysisParams, queryParams);
    }

    private RestResponse<KnockoutByGene> queryKnockoutGene() throws Exception {

        logger.debug("Executing queryKnockoutGene in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryKnockoutGeneCommandOptions commandOptions = analysisVariantCommandOptions.queryKnockoutGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryKnockoutGene(queryParams);
    }

    private RestResponse<KnockoutByIndividual> queryKnockoutIndividual() throws Exception {

        logger.debug("Executing queryKnockoutIndividual in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryKnockoutIndividualCommandOptions commandOptions = analysisVariantCommandOptions.queryKnockoutIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryKnockoutIndividual(queryParams);
    }

    private RestResponse<Job> runKnockout() throws Exception {

        logger.debug("Executing runKnockout in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunKnockoutCommandOptions commandOptions = analysisVariantCommandOptions.runKnockoutCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        KnockoutAnalysisParams knockoutAnalysisParams = new KnockoutAnalysisParams()
            .setSample(CommandLineUtils.getListValues(commandOptions.sample))
            .setGene(CommandLineUtils.getListValues(commandOptions.gene))
            .setPanel(CommandLineUtils.getListValues(commandOptions.panel))
            .setBiotype(commandOptions.biotype)
            .setConsequenceType(commandOptions.consequenceType)
            .setFilter(commandOptions.filter)
            .setQual(commandOptions.qual)
            .setSkipGenesFile(commandOptions.skipGenesFile)
            .setOutdir(commandOptions.outdir)
            .setIndex(commandOptions.index);
        return openCGAClient.getVariantClient().runKnockout(knockoutAnalysisParams, queryParams);
    }

    private RestResponse<Job> runMendelianError() throws Exception {

        logger.debug("Executing runMendelianError in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunMendelianErrorCommandOptions commandOptions = analysisVariantCommandOptions.runMendelianErrorCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        MendelianErrorAnalysisParams mendelianErrorAnalysisParams = new MendelianErrorAnalysisParams()
            .setFamily(commandOptions.family)
            .setIndividual(commandOptions.individual)
            .setSample(commandOptions.sample)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runMendelianError(mendelianErrorAnalysisParams, queryParams);
    }

    private RestResponse<VariantMetadata> metadata() throws Exception {

        logger.debug("Executing metadata in Analysis - Variant command line");

        AnalysisVariantCommandOptions.MetadataCommandOptions commandOptions = analysisVariantCommandOptions.metadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().metadata(queryParams);
    }

    private RestResponse<Signature> queryMutationalSignature() throws Exception {

        logger.debug("Executing queryMutationalSignature in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryMutationalSignatureCommandOptions commandOptions = analysisVariantCommandOptions.queryMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotNull("fitting", commandOptions.fitting);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryMutationalSignature(queryParams);
    }

    private RestResponse<Job> runMutationalSignature() throws Exception {

        logger.debug("Executing runMutationalSignature in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunMutationalSignatureCommandOptions commandOptions = analysisVariantCommandOptions.runMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        MutationalSignatureAnalysisParams mutationalSignatureAnalysisParams = new MutationalSignatureAnalysisParams()
            .setSample(commandOptions.sample)
            .setId(commandOptions.id)
            .setDescription(commandOptions.description)
            .setRelease(commandOptions.release)
            .setFitting(commandOptions.fitting)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runMutationalSignature(mutationalSignatureAnalysisParams, queryParams);
    }

    private RestResponse<Job> runPlink() throws Exception {

        logger.debug("Executing runPlink in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunPlinkCommandOptions commandOptions = analysisVariantCommandOptions.runPlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        PlinkWrapperParams plinkWrapperParams = new PlinkWrapperParams()
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runPlink(plinkWrapperParams, queryParams);
    }

    private RestResponse<Variant> query() throws Exception {

        logger.debug("Executing query in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryCommandOptions commandOptions = analysisVariantCommandOptions.queryCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("sort", commandOptions.sort);
        queryParams.putIfNotNull("summary", commandOptions.summary);
        queryParams.putIfNotNull("approximateCount", commandOptions.approximateCount);
        queryParams.putIfNotNull("approximateCountSamplingSize", commandOptions.approximateCountSamplingSize);
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("reference", commandOptions.reference);
        queryParams.putIfNotEmpty("alternate", commandOptions.alternate);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotNull("sampleMetadata", commandOptions.sampleMetadata);
        queryParams.putIfNotEmpty("unknownGenotype", commandOptions.unknownGenotype);
        queryParams.putIfNotNull("sampleLimit", commandOptions.sampleLimit);
        queryParams.putIfNotNull("sampleSkip", commandOptions.sampleSkip);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("includeSampleData", commandOptions.includeSampleData);
        queryParams.putIfNotEmpty("includeGenotype", commandOptions.includeGenotype);
        queryParams.putIfNotEmpty("includeSampleId", commandOptions.includeSampleId);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().query(queryParams);
    }

    private RestResponse<Job> runRelatedness() throws Exception {

        logger.debug("Executing runRelatedness in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunRelatednessCommandOptions commandOptions = analysisVariantCommandOptions.runRelatednessCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        RelatednessAnalysisParams relatednessAnalysisParams = new RelatednessAnalysisParams()
            .setIndividuals(CommandLineUtils.getListValues(commandOptions.individuals))
            .setSamples(CommandLineUtils.getListValues(commandOptions.samples))
            .setMinorAlleleFreq(commandOptions.minorAlleleFreq)
            .setMethod(commandOptions.method)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runRelatedness(relatednessAnalysisParams, queryParams);
    }

    private RestResponse<Job> runRvtests() throws Exception {

        logger.debug("Executing runRvtests in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunRvtestsCommandOptions commandOptions = analysisVariantCommandOptions.runRvtestsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        RvtestsWrapperParams rvtestsWrapperParams = new RvtestsWrapperParams()
            .setCommand(commandOptions.command)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runRvtests(rvtestsWrapperParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStatsSample() throws Exception {

        logger.debug("Executing aggregationStatsSample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.AggregationStatsSampleCommandOptions commandOptions = analysisVariantCommandOptions.aggregationStatsSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().aggregationStatsSample(queryParams);
    }

    private RestResponse<Job> runSampleEligibility() throws Exception {

        logger.debug("Executing runSampleEligibility in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleEligibilityCommandOptions commandOptions = analysisVariantCommandOptions.runSampleEligibilityCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        SampleEligibilityAnalysisParams sampleEligibilityAnalysisParams = new SampleEligibilityAnalysisParams()
            .setQuery(commandOptions.query)
            .setIndex(commandOptions.index)
            .setCohortId(commandOptions.cohortId);
        return openCGAClient.getVariantClient().runSampleEligibility(sampleEligibilityAnalysisParams, queryParams);
    }

    private RestResponse<Job> runSampleQc() throws Exception {

        logger.debug("Executing runSampleQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleQcCommandOptions commandOptions = analysisVariantCommandOptions.runSampleQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        AnnotationVariantQueryParams annotationVariantQueryParams= new AnnotationVariantQueryParams();
        invokeSetter(annotationVariantQueryParams, "id", commandOptions.variantStatsQueryId);
        invokeSetter(annotationVariantQueryParams, "region", commandOptions.variantStatsQueryRegion);
        invokeSetter(annotationVariantQueryParams, "gene", commandOptions.variantStatsQueryGene);
        invokeSetter(annotationVariantQueryParams, "type", commandOptions.variantStatsQueryType);
        invokeSetter(annotationVariantQueryParams, "panel", commandOptions.variantStatsQueryPanel);
        invokeSetter(annotationVariantQueryParams, "panelModeOfInheritance", commandOptions.variantStatsQueryPanelModeOfInheritance);
        invokeSetter(annotationVariantQueryParams, "panelConfidence", commandOptions.variantStatsQueryPanelConfidence);
        invokeSetter(annotationVariantQueryParams, "panelRoleInCancer", commandOptions.variantStatsQueryPanelRoleInCancer);
        invokeSetter(annotationVariantQueryParams, "cohortStatsRef", commandOptions.variantStatsQueryCohortStatsRef);
        invokeSetter(annotationVariantQueryParams, "cohortStatsAlt", commandOptions.variantStatsQueryCohortStatsAlt);
        invokeSetter(annotationVariantQueryParams, "cohortStatsMaf", commandOptions.variantStatsQueryCohortStatsMaf);
        invokeSetter(annotationVariantQueryParams, "ct", commandOptions.variantStatsQueryCt);
        invokeSetter(annotationVariantQueryParams, "xref", commandOptions.variantStatsQueryXref);
        invokeSetter(annotationVariantQueryParams, "biotype", commandOptions.variantStatsQueryBiotype);
        invokeSetter(annotationVariantQueryParams, "proteinSubstitution", commandOptions.variantStatsQueryProteinSubstitution);
        invokeSetter(annotationVariantQueryParams, "conservation", commandOptions.variantStatsQueryConservation);
        invokeSetter(annotationVariantQueryParams, "populationFrequencyMaf", commandOptions.variantStatsQueryPopulationFrequencyMaf);
        invokeSetter(annotationVariantQueryParams, "populationFrequencyAlt", commandOptions.variantStatsQueryPopulationFrequencyAlt);
        invokeSetter(annotationVariantQueryParams, "populationFrequencyRef", commandOptions.variantStatsQueryPopulationFrequencyRef);
        invokeSetter(annotationVariantQueryParams, "transcriptFlag", commandOptions.variantStatsQueryTranscriptFlag);
        invokeSetter(annotationVariantQueryParams, "functionalScore", commandOptions.variantStatsQueryFunctionalScore);
        invokeSetter(annotationVariantQueryParams, "clinical", commandOptions.variantStatsQueryClinical);
        invokeSetter(annotationVariantQueryParams, "clinicalSignificance", commandOptions.variantStatsQueryClinicalSignificance);
        invokeSetter(annotationVariantQueryParams, "clinicalConfirmedStatus", commandOptions.variantStatsQueryClinicalConfirmedStatus);

        SampleQcAnalysisParams sampleQcAnalysisParams = new SampleQcAnalysisParams()
            .setSample(commandOptions.sample)
            .setVariantStatsId(commandOptions.variantStatsId)
            .setVariantStatsDescription(commandOptions.variantStatsDescription)
            .setVariantStatsQuery(annotationVariantQueryParams)
            .setSignatureId(commandOptions.signatureId)
            .setSignatureDescription(commandOptions.signatureDescription)
            .setSignatureRelease(commandOptions.signatureRelease)
            .setGenomePlotId(commandOptions.genomePlotId)
            .setGenomePlotDescription(commandOptions.genomePlotDescription)
            .setGenomePlotConfigFile(commandOptions.genomePlotConfigFile)
            .setOutdir(commandOptions.outdir);
        return openCGAClient.getVariantClient().runSampleQc(sampleQcAnalysisParams, queryParams);
    }

    private RestResponse<Variant> querySample() throws Exception {

        logger.debug("Executing querySample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QuerySampleCommandOptions commandOptions = analysisVariantCommandOptions.querySampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("variant", commandOptions.variant);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().querySample(queryParams);
    }

    private RestResponse<Job> runSample() throws Exception {

        logger.debug("Executing runSample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleCommandOptions commandOptions = analysisVariantCommandOptions.runSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        SampleVariantFilterParams sampleVariantFilterParams = new SampleVariantFilterParams()
            .setGenotypes(CommandLineUtils.getListValues(commandOptions.genotypes))
            .setSample(CommandLineUtils.getListValues(commandOptions.sample))
            .setSamplesInAllVariants(commandOptions.samplesInAllVariants)
            .setMaxVariants(commandOptions.maxVariants);
        return openCGAClient.getVariantClient().runSample(sampleVariantFilterParams, queryParams);
    }

    private RestResponse<SampleVariantStats> querySampleStats() throws Exception {

        logger.debug("Executing querySampleStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QuerySampleStatsCommandOptions commandOptions = analysisVariantCommandOptions.querySampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("filterTranscript", commandOptions.filterTranscript);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().querySampleStats(commandOptions.sample, queryParams);
    }

    private RestResponse<Job> runSampleStats() throws Exception {

        logger.debug("Executing runSampleStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleStatsCommandOptions commandOptions = analysisVariantCommandOptions.runSampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        SampleVariantStatsAnalysisParams sampleVariantStatsAnalysisParams = new SampleVariantStatsAnalysisParams()
            .setSample(CommandLineUtils.getListValues(commandOptions.sample))
            .setIndividual(CommandLineUtils.getListValues(commandOptions.individual))
            .setOutdir(commandOptions.outdir)
            .setIndex(commandOptions.index)
            .setIndexOverwrite(commandOptions.indexOverwrite)
            .setIndexId(commandOptions.indexId)
            .setIndexDescription(commandOptions.indexDescription)
            .setBatchSize(commandOptions.batchSize);
        return openCGAClient.getVariantClient().runSampleStats(sampleVariantStatsAnalysisParams, queryParams);
    }

    private RestResponse<Job> runStatsExport() throws Exception {

        logger.debug("Executing runStatsExport in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunStatsExportCommandOptions commandOptions = analysisVariantCommandOptions.runStatsExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        VariantStatsExportParams variantStatsExportParams = new VariantStatsExportParams()
            .setCohorts(CommandLineUtils.getListValues(commandOptions.cohorts))
            .setOutput(commandOptions.output)
            .setRegion(commandOptions.region)
            .setGene(commandOptions.gene)
            .setOutputFormat(commandOptions.outputFormat);
        return openCGAClient.getVariantClient().runStatsExport(variantStatsExportParams, queryParams);
    }

    private RestResponse<Job> runStats() throws Exception {

        logger.debug("Executing runStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunStatsCommandOptions commandOptions = analysisVariantCommandOptions.runStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", CliSession.getInstance().getCurrentStudy());
        }


        VariantStatsAnalysisParams variantStatsAnalysisParams = new VariantStatsAnalysisParams()
            .setCohort(CommandLineUtils.getListValues(commandOptions.cohort))
            .setSamples(CommandLineUtils.getListValues(commandOptions.samples))
            .setRegion(commandOptions.region)
            .setGene(commandOptions.gene)
            .setOutdir(commandOptions.outdir)
            .setOutputFileName(commandOptions.outputFileName)
            .setAggregationMappingFile(commandOptions.aggregationMappingFile);
        return openCGAClient.getVariantClient().runStats(variantStatsAnalysisParams, queryParams);
    }
}