/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import java.util.Map;
import com.beust.jcommander.Parameters;
import static org.opencb.opencga.app.cli.GeneralCliOptions.*;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.ParametersDelegate;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-27 13:07:31
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the User command line.
 *    Command line version: 2.1.0
 *    PATH: users
 */
@Parameters(commandNames = {"users"}, commandDescription = "User commands")
public class UserCommandOptions {

        public JCommander jCommander;
        public CommonCommandOptions commonCommandOptions;

        public CreateCommandOptions createCommandOptions;
        public LoginCommandOptions loginCommandOptions;
        public PasswordCommandOptions passwordCommandOptions;
        public InfoCommandOptions infoCommandOptions;
        public ConfigsCommandOptions configsCommandOptions;
        public UpdateConfigsCommandOptions updateConfigsCommandOptions;
        public FiltersCommandOptions filtersCommandOptions;
        public UpdateFiltersCommandOptions updateFiltersCommandOptions;
        public UpdateFilterCommandOptions updateFilterCommandOptions;
        public ProjectsCommandOptions projectsCommandOptions;
        public UpdateCommandOptions updateCommandOptions;


    public UserCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        this.jCommander = jCommander;
        this.commonCommandOptions = commonCommandOptions;
        this.createCommandOptions = new CreateCommandOptions();
        this.loginCommandOptions = new LoginCommandOptions();
        this.passwordCommandOptions = new PasswordCommandOptions();
        this.infoCommandOptions = new InfoCommandOptions();
        this.configsCommandOptions = new ConfigsCommandOptions();
        this.updateConfigsCommandOptions = new UpdateConfigsCommandOptions();
        this.filtersCommandOptions = new FiltersCommandOptions();
        this.updateFiltersCommandOptions = new UpdateFiltersCommandOptions();
        this.updateFilterCommandOptions = new UpdateFilterCommandOptions();
        this.projectsCommandOptions = new ProjectsCommandOptions();
        this.updateCommandOptions = new UpdateCommandOptions();
    
    }
    
    
    @Parameters(commandNames = {"create"}, commandDescription = "Create a new user.")
    public class CreateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--name"}, description = "The body web service name parameter", required = false, arity = 1)
        public String name; 
    
        @Parameter(names = {"--email"}, description = "The body web service email parameter", required = false, arity = 1)
        public String email; 
    
        @Parameter(names = {"--password"}, description = "The body web service password parameter", required = false, arity = 1)
        public String password; 
    
        @Parameter(names = {"--organization"}, description = "The body web service organization parameter", required = false, arity = 1)
        public String organization; 
    
  }
  
  
    @Parameters(commandNames = {"login"}, commandDescription = "Get identified and gain access to the system.")
    public class LoginCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user"}, description = "The body web service user parameter", required = false, arity = 1)
        public String user; 
    
        @Parameter(names = {"--password"}, description = "The body web service password parameter", required = false, arity = 1)
        public String password; 
    
        @Parameter(names = {"--refresh-token"}, description = "The body web service refreshToken parameter", required = false, arity = 1)
        public String refreshToken; 
    
  }
  
  
    @Parameters(commandNames = {"password"}, commandDescription = "Change the password of a user.")
    public class PasswordCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user"}, description = "The body web service user parameter", required = false, arity = 1)
        public String user; 
    
        @Parameter(names = {"--password"}, description = "The body web service password parameter", required = false, arity = 1)
        public String password; 
    
        @Parameter(names = {"--new-password"}, description = "The body web service newPassword parameter", required = false, arity = 1)
        public String newPassword; 
    
  }
  
  
    @Parameters(commandNames = {"info"}, commandDescription = "Return the user information including its projects and studies.")
    public class InfoCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--users"}, description = "Comma separated list of user IDs", required = true, arity = 1)
        public String users; 
    
  }
  
  
    @Parameters(commandNames = {"configs"}, commandDescription = "Fetch a user configuration.")
    public class ConfigsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--name"}, description = "Unique name (typically the name of the application).", required = false, arity = 1)
        public String name; 
    
  }
  
  
    @Parameters(commandNames = {"update-configs"}, commandDescription = "Add or remove a custom user configuration.")
    public class UpdateConfigsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--action"}, description = "Action to be performed: ADD or REMOVE a group", required = false, arity = 1)
        public String action; 
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--configuration"}, description = "The body web service configuration parameter", required = false, arity = 1)
        public Map configuration; 
    
  }
  
  
    @Parameters(commandNames = {"filters"}, commandDescription = "Fetch user filters.")
    public class FiltersCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--id"}, description = "Filter id. If provided, it will only fetch the specified filter",
                              required = false, arity = 1)
        public String id; 
    
  }
  
  
    @Parameters(commandNames = {"update-filters"}, commandDescription = "Add or remove a custom user filter.")
    public class UpdateFiltersCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--action"}, description = "Action to be performed: ADD or REMOVE a group", required = false, arity = 1)
        public String action; 
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description; 
    
  }
  
  
    @Parameters(commandNames = {"update-filter"}, commandDescription = "Update a custom filter.")
    public class UpdateFilterCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--filter-id"}, description = "Filter id", required = true, arity = 1)
        public String filterId; 
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description; 
    
  }
  
  
    @Parameters(commandNames = {"projects"}, commandDescription = "Retrieve the projects of the user.")
    public class ProjectsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--user"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
  }
  
  
    @Parameters(commandNames = {"update"}, commandDescription = "Update some user attributes.")
    public class UpdateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--user"}, description = "User ID", required = true, arity = 1)
        public String user; 
    
        @Parameter(names = {"--name"}, description = "The body web service name parameter", required = false, arity = 1)
        public String name; 
    
        @Parameter(names = {"--email"}, description = "The body web service email parameter", required = false, arity = 1)
        public String email; 
    
        @Parameter(names = {"--organization"}, description = "The body web service organization parameter", required = false, arity = 1)
        public String organization; 
    
        @Parameter(names = {"--attributes"}, description = "The body web service attributes parameter", required = false, arity = 1)
        public Map attributes; 
    
  }
  
  
}
