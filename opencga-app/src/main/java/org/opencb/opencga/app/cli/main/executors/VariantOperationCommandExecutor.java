/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.app.cli.main.options.VariantOperationCommandOptions;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.config.storage.CellBaseConfiguration;
import org.opencb.opencga.core.config.storage.SampleIndexConfiguration;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.operations.variant.JulieParams;
import org.opencb.opencga.core.models.operations.variant.VariantAggregateFamilyParams;
import org.opencb.opencga.core.models.operations.variant.VariantAggregateParams;
import org.opencb.opencga.core.models.operations.variant.VariantAnnotationIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantAnnotationSaveParams;
import org.opencb.opencga.core.models.operations.variant.VariantFamilyIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantSampleIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantScoreIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantSecondaryIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantStorageMetadataRepairToolParams;
import org.opencb.opencga.core.models.variant.VariantFileIndexJobLauncherParams;
import org.opencb.opencga.core.models.variant.VariantStatsIndexParams;
import org.opencb.opencga.core.models.variant.VariantStorageMetadataSynchronizeParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-27 13:07:31
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class VariantOperationCommandExecutor extends OpencgaCommandExecutor {

    private VariantOperationCommandOptions variantoperationCommandOptions;

    public VariantOperationCommandExecutor(VariantOperationCommandOptions variantoperationCommandOptions) {
        super(variantoperationCommandOptions.commonCommandOptions);
        this.variantoperationCommandOptions = variantoperationCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Operations - Variant Storage command line");
        
        String subCommandString = getParsedSubCommand(variantoperationCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "configureCellbase":
                queryResponse = configureCellbase();
                break;
            case "aggregateVariant":
                queryResponse = aggregateVariant();
                break;
            case "deleteVariantAnnotation":
                queryResponse = deleteVariantAnnotation();
                break;
            case "indexVariantAnnotation":
                queryResponse = indexVariantAnnotation();
                break;
            case "saveVariantAnnotation":
                queryResponse = saveVariantAnnotation();
                break;
            case "configureVariant":
                queryResponse = configureVariant();
                break;
            case "aggregateVariantFamily":
                queryResponse = aggregateVariantFamily();
                break;
            case "indexVariantFamily":
                queryResponse = indexVariantFamily();
                break;
            case "launcherVariantIndex":
                queryResponse = launcherVariantIndex();
                break;
            case "runVariantJulie":
                queryResponse = runVariantJulie();
                break;
            case "repairVariantMetadata":
                queryResponse = repairVariantMetadata();
                break;
            case "synchronizeVariantMetadata":
                queryResponse = synchronizeVariantMetadata();
                break;
            case "indexVariantSample":
                queryResponse = indexVariantSample();
                break;
            case "configureSampleIndex":
                queryResponse = configureSampleIndex();
                break;
            case "deleteVariantScore":
                queryResponse = deleteVariantScore();
                break;
            case "indexVariantScore":
                queryResponse = indexVariantScore();
                break;
            case "secondaryIndexVariant":
                queryResponse = secondaryIndexVariant();
                break;
            case "deleteVariantSecondaryIndex":
                queryResponse = deleteVariantSecondaryIndex();
                break;
            case "indexVariantStats":
                queryResponse = indexVariantStats();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<Job> configureCellbase() throws ClientException {
        logger.debug("Executing configureCellbase in VariantOperation command line");

        VariantOperationCommandOptions.ConfigureCellbaseCommandOptions commandOptions = variantoperationCommandOptions.configureCellbaseCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotNull("annotationUpdate", commandOptions.annotationUpdate);
        queryParams.putIfNotEmpty("annotationSaveId", commandOptions.annotationSaveId);

        CellBaseConfiguration cellBaseConfiguration = new CellBaseConfiguration()
                .setUrl(commandOptions.url)
                .setVersion(commandOptions.version);

        return openCGAClient.getVariantOperationClient().configureCellbase(cellBaseConfiguration, queryParams);
    }
    
    private RestResponse<Job> aggregateVariant() throws ClientException {
        logger.debug("Executing aggregateVariant in VariantOperation command line");

        VariantOperationCommandOptions.AggregateVariantCommandOptions commandOptions = variantoperationCommandOptions.aggregateVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        VariantAggregateParams variantAggregateParams = new VariantAggregateParams()
                .setOverwrite(commandOptions.overwrite)
                .setResume(commandOptions.resume);

        return openCGAClient.getVariantOperationClient().aggregateVariant(variantAggregateParams, queryParams);
    }
    
    private RestResponse<Job> deleteVariantAnnotation() throws ClientException {
        logger.debug("Executing deleteVariantAnnotation in VariantOperation command line");

        VariantOperationCommandOptions.DeleteVariantAnnotationCommandOptions commandOptions = variantoperationCommandOptions.deleteVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);

        return openCGAClient.getVariantOperationClient().deleteVariantAnnotation(queryParams);
    }
    
    private RestResponse<Job> indexVariantAnnotation() throws ClientException {
        logger.debug("Executing indexVariantAnnotation in VariantOperation command line");

        VariantOperationCommandOptions.IndexVariantAnnotationCommandOptions commandOptions = variantoperationCommandOptions.indexVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        VariantAnnotationIndexParams variantAnnotationIndexParams = new VariantAnnotationIndexParams()
                .setOutdir(commandOptions.outdir)
                .setOutputFileName(commandOptions.outputFileName)
                .setAnnotator(commandOptions.annotator)
                .setOverwriteAnnotations(commandOptions.overwriteAnnotations)
                .setRegion(commandOptions.region)
                .setCreate(commandOptions.create)
                .setLoad(commandOptions.load)
                .setCustomName(commandOptions.customName);

        return openCGAClient.getVariantOperationClient().indexVariantAnnotation(variantAnnotationIndexParams, queryParams);
    }
    
    private RestResponse<Job> saveVariantAnnotation() throws ClientException {
        logger.debug("Executing saveVariantAnnotation in VariantOperation command line");

        VariantOperationCommandOptions.SaveVariantAnnotationCommandOptions commandOptions = variantoperationCommandOptions.saveVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);

        VariantAnnotationSaveParams variantAnnotationSaveParams = new VariantAnnotationSaveParams()
                .setAnnotationId(commandOptions.annotationId);

        return openCGAClient.getVariantOperationClient().saveVariantAnnotation(variantAnnotationSaveParams, queryParams);
    }
    
    private RestResponse<ObjectMap> configureVariant() throws ClientException {
        logger.debug("Executing configureVariant in VariantOperation command line");

        VariantOperationCommandOptions.ConfigureVariantCommandOptions commandOptions = variantoperationCommandOptions.configureVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        ObjectMap objectMap = new ObjectMap();

        return openCGAClient.getVariantOperationClient().configureVariant(objectMap, queryParams);
    }
    
    private RestResponse<Job> aggregateVariantFamily() throws ClientException {
        logger.debug("Executing aggregateVariantFamily in VariantOperation command line");

        VariantOperationCommandOptions.AggregateVariantFamilyCommandOptions commandOptions = variantoperationCommandOptions.aggregateVariantFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        VariantAggregateFamilyParams variantAggregateFamilyParams = new VariantAggregateFamilyParams()
                .setResume(commandOptions.resume);

        return openCGAClient.getVariantOperationClient().aggregateVariantFamily(variantAggregateFamilyParams, queryParams);
    }
    
    private RestResponse<Job> indexVariantFamily() throws ClientException {
        logger.debug("Executing indexVariantFamily in VariantOperation command line");

        VariantOperationCommandOptions.IndexVariantFamilyCommandOptions commandOptions = variantoperationCommandOptions.indexVariantFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        VariantFamilyIndexParams variantFamilyIndexParams = new VariantFamilyIndexParams()
                .setOverwrite(commandOptions.overwrite)
                .setSkipIncompleteFamilies(commandOptions.skipIncompleteFamilies);

        return openCGAClient.getVariantOperationClient().indexVariantFamily(variantFamilyIndexParams, queryParams);
    }
    
    private RestResponse<Job> launcherVariantIndex() throws ClientException {
        logger.debug("Executing launcherVariantIndex in VariantOperation command line");

        VariantOperationCommandOptions.LauncherVariantIndexCommandOptions commandOptions = variantoperationCommandOptions.launcherVariantIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        VariantFileIndexJobLauncherParams variantFileIndexJobLauncherParams = new VariantFileIndexJobLauncherParams()
                .setName(commandOptions.name)
                .setDirectory(commandOptions.directory)
                .setResumeFailed(commandOptions.resumeFailed)
                .setIgnoreFailed(commandOptions.ignoreFailed)
                .setMaxJobs(commandOptions.maxJobs);

        return openCGAClient.getVariantOperationClient().launcherVariantIndex(variantFileIndexJobLauncherParams, queryParams);
    }
    
    private RestResponse<Job> runVariantJulie() throws ClientException {
        logger.debug("Executing runVariantJulie in VariantOperation command line");

        VariantOperationCommandOptions.RunVariantJulieCommandOptions commandOptions = variantoperationCommandOptions.runVariantJulieCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);

        JulieParams julieParams = new JulieParams()
                .setRegion(commandOptions.region)
                .setOverwrite(commandOptions.overwrite);

        return openCGAClient.getVariantOperationClient().runVariantJulie(julieParams, queryParams);
    }
    
    private RestResponse<Job> repairVariantMetadata() throws ClientException {
        logger.debug("Executing repairVariantMetadata in VariantOperation command line");

        VariantOperationCommandOptions.RepairVariantMetadataCommandOptions commandOptions = variantoperationCommandOptions.repairVariantMetadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        VariantStorageMetadataRepairToolParams variantStorageMetadataRepairToolParams = new VariantStorageMetadataRepairToolParams()
                .setSamplesBatchSize(commandOptions.samplesBatchSize);

        return openCGAClient.getVariantOperationClient().repairVariantMetadata(variantStorageMetadataRepairToolParams, queryParams);
    }
    
    private RestResponse<Job> synchronizeVariantMetadata() throws ClientException {
        logger.debug("Executing synchronizeVariantMetadata in VariantOperation command line");

        VariantOperationCommandOptions.SynchronizeVariantMetadataCommandOptions commandOptions = variantoperationCommandOptions.synchronizeVariantMetadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        VariantStorageMetadataSynchronizeParams variantStorageMetadataSynchronizeParams = new VariantStorageMetadataSynchronizeParams()
                .setStudy(commandOptions.study);

        return openCGAClient.getVariantOperationClient().synchronizeVariantMetadata(variantStorageMetadataSynchronizeParams, queryParams);
    }
    
    private RestResponse<Job> indexVariantSample() throws ClientException {
        logger.debug("Executing indexVariantSample in VariantOperation command line");

        VariantOperationCommandOptions.IndexVariantSampleCommandOptions commandOptions = variantoperationCommandOptions.indexVariantSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        VariantSampleIndexParams variantSampleIndexParams = new VariantSampleIndexParams()
                .setBuildIndex(commandOptions.buildIndex)
                .setAnnotate(commandOptions.annotate)
                .setOverwrite(commandOptions.overwrite);

        return openCGAClient.getVariantOperationClient().indexVariantSample(variantSampleIndexParams, queryParams);
    }
    
    private RestResponse<Job> configureSampleIndex() throws ClientException {
        logger.debug("Executing configureSampleIndex in VariantOperation command line");

        VariantOperationCommandOptions.ConfigureSampleIndexCommandOptions commandOptions = variantoperationCommandOptions.configureSampleIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipRebuild", commandOptions.skipRebuild);

        SampleIndexConfiguration sampleIndexConfiguration = new SampleIndexConfiguration();

        return openCGAClient.getVariantOperationClient().configureSampleIndex(sampleIndexConfiguration, queryParams);
    }
    
    private RestResponse<Job> deleteVariantScore() throws ClientException {
        logger.debug("Executing deleteVariantScore in VariantOperation command line");

        VariantOperationCommandOptions.DeleteVariantScoreCommandOptions commandOptions = variantoperationCommandOptions.deleteVariantScoreCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotNull("resume", commandOptions.resume);
        queryParams.putIfNotNull("force", commandOptions.force);

        return openCGAClient.getVariantOperationClient().deleteVariantScore(queryParams);
    }
    
    private RestResponse<Job> indexVariantScore() throws ClientException {
        logger.debug("Executing indexVariantScore in VariantOperation command line");

        VariantOperationCommandOptions.IndexVariantScoreCommandOptions commandOptions = variantoperationCommandOptions.indexVariantScoreCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        VariantScoreIndexParams variantScoreIndexParams = new VariantScoreIndexParams()
                .setScoreName(commandOptions.scoreName)
                .setCohort1(commandOptions.cohort1)
                .setCohort2(commandOptions.cohort2)
                .setInput(commandOptions.input)
                .setInputColumns(commandOptions.inputColumns)
                .setResume(commandOptions.resume);

        return openCGAClient.getVariantOperationClient().indexVariantScore(variantScoreIndexParams, queryParams);
    }
    
    private RestResponse<Job> secondaryIndexVariant() throws ClientException {
        logger.debug("Executing secondaryIndexVariant in VariantOperation command line");

        VariantOperationCommandOptions.SecondaryIndexVariantCommandOptions commandOptions = variantoperationCommandOptions.secondaryIndexVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        VariantSecondaryIndexParams variantSecondaryIndexParams = new VariantSecondaryIndexParams()
                .setRegion(commandOptions.region)
                .setOverwrite(commandOptions.overwrite);

        return openCGAClient.getVariantOperationClient().secondaryIndexVariant(variantSecondaryIndexParams, queryParams);
    }
    
    private RestResponse<Job> deleteVariantSecondaryIndex() throws ClientException {
        logger.debug("Executing deleteVariantSecondaryIndex in VariantOperation command line");

        VariantOperationCommandOptions.DeleteVariantSecondaryIndexCommandOptions commandOptions = variantoperationCommandOptions.deleteVariantSecondaryIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("samples", commandOptions.samples);

        return openCGAClient.getVariantOperationClient().deleteVariantSecondaryIndex(queryParams);
    }
    
    private RestResponse<Job> indexVariantStats() throws ClientException {
        logger.debug("Executing indexVariantStats in VariantOperation command line");

        VariantOperationCommandOptions.IndexVariantStatsCommandOptions commandOptions = variantoperationCommandOptions.indexVariantStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        VariantStatsIndexParams variantStatsIndexParams = new VariantStatsIndexParams()
                .setRegion(commandOptions.region)
                .setOverwriteStats(commandOptions.overwriteStats)
                .setResume(commandOptions.resume)
                .setAggregationMappingFile(commandOptions.aggregationMappingFile);

        return openCGAClient.getVariantOperationClient().indexVariantStats(variantStatsIndexParams, queryParams);
    }
    
}
