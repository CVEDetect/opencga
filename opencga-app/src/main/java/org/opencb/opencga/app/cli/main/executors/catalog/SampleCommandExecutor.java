/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors.catalog;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.app.cli.main.options.SampleCommandOptions;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.catalog.utils.ParamUtils.CompleteUpdateAction;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.common.TsvAnnotationParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.sample.Sample;
import org.opencb.opencga.core.models.sample.SampleAclUpdateParams;
import org.opencb.opencga.core.models.sample.SampleCreateParams;
import org.opencb.opencga.core.models.sample.SampleUpdateParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-05 17:10:13
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class SampleCommandExecutor extends OpencgaCommandExecutor {

    private SampleCommandOptions sampleCommandOptions;

    public SampleCommandExecutor(SampleCommandOptions sampleCommandOptions) {
        super(sampleCommandOptions.commonCommandOptions);
        this.sampleCommandOptions = sampleCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Samples command line");
        
        String subCommandString = getParsedSubCommand(sampleCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "updateAcl":
                queryResponse = updateAcl();
                break;
            case "aggregationStats":
                queryResponse = aggregationStats();
                break;
            case "loadAnnotationSets":
                queryResponse = loadAnnotationSets();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "load":
                queryResponse = load();
                break;
            case "search":
                queryResponse = search();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "update":
                queryResponse = update();
                break;
            case "updateAnnotations":
                queryResponse = updateAnnotations();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<ObjectMap> updateAcl() throws ClientException {
        logger.debug("Executing updateAcl in Sample command line");

        SampleCommandOptions.UpdateAclCommandOptions commandOptions = sampleCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        SampleAclUpdateParams sampleAclUpdateParams = new SampleAclUpdateParams()
                .setSample(commandOptions.sample)
                .setIndividual(commandOptions.individual)
                .setFamily(commandOptions.family)
                .setFile(commandOptions.file)
                .setCohort(commandOptions.cohort);

        return openCGAClient.getSampleClient().updateAcl(commandOptions.members,commandOptions.action.name(), sampleAclUpdateParams, queryParams);
    }
    
    private RestResponse<FacetField> aggregationStats() throws ClientException {
        logger.debug("Executing aggregationStats in Sample command line");

        SampleCommandOptions.AggregationStatsCommandOptions commandOptions = sampleCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("source", commandOptions.source);
        queryParams.putIfNotEmpty("creationYear", commandOptions.creationYear);
        queryParams.putIfNotEmpty("creationMonth", commandOptions.creationMonth);
        queryParams.putIfNotEmpty("creationDay", commandOptions.creationDay);
        queryParams.putIfNotEmpty("creationDayOfWeek", commandOptions.creationDayOfWeek);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("somatic", commandOptions.somatic);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotNull("defaultParam", commandOptions.defaultParam);
        queryParams.putIfNotEmpty("field", commandOptions.field);

        return openCGAClient.getSampleClient().aggregationStats(queryParams);
    }
    
    private RestResponse<Job> loadAnnotationSets() throws ClientException {
        logger.debug("Executing loadAnnotationSets in Sample command line");

        SampleCommandOptions.LoadAnnotationSetsCommandOptions commandOptions = sampleCommandOptions.loadAnnotationSetsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("parents", commandOptions.parents);
        queryParams.putIfNotEmpty("annotationSetId", commandOptions.annotationSetId);

        TsvAnnotationParams tsvAnnotationParams = new TsvAnnotationParams()
                .setContent(commandOptions.content);

        return openCGAClient.getSampleClient().loadAnnotationSets(commandOptions.variableSetId.name(),commandOptions.path.name(), tsvAnnotationParams, queryParams);
    }
    
    private RestResponse<Sample> create() throws ClientException {
        logger.debug("Executing create in Sample command line");

        SampleCommandOptions.CreateCommandOptions commandOptions = sampleCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        SampleCreateParams sampleCreateParams = new SampleCreateParams()
                .setId(commandOptions.id)
                .setDescription(commandOptions.description)
                .setIndividualId(commandOptions.individualId);

        return openCGAClient.getSampleClient().create(sampleCreateParams, queryParams);
    }
    
    private RestResponse<Sample> distinct() throws ClientException {
        logger.debug("Executing distinct in Sample command line");

        SampleCommandOptions.DistinctCommandOptions commandOptions = sampleCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotNull("somatic", commandOptions.somatic);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("fileIds", commandOptions.fileIds);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);

        return openCGAClient.getSampleClient().distinct(commandOptions.field.name(), queryParams);
    }
    
    private RestResponse<Sample> load() throws ClientException {
        logger.debug("Executing load in Sample command line");

        SampleCommandOptions.LoadCommandOptions commandOptions = sampleCommandOptions.loadCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("variableSet", commandOptions.variableSet);

        return openCGAClient.getSampleClient().load(commandOptions.file.name(), queryParams);
    }
    
    private RestResponse<Sample> search() throws ClientException {
        logger.debug("Executing search in Sample command line");

        SampleCommandOptions.SearchCommandOptions commandOptions = sampleCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotNull("somatic", commandOptions.somatic);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("fileIds", commandOptions.fileIds);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("statsId", commandOptions.statsId);
        queryParams.putIfNotEmpty("statsVariantcount", commandOptions.statsVariantcount);
        queryParams.putIfNotEmpty("statsChromosomecount", commandOptions.statsChromosomecount);
        queryParams.putIfNotEmpty("statsTypecount", commandOptions.statsTypecount);
        queryParams.putIfNotEmpty("statsGenotypecount", commandOptions.statsGenotypecount);
        queryParams.putIfNotEmpty("statsTitvratio", commandOptions.statsTitvratio);
        queryParams.putIfNotEmpty("statsQualityavg", commandOptions.statsQualityavg);
        queryParams.putIfNotEmpty("statsQualitystddev", commandOptions.statsQualitystddev);
        queryParams.putIfNotEmpty("statsHeterozygosityrate", commandOptions.statsHeterozygosityrate);
        queryParams.putIfNotEmpty("statsDepthcount", commandOptions.statsDepthcount);
        queryParams.putIfNotEmpty("statsBiotypecount", commandOptions.statsBiotypecount);
        queryParams.putIfNotEmpty("statsClinicalsignificancecount", commandOptions.statsClinicalsignificancecount);
        queryParams.putIfNotEmpty("statsConsequencetypecount", commandOptions.statsConsequencetypecount);

        return openCGAClient.getSampleClient().search(queryParams);
    }
    
    private RestResponse<ObjectMap> acl() throws ClientException {
        logger.debug("Executing acl in Sample command line");

        SampleCommandOptions.AclCommandOptions commandOptions = sampleCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getSampleClient().acl(commandOptions.samples, queryParams);
    }
    
    private RestResponse<Sample> delete() throws ClientException {
        logger.debug("Executing delete in Sample command line");

        SampleCommandOptions.DeleteCommandOptions commandOptions = sampleCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("force", commandOptions.force);
        queryParams.putIfNotEmpty("emptyFilesAction", commandOptions.emptyFilesAction);
        queryParams.putIfNotNull("deleteEmptyCohorts", commandOptions.deleteEmptyCohorts);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getSampleClient().delete(commandOptions.samples, queryParams);
    }
    
    private RestResponse<Sample> info() throws ClientException {
        logger.debug("Executing info in Sample command line");

        SampleCommandOptions.InfoCommandOptions commandOptions = sampleCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);

        return openCGAClient.getSampleClient().info(commandOptions.samples, queryParams);
    }
    
    private RestResponse<Sample> update() throws ClientException {
        logger.debug("Executing update in Sample command line");

        SampleCommandOptions.UpdateCommandOptions commandOptions = sampleCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("incVersion", commandOptions.incVersion);

        SampleUpdateParams sampleUpdateParams = new SampleUpdateParams()
                .setId(commandOptions.id)
                .setDescription(commandOptions.description)
                .setIndividualId(commandOptions.individualId);

        return openCGAClient.getSampleClient().update(commandOptions.samples, sampleUpdateParams, queryParams);
    }
    
    private RestResponse<Sample> updateAnnotations() throws ClientException {
        logger.debug("Executing updateAnnotations in Sample command line");

        SampleCommandOptions.UpdateAnnotationsCommandOptions commandOptions = sampleCommandOptions.updateAnnotationsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("incVersion", commandOptions.incVersion);

        return openCGAClient.getSampleClient().updateAnnotations(commandOptions.sample,commandOptions.annotationSet, queryParams);
    }
    
}
