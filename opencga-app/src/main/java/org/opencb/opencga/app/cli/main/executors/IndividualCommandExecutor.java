/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.core.response.RestResponse;
import java.lang.Object;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.app.cli.main.options.IndividualCommandOptions;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.catalog.utils.ParamUtils.CompleteUpdateAction;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.common.TsvAnnotationParams;
import org.opencb.opencga.core.models.individual.Individual;
import org.opencb.opencga.core.models.individual.IndividualAclUpdateParams;
import org.opencb.opencga.core.models.individual.IndividualCreateParams;
import org.opencb.opencga.core.models.individual.IndividualUpdateParams;
import org.opencb.opencga.core.models.job.Job;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-27 13:07:31
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class IndividualCommandExecutor extends OpencgaCommandExecutor {

    private IndividualCommandOptions individualCommandOptions;

    public IndividualCommandExecutor(IndividualCommandOptions individualCommandOptions) {
        super(individualCommandOptions.commonCommandOptions);
        this.individualCommandOptions = individualCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Individuals command line");
        
        String subCommandString = getParsedSubCommand(individualCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "updateAcl":
                queryResponse = updateAcl();
                break;
            case "aggregationStats":
                queryResponse = aggregationStats();
                break;
            case "loadAnnotationSets":
                queryResponse = loadAnnotationSets();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "search":
                queryResponse = search();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "update":
                queryResponse = update();
                break;
            case "updateAnnotations":
                queryResponse = updateAnnotations();
                break;
            case "relatives":
                queryResponse = relatives();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<ObjectMap> updateAcl() throws ClientException {
        logger.debug("Executing updateAcl in Individual command line");

        IndividualCommandOptions.UpdateAclCommandOptions commandOptions = individualCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("propagate", commandOptions.propagate);

        IndividualAclUpdateParams individualAclUpdateParams = new IndividualAclUpdateParams()
                .setIndividual(commandOptions.individual)
                .setSample(commandOptions.sample);

        return openCGAClient.getIndividualClient().updateAcl(commandOptions.members,commandOptions.action, individualAclUpdateParams, queryParams);
    }
    
    private RestResponse<FacetField> aggregationStats() throws ClientException {
        logger.debug("Executing aggregationStats in Individual command line");

        IndividualCommandOptions.AggregationStatsCommandOptions commandOptions = individualCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("hasFather", commandOptions.hasFather);
        queryParams.putIfNotNull("hasMother", commandOptions.hasMother);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("karyotypicSex", commandOptions.karyotypicSex);
        queryParams.putIfNotEmpty("ethnicity", commandOptions.ethnicity);
        queryParams.putIfNotEmpty("population", commandOptions.population);
        queryParams.putIfNotEmpty("creationYear", commandOptions.creationYear);
        queryParams.putIfNotEmpty("creationMonth", commandOptions.creationMonth);
        queryParams.putIfNotEmpty("creationDay", commandOptions.creationDay);
        queryParams.putIfNotEmpty("creationDayOfWeek", commandOptions.creationDayOfWeek);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("lifeStatus", commandOptions.lifeStatus);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("numSamples", commandOptions.numSamples);
        queryParams.putIfNotNull("parentalConsanguinity", commandOptions.parentalConsanguinity);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotNull("defaultParam", commandOptions.defaultParam);
        queryParams.putIfNotEmpty("field", commandOptions.field);

        return openCGAClient.getIndividualClient().aggregationStats(queryParams);
    }
    
    private RestResponse<Job> loadAnnotationSets() throws ClientException {
        logger.debug("Executing loadAnnotationSets in Individual command line");

        IndividualCommandOptions.LoadAnnotationSetsCommandOptions commandOptions = individualCommandOptions.loadAnnotationSetsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("parents", commandOptions.parents);
        queryParams.putIfNotEmpty("annotationSetId", commandOptions.annotationSetId);

        TsvAnnotationParams tsvAnnotationParams = new TsvAnnotationParams()
                .setContent(commandOptions.content);

        return openCGAClient.getIndividualClient().loadAnnotationSets(commandOptions.variableSetId,commandOptions.path, tsvAnnotationParams, queryParams);
    }
    
    private RestResponse<Individual> create() throws ClientException {
        logger.debug("Executing create in Individual command line");

        IndividualCommandOptions.CreateCommandOptions commandOptions = individualCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("samples", commandOptions.samples);

        IndividualCreateParams individualCreateParams = new IndividualCreateParams()
                .setId(commandOptions.id)
                .setName(commandOptions.name)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate)
                .setEthnicity(commandOptions.ethnicity)
                .setDateOfBirth(commandOptions.dateOfBirth);

        return openCGAClient.getIndividualClient().create(individualCreateParams, queryParams);
    }
    
    private RestResponse<ObjectMap> distinct() throws ClientException {
        logger.debug("Executing distinct in Individual command line");

        IndividualCommandOptions.DistinctCommandOptions commandOptions = individualCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("father", commandOptions.father);
        queryParams.putIfNotEmpty("mother", commandOptions.mother);
        queryParams.putIfNotEmpty("familyIds", commandOptions.familyIds);
        queryParams.putIfNotEmpty("samples", commandOptions.samples);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("ethnicity", commandOptions.ethnicity);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("populationName", commandOptions.populationName);
        queryParams.putIfNotEmpty("populationSubpopulation", commandOptions.populationSubpopulation);
        queryParams.putIfNotEmpty("populationDescription", commandOptions.populationDescription);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("karyotypicSex", commandOptions.karyotypicSex);
        queryParams.putIfNotEmpty("lifeStatus", commandOptions.lifeStatus);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("annotationsetName", commandOptions.annotationsetName);
        queryParams.putIfNotEmpty("variableSet", commandOptions.variableSet);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);

        return openCGAClient.getIndividualClient().distinct(commandOptions.field, queryParams);
    }
    
    private RestResponse<Individual> search() throws ClientException {
        logger.debug("Executing search in Individual command line");

        IndividualCommandOptions.SearchCommandOptions commandOptions = individualCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("father", commandOptions.father);
        queryParams.putIfNotEmpty("mother", commandOptions.mother);
        queryParams.putIfNotEmpty("familyIds", commandOptions.familyIds);
        queryParams.putIfNotEmpty("samples", commandOptions.samples);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("ethnicity", commandOptions.ethnicity);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("populationName", commandOptions.populationName);
        queryParams.putIfNotEmpty("populationSubpopulation", commandOptions.populationSubpopulation);
        queryParams.putIfNotEmpty("populationDescription", commandOptions.populationDescription);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("karyotypicSex", commandOptions.karyotypicSex);
        queryParams.putIfNotEmpty("lifeStatus", commandOptions.lifeStatus);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("annotationsetName", commandOptions.annotationsetName);
        queryParams.putIfNotEmpty("variableSet", commandOptions.variableSet);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);

        return openCGAClient.getIndividualClient().search(queryParams);
    }
    
    private RestResponse<ObjectMap> acl() throws ClientException {
        logger.debug("Executing acl in Individual command line");

        IndividualCommandOptions.AclCommandOptions commandOptions = individualCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getIndividualClient().acl(commandOptions.individuals, queryParams);
    }
    
    private RestResponse<Individual> delete() throws ClientException {
        logger.debug("Executing delete in Individual command line");

        IndividualCommandOptions.DeleteCommandOptions commandOptions = individualCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("force", commandOptions.force);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getIndividualClient().delete(commandOptions.individuals, queryParams);
    }
    
    private RestResponse<Individual> info() throws ClientException {
        logger.debug("Executing info in Individual command line");

        IndividualCommandOptions.InfoCommandOptions commandOptions = individualCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);

        return openCGAClient.getIndividualClient().info(commandOptions.individuals, queryParams);
    }
    
    private RestResponse<Individual> update() throws ClientException {
        logger.debug("Executing update in Individual command line");

        IndividualCommandOptions.UpdateCommandOptions commandOptions = individualCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("samplesAction", commandOptions.samplesAction);
        queryParams.putIfNotNull("annotationSetsAction", commandOptions.annotationSetsAction);
        queryParams.putIfNotNull("incVersion", commandOptions.incVersion);

        IndividualUpdateParams individualUpdateParams = new IndividualUpdateParams()
                .setId(commandOptions.id)
                .setName(commandOptions.name)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate)
                .setEthnicity(commandOptions.ethnicity)
                .setDateOfBirth(commandOptions.dateOfBirth);

        return openCGAClient.getIndividualClient().update(commandOptions.individuals, individualUpdateParams, queryParams);
    }
    
    private RestResponse<Individual> updateAnnotations() throws ClientException {
        logger.debug("Executing updateAnnotations in Individual command line");

        IndividualCommandOptions.UpdateAnnotationsCommandOptions commandOptions = individualCommandOptions.updateAnnotationsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("action", commandOptions.action);
        queryParams.putIfNotNull("incVersion", commandOptions.incVersion);

        ObjectMap map = new ObjectMap();

        return openCGAClient.getIndividualClient().updateAnnotations(commandOptions.individual,commandOptions.annotationSet, map, queryParams);
    }
    
    private RestResponse<Individual> relatives() throws ClientException {
        logger.debug("Executing relatives in Individual command line");

        IndividualCommandOptions.RelativesCommandOptions commandOptions = individualCommandOptions.relativesCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getIndividualClient().relatives(commandOptions.individual, queryParams);
    }
    
}
