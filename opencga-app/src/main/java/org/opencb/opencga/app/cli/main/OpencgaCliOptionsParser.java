/*
 * Copyright 2015-2021 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opencb.opencga.app.cli.main;

import com.beust.jcommander.JCommander;
import org.opencb.commons.utils.CommandLineUtils;
import org.opencb.opencga.app.cli.CliOptionsParser;
import org.opencb.opencga.app.cli.GeneralCliOptions;
import org.opencb.opencga.app.cli.admin.AdminCliOptionsParser;
import org.opencb.opencga.app.cli.main.options.*;
import org.opencb.opencga.core.common.GitRepositoryState;

import java.util.*;


/*
 * WARNING: AUTOGENERATED CODE
 *
 * This code was generated by a tool.
 * Autogenerated on: 2021-08-05 17:10:13
 *
 * Manual changes to this file may cause unexpected behavior in your application.
 * Manual changes to this file will be overwritten if the code is regenerated.
 */

public class OpencgaCliOptionsParser extends CliOptionsParser {

    private final GeneralCliOptions.CommonCommandOptions commonCommandOptions;
    private final UserCommandOptions userCommandOptions;
    private final ProjectCommandOptions projectCommandOptions;
    private final StudyCommandOptions studyCommandOptions;
    private final FileCommandOptions fileCommandOptions;
    private final JobCommandOptions jobCommandOptions;
    private final SampleCommandOptions sampleCommandOptions;
    private final IndividualCommandOptions individualCommandOptions;
    private final FamilyCommandOptions familyCommandOptions;
    private final CohortCommandOptions cohortCommandOptions;
    private final DiseasePanelCommandOptions diseasePanelCommandOptions;
    private final AlignmentCommandOptions alignmentCommandOptions;
    private final VariantCommandOptions variantCommandOptions;
    private final ClinicalCommandOptions clinicalCommandOptions;
    private final VariantOperationCommandOptions variantOperationCommandOptions;
    private final MetaCommandOptions metaCommandOptions;

    enum OutputFormat {IDS, ID_CSV, NAME_ID_MAP, ID_LIST, RAW, PRETTY_JSON, PLAIN_JSON}

    public OpencgaCliOptionsParser() {

        jCommander.setExpandAtSign(false);
        commonCommandOptions = new GeneralCliOptions.CommonCommandOptions();

        userCommandOptions = new UserCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("users", userCommandOptions);
        JCommander userSubCommands = jCommander.getCommands().get("users");
        userSubCommands.addCommand("create", userCommandOptions.CreateCommandOptions);
        userSubCommands.addCommand("login", userCommandOptions.LoginCommandOptions);
        userSubCommands.addCommand("password", userCommandOptions.PasswordCommandOptions);
        userSubCommands.addCommand("info", userCommandOptions.InfoCommandOptions);
        userSubCommands.addCommand("configs", userCommandOptions.ConfigsCommandOptions);
        userSubCommands.addCommand("update-configs", userCommandOptions.UpdateConfigsCommandOptions);
        userSubCommands.addCommand("filters", userCommandOptions.FiltersCommandOptions);
        userSubCommands.addCommand("update-filters", userCommandOptions.UpdateFiltersCommandOptions);
        userSubCommands.addCommand("update-filter", userCommandOptions.UpdateFilterCommandOptions);
        userSubCommands.addCommand("projects", userCommandOptions.ProjectsCommandOptions);
        userSubCommands.addCommand("update", userCommandOptions.UpdateCommandOptions);

        projectCommandOptions = new ProjectCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("projects", projectCommandOptions);
        JCommander projectSubCommands = jCommander.getCommands().get("projects");
        projectSubCommands.addCommand("create", projectCommandOptions.CreateCommandOptions);
        projectSubCommands.addCommand("search", projectCommandOptions.SearchCommandOptions);
        projectSubCommands.addCommand("aggregation-stats", projectCommandOptions.AggregationStatsCommandOptions);
        projectSubCommands.addCommand("info", projectCommandOptions.InfoCommandOptions);
        projectSubCommands.addCommand("inc-release", projectCommandOptions.IncReleaseCommandOptions);
        projectSubCommands.addCommand("studies", projectCommandOptions.StudiesCommandOptions);
        projectSubCommands.addCommand("update", projectCommandOptions.UpdateCommandOptions);

        studyCommandOptions = new StudyCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("studies", studyCommandOptions);
        JCommander studySubCommands = jCommander.getCommands().get("studies");
        studySubCommands.addCommand("update-acl", studyCommandOptions.UpdateAclCommandOptions);
        studySubCommands.addCommand("create", studyCommandOptions.CreateCommandOptions);
        studySubCommands.addCommand("search", studyCommandOptions.SearchCommandOptions);
        studySubCommands.addCommand("acl", studyCommandOptions.AclCommandOptions);
        studySubCommands.addCommand("aggregation-stats", studyCommandOptions.AggregationStatsCommandOptions);
        studySubCommands.addCommand("info", studyCommandOptions.InfoCommandOptions);
        studySubCommands.addCommand("search-audit", studyCommandOptions.SearchAuditCommandOptions);
        studySubCommands.addCommand("groups", studyCommandOptions.GroupsCommandOptions);
        studySubCommands.addCommand("update-groups", studyCommandOptions.UpdateGroupsCommandOptions);
        studySubCommands.addCommand("update-users", studyCommandOptions.UpdateUsersCommandOptions);
        studySubCommands.addCommand("permission-rules", studyCommandOptions.PermissionRulesCommandOptions);
        studySubCommands.addCommand("update-permission-rules", studyCommandOptions.UpdatePermissionRulesCommandOptions);
        studySubCommands.addCommand("update", studyCommandOptions.UpdateCommandOptions);
        studySubCommands.addCommand("variable-sets", studyCommandOptions.VariableSetsCommandOptions);
        studySubCommands.addCommand("update-variable-sets", studyCommandOptions.UpdateVariableSetsCommandOptions);
        studySubCommands.addCommand("update-variables", studyCommandOptions.UpdateVariablesCommandOptions);

        fileCommandOptions = new FileCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("files", fileCommandOptions);
        JCommander fileSubCommands = jCommander.getCommands().get("files");
        fileSubCommands.addCommand("update-acl", fileCommandOptions.UpdateAclCommandOptions);
        fileSubCommands.addCommand("aggregation-stats", fileCommandOptions.AggregationStatsCommandOptions);
        fileSubCommands.addCommand("load-annotation-sets", fileCommandOptions.LoadAnnotationSetsCommandOptions);
        fileSubCommands.addCommand("bioformats", fileCommandOptions.BioformatsCommandOptions);
        fileSubCommands.addCommand("create", fileCommandOptions.CreateCommandOptions);
        fileSubCommands.addCommand("distinct", fileCommandOptions.DistinctCommandOptions);
        fileSubCommands.addCommand("fetch", fileCommandOptions.FetchCommandOptions);
        fileSubCommands.addCommand("formats", fileCommandOptions.FormatsCommandOptions);
        fileSubCommands.addCommand("link", fileCommandOptions.LinkCommandOptions);
        fileSubCommands.addCommand("run-link", fileCommandOptions.RunLinkCommandOptions);
        fileSubCommands.addCommand("run-postlink", fileCommandOptions.RunPostlinkCommandOptions);
        fileSubCommands.addCommand("search", fileCommandOptions.SearchCommandOptions);
        fileSubCommands.addCommand("upload", fileCommandOptions.UploadCommandOptions);
        fileSubCommands.addCommand("acl", fileCommandOptions.AclCommandOptions);
        fileSubCommands.addCommand("delete", fileCommandOptions.DeleteCommandOptions);
        fileSubCommands.addCommand("info", fileCommandOptions.InfoCommandOptions);
        fileSubCommands.addCommand("unlink", fileCommandOptions.UnlinkCommandOptions);
        fileSubCommands.addCommand("update", fileCommandOptions.UpdateCommandOptions);
        fileSubCommands.addCommand("update-annotations", fileCommandOptions.UpdateAnnotationsCommandOptions);
        fileSubCommands.addCommand("download", fileCommandOptions.DownloadCommandOptions);
        fileSubCommands.addCommand("grep", fileCommandOptions.GrepCommandOptions);
        fileSubCommands.addCommand("head", fileCommandOptions.HeadCommandOptions);
        fileSubCommands.addCommand("image", fileCommandOptions.ImageCommandOptions);
        fileSubCommands.addCommand("refresh", fileCommandOptions.RefreshCommandOptions);
        fileSubCommands.addCommand("tail", fileCommandOptions.TailCommandOptions);
        fileSubCommands.addCommand("list", fileCommandOptions.ListCommandOptions);
        fileSubCommands.addCommand("tree", fileCommandOptions.TreeCommandOptions);

        jobCommandOptions = new JobCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("jobs", jobCommandOptions);
        JCommander jobSubCommands = jCommander.getCommands().get("jobs");
        jobSubCommands.addCommand("update-acl", jobCommandOptions.UpdateAclCommandOptions);
        jobSubCommands.addCommand("aggregation-stats", jobCommandOptions.AggregationStatsCommandOptions);
        jobSubCommands.addCommand("create", jobCommandOptions.CreateCommandOptions);
        jobSubCommands.addCommand("distinct", jobCommandOptions.DistinctCommandOptions);
        jobSubCommands.addCommand("retry", jobCommandOptions.RetryCommandOptions);
        jobSubCommands.addCommand("search", jobCommandOptions.SearchCommandOptions);
        jobSubCommands.addCommand("top", jobCommandOptions.TopCommandOptions);
        jobSubCommands.addCommand("acl", jobCommandOptions.AclCommandOptions);
        jobSubCommands.addCommand("delete", jobCommandOptions.DeleteCommandOptions);
        jobSubCommands.addCommand("info", jobCommandOptions.InfoCommandOptions);
        jobSubCommands.addCommand("update", jobCommandOptions.UpdateCommandOptions);
        jobSubCommands.addCommand("head-log", jobCommandOptions.HeadLogCommandOptions);
        jobSubCommands.addCommand("tail-log", jobCommandOptions.TailLogCommandOptions);

        sampleCommandOptions = new SampleCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("samples", sampleCommandOptions);
        JCommander sampleSubCommands = jCommander.getCommands().get("samples");
        sampleSubCommands.addCommand("update-acl", sampleCommandOptions.UpdateAclCommandOptions);
        sampleSubCommands.addCommand("aggregation-stats", sampleCommandOptions.AggregationStatsCommandOptions);
        sampleSubCommands.addCommand("load-annotation-sets", sampleCommandOptions.LoadAnnotationSetsCommandOptions);
        sampleSubCommands.addCommand("create", sampleCommandOptions.CreateCommandOptions);
        sampleSubCommands.addCommand("distinct", sampleCommandOptions.DistinctCommandOptions);
        sampleSubCommands.addCommand("load", sampleCommandOptions.LoadCommandOptions);
        sampleSubCommands.addCommand("search", sampleCommandOptions.SearchCommandOptions);
        sampleSubCommands.addCommand("acl", sampleCommandOptions.AclCommandOptions);
        sampleSubCommands.addCommand("delete", sampleCommandOptions.DeleteCommandOptions);
        sampleSubCommands.addCommand("info", sampleCommandOptions.InfoCommandOptions);
        sampleSubCommands.addCommand("update", sampleCommandOptions.UpdateCommandOptions);
        sampleSubCommands.addCommand("update-annotations", sampleCommandOptions.UpdateAnnotationsCommandOptions);

        individualCommandOptions = new IndividualCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("individuals", individualCommandOptions);
        JCommander individualSubCommands = jCommander.getCommands().get("individuals");
        individualSubCommands.addCommand("update-acl", individualCommandOptions.UpdateAclCommandOptions);
        individualSubCommands.addCommand("aggregation-stats", individualCommandOptions.AggregationStatsCommandOptions);
        individualSubCommands.addCommand("load-annotation-sets", individualCommandOptions.LoadAnnotationSetsCommandOptions);
        individualSubCommands.addCommand("create", individualCommandOptions.CreateCommandOptions);
        individualSubCommands.addCommand("distinct", individualCommandOptions.DistinctCommandOptions);
        individualSubCommands.addCommand("search", individualCommandOptions.SearchCommandOptions);
        individualSubCommands.addCommand("acl", individualCommandOptions.AclCommandOptions);
        individualSubCommands.addCommand("delete", individualCommandOptions.DeleteCommandOptions);
        individualSubCommands.addCommand("info", individualCommandOptions.InfoCommandOptions);
        individualSubCommands.addCommand("update", individualCommandOptions.UpdateCommandOptions);
        individualSubCommands.addCommand("update-annotations", individualCommandOptions.UpdateAnnotationsCommandOptions);
        individualSubCommands.addCommand("relatives", individualCommandOptions.RelativesCommandOptions);

        familyCommandOptions = new FamilyCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("families", familyCommandOptions);
        JCommander familySubCommands = jCommander.getCommands().get("families");
        familySubCommands.addCommand("update-acl", familyCommandOptions.UpdateAclCommandOptions);
        familySubCommands.addCommand("aggregation-stats", familyCommandOptions.AggregationStatsCommandOptions);
        familySubCommands.addCommand("load-annotation-sets", familyCommandOptions.LoadAnnotationSetsCommandOptions);
        familySubCommands.addCommand("create", familyCommandOptions.CreateCommandOptions);
        familySubCommands.addCommand("distinct", familyCommandOptions.DistinctCommandOptions);
        familySubCommands.addCommand("search", familyCommandOptions.SearchCommandOptions);
        familySubCommands.addCommand("acl", familyCommandOptions.AclCommandOptions);
        familySubCommands.addCommand("delete", familyCommandOptions.DeleteCommandOptions);
        familySubCommands.addCommand("info", familyCommandOptions.InfoCommandOptions);
        familySubCommands.addCommand("update", familyCommandOptions.UpdateCommandOptions);
        familySubCommands.addCommand("update-annotations", familyCommandOptions.UpdateAnnotationsCommandOptions);

        cohortCommandOptions = new CohortCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("cohorts", cohortCommandOptions);
        JCommander cohortSubCommands = jCommander.getCommands().get("cohorts");
        cohortSubCommands.addCommand("update-acl", cohortCommandOptions.UpdateAclCommandOptions);
        cohortSubCommands.addCommand("aggregation-stats", cohortCommandOptions.AggregationStatsCommandOptions);
        cohortSubCommands.addCommand("load-annotation-sets", cohortCommandOptions.LoadAnnotationSetsCommandOptions);
        cohortSubCommands.addCommand("create", cohortCommandOptions.CreateCommandOptions);
        cohortSubCommands.addCommand("distinct", cohortCommandOptions.DistinctCommandOptions);
        cohortSubCommands.addCommand("generate", cohortCommandOptions.GenerateCommandOptions);
        cohortSubCommands.addCommand("search", cohortCommandOptions.SearchCommandOptions);
        cohortSubCommands.addCommand("acl", cohortCommandOptions.AclCommandOptions);
        cohortSubCommands.addCommand("delete", cohortCommandOptions.DeleteCommandOptions);
        cohortSubCommands.addCommand("info", cohortCommandOptions.InfoCommandOptions);
        cohortSubCommands.addCommand("update", cohortCommandOptions.UpdateCommandOptions);
        cohortSubCommands.addCommand("update-annotations", cohortCommandOptions.UpdateAnnotationsCommandOptions);

        diseasePanelCommandOptions = new DiseasePanelCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("panels", diseasePanelCommandOptions);
        JCommander diseasePanelSubCommands = jCommander.getCommands().get("panels");
        diseasePanelSubCommands.addCommand("update-acl", diseasePanelCommandOptions.UpdateAclCommandOptions);
        diseasePanelSubCommands.addCommand("create", diseasePanelCommandOptions.CreateCommandOptions);
        diseasePanelSubCommands.addCommand("distinct", diseasePanelCommandOptions.DistinctCommandOptions);
        diseasePanelSubCommands.addCommand("search", diseasePanelCommandOptions.SearchCommandOptions);
        diseasePanelSubCommands.addCommand("acl", diseasePanelCommandOptions.AclCommandOptions);
        diseasePanelSubCommands.addCommand("delete", diseasePanelCommandOptions.DeleteCommandOptions);
        diseasePanelSubCommands.addCommand("info", diseasePanelCommandOptions.InfoCommandOptions);
        diseasePanelSubCommands.addCommand("update", diseasePanelCommandOptions.UpdateCommandOptions);

        alignmentCommandOptions = new AlignmentCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("analysis/alignment", alignmentCommandOptions);
        JCommander alignmentSubCommands = jCommander.getCommands().get("analysis/alignment");
        alignmentSubCommands.addCommand("run-bwa", alignmentCommandOptions.RunBwaCommandOptions);
        alignmentSubCommands.addCommand("run-coverage-index", alignmentCommandOptions.RunCoverageIndexCommandOptions);
        alignmentSubCommands.addCommand("run-qc-gene-coverage-stats", alignmentCommandOptions.RunQcGeneCoverageStatsCommandOptions);
        alignmentSubCommands.addCommand("query-coverage", alignmentCommandOptions.QueryCoverageCommandOptions);
        alignmentSubCommands.addCommand("ratio-coverage", alignmentCommandOptions.RatioCoverageCommandOptions);
        alignmentSubCommands.addCommand("stats-coverage", alignmentCommandOptions.StatsCoverageCommandOptions);
        alignmentSubCommands.addCommand("run-deeptools", alignmentCommandOptions.RunDeeptoolsCommandOptions);
        alignmentSubCommands.addCommand("run-fastqc", alignmentCommandOptions.RunFastqcCommandOptions);
        alignmentSubCommands.addCommand("run-index", alignmentCommandOptions.RunIndexCommandOptions);
        alignmentSubCommands.addCommand("run-picard", alignmentCommandOptions.RunPicardCommandOptions);
        alignmentSubCommands.addCommand("run-qc", alignmentCommandOptions.RunQcCommandOptions);
        alignmentSubCommands.addCommand("query", alignmentCommandOptions.QueryCommandOptions);
        alignmentSubCommands.addCommand("run-samtools", alignmentCommandOptions.RunSamtoolsCommandOptions);

        variantCommandOptions = new VariantCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("analysis/variant", variantCommandOptions);
        JCommander variantSubCommands = jCommander.getCommands().get("analysis/variant");
        variantSubCommands.addCommand("aggregation-stats", variantCommandOptions.AggregationStatsCommandOptions);
        variantSubCommands.addCommand("metadata-annotation", variantCommandOptions.MetadataAnnotationCommandOptions);
        variantSubCommands.addCommand("query-annotation", variantCommandOptions.QueryAnnotationCommandOptions);
        variantSubCommands.addCommand("run-circos", variantCommandOptions.RunCircosCommandOptions);
        variantSubCommands.addCommand("delete-cohort-stats", variantCommandOptions.DeleteCohortStatsCommandOptions);
        variantSubCommands.addCommand("info-cohort-stats", variantCommandOptions.InfoCohortStatsCommandOptions);
        variantSubCommands.addCommand("run-cohort-stats", variantCommandOptions.RunCohortStatsCommandOptions);
        variantSubCommands.addCommand("run-export", variantCommandOptions.RunExportCommandOptions);
        variantSubCommands.addCommand("genotypes-family", variantCommandOptions.GenotypesFamilyCommandOptions);
        variantSubCommands.addCommand("run-family-qc", variantCommandOptions.RunFamilyQcCommandOptions);
        variantSubCommands.addCommand("delete-file", variantCommandOptions.DeleteFileCommandOptions);
        variantSubCommands.addCommand("run-gatk", variantCommandOptions.RunGatkCommandOptions);
        variantSubCommands.addCommand("run-genome-plot", variantCommandOptions.RunGenomePlotCommandOptions);
        variantSubCommands.addCommand("run-gwas", variantCommandOptions.RunGwasCommandOptions);
        variantSubCommands.addCommand("run-index", variantCommandOptions.RunIndexCommandOptions);
        variantSubCommands.addCommand("run-individual-qc", variantCommandOptions.RunIndividualQcCommandOptions);
        variantSubCommands.addCommand("run-inferred-sex", variantCommandOptions.RunInferredSexCommandOptions);
        variantSubCommands.addCommand("query-knockout-gene", variantCommandOptions.QueryKnockoutGeneCommandOptions);
        variantSubCommands.addCommand("query-knockout-individual", variantCommandOptions.QueryKnockoutIndividualCommandOptions);
        variantSubCommands.addCommand("run-knockout", variantCommandOptions.RunKnockoutCommandOptions);
        variantSubCommands.addCommand("run-mendelian-error", variantCommandOptions.RunMendelianErrorCommandOptions);
        variantSubCommands.addCommand("metadata", variantCommandOptions.MetadataCommandOptions);
        variantSubCommands.addCommand("query-mutational-signature", variantCommandOptions.QueryMutationalSignatureCommandOptions);
        variantSubCommands.addCommand("run-mutational-signature", variantCommandOptions.RunMutationalSignatureCommandOptions);
        variantSubCommands.addCommand("run-plink", variantCommandOptions.RunPlinkCommandOptions);
        variantSubCommands.addCommand("query", variantCommandOptions.QueryCommandOptions);
        variantSubCommands.addCommand("run-relatedness", variantCommandOptions.RunRelatednessCommandOptions);
        variantSubCommands.addCommand("run-rvtests", variantCommandOptions.RunRvtestsCommandOptions);
        variantSubCommands.addCommand("aggregation-stats-sample", variantCommandOptions.AggregationStatsSampleCommandOptions);
        variantSubCommands.addCommand("run-sample-eligibility", variantCommandOptions.RunSampleEligibilityCommandOptions);
        variantSubCommands.addCommand("run-sample-qc", variantCommandOptions.RunSampleQcCommandOptions);
        variantSubCommands.addCommand("query-sample", variantCommandOptions.QuerySampleCommandOptions);
        variantSubCommands.addCommand("run-sample", variantCommandOptions.RunSampleCommandOptions);
        variantSubCommands.addCommand("query-sample-stats", variantCommandOptions.QuerySampleStatsCommandOptions);
        variantSubCommands.addCommand("run-sample-stats", variantCommandOptions.RunSampleStatsCommandOptions);
        variantSubCommands.addCommand("run-stats-export", variantCommandOptions.RunStatsExportCommandOptions);
        variantSubCommands.addCommand("run-stats", variantCommandOptions.RunStatsCommandOptions);

        clinicalCommandOptions = new ClinicalCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("analysis/clinical", clinicalCommandOptions);
        JCommander clinicalSubCommands = jCommander.getCommands().get("analysis/clinical");
        clinicalSubCommands.addCommand("update-acl", clinicalCommandOptions.UpdateAclCommandOptions);
        clinicalSubCommands.addCommand("create", clinicalCommandOptions.CreateCommandOptions);
        clinicalSubCommands.addCommand("distinct", clinicalCommandOptions.DistinctCommandOptions);
        clinicalSubCommands.addCommand("distinct-interpretation", clinicalCommandOptions.DistinctInterpretationCommandOptions);
        clinicalSubCommands.addCommand("search-interpretation", clinicalCommandOptions.SearchInterpretationCommandOptions);
        clinicalSubCommands.addCommand("info-interpretation", clinicalCommandOptions.InfoInterpretationCommandOptions);
        clinicalSubCommands.addCommand("run-interpreter-cancer-tiering", clinicalCommandOptions.RunInterpreterCancerTieringCommandOptions);
        clinicalSubCommands.addCommand("run-interpreter-team", clinicalCommandOptions.RunInterpreterTeamCommandOptions);
        clinicalSubCommands.addCommand("run-interpreter-tiering", clinicalCommandOptions.RunInterpreterTieringCommandOptions);
        clinicalSubCommands.addCommand("run-interpreter-zetta", clinicalCommandOptions.RunInterpreterZettaCommandOptions);
        clinicalSubCommands.addCommand("aggregation-stats-rga", clinicalCommandOptions.AggregationStatsRgaCommandOptions);
        clinicalSubCommands.addCommand("query-rga-gene", clinicalCommandOptions.QueryRgaGeneCommandOptions);
        clinicalSubCommands.addCommand("summary-rga-gene", clinicalCommandOptions.SummaryRgaGeneCommandOptions);
        clinicalSubCommands.addCommand("run-rga-index", clinicalCommandOptions.RunRgaIndexCommandOptions);
        clinicalSubCommands.addCommand("query-rga-individual", clinicalCommandOptions.QueryRgaIndividualCommandOptions);
        clinicalSubCommands.addCommand("summary-rga-individual", clinicalCommandOptions.SummaryRgaIndividualCommandOptions);
        clinicalSubCommands.addCommand("query-rga-variant", clinicalCommandOptions.QueryRgaVariantCommandOptions);
        clinicalSubCommands.addCommand("summary-rga-variant", clinicalCommandOptions.SummaryRgaVariantCommandOptions);
        clinicalSubCommands.addCommand("search", clinicalCommandOptions.SearchCommandOptions);
        clinicalSubCommands.addCommand("actionable-variant", clinicalCommandOptions.ActionableVariantCommandOptions);
        clinicalSubCommands.addCommand("query-variant", clinicalCommandOptions.QueryVariantCommandOptions);
        clinicalSubCommands.addCommand("acl", clinicalCommandOptions.AclCommandOptions);
        clinicalSubCommands.addCommand("delete", clinicalCommandOptions.DeleteCommandOptions);
        clinicalSubCommands.addCommand("update", clinicalCommandOptions.UpdateCommandOptions);
        clinicalSubCommands.addCommand("info", clinicalCommandOptions.InfoCommandOptions);
        clinicalSubCommands.addCommand("create-interpretation", clinicalCommandOptions.CreateInterpretationCommandOptions);
        clinicalSubCommands.addCommand("clear-interpretation", clinicalCommandOptions.ClearInterpretationCommandOptions);
        clinicalSubCommands.addCommand("delete-interpretation", clinicalCommandOptions.DeleteInterpretationCommandOptions);
        clinicalSubCommands.addCommand("merge-interpretation", clinicalCommandOptions.MergeInterpretationCommandOptions);
        clinicalSubCommands.addCommand("revert-interpretation", clinicalCommandOptions.RevertInterpretationCommandOptions);
        clinicalSubCommands.addCommand("update-interpretation", clinicalCommandOptions.UpdateInterpretationCommandOptions);

        variantOperationCommandOptions = new VariantOperationCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("operation", variantOperationCommandOptions);
        JCommander variantOperationSubCommands = jCommander.getCommands().get("operation");
        variantOperationSubCommands.addCommand("configure-cellbase", variantOperationCommandOptions.ConfigureCellbaseCommandOptions);
        variantOperationSubCommands.addCommand("aggregate-variant", variantOperationCommandOptions.AggregateVariantCommandOptions);
        variantOperationSubCommands.addCommand("delete-variant-annotation",
                variantOperationCommandOptions.DeleteVariantAnnotationCommandOptions);
        variantOperationSubCommands.addCommand("index-variant-annotation",
                variantOperationCommandOptions.IndexVariantAnnotationCommandOptions);
        variantOperationSubCommands.addCommand("save-variant-annotation",
                variantOperationCommandOptions.SaveVariantAnnotationCommandOptions);
        variantOperationSubCommands.addCommand("configure-variant", variantOperationCommandOptions.ConfigureVariantCommandOptions);
        variantOperationSubCommands.addCommand("aggregate-variant-family",
                variantOperationCommandOptions.AggregateVariantFamilyCommandOptions);
        variantOperationSubCommands.addCommand("index-variant-family", variantOperationCommandOptions.IndexVariantFamilyCommandOptions);
        variantOperationSubCommands.addCommand("launcher-variant-index", variantOperationCommandOptions.LauncherVariantIndexCommandOptions);
        variantOperationSubCommands.addCommand("run-variant-julie", variantOperationCommandOptions.RunVariantJulieCommandOptions);
        variantOperationSubCommands.addCommand("repair-variant-metadata",
                variantOperationCommandOptions.RepairVariantMetadataCommandOptions);
        variantOperationSubCommands.addCommand("synchronize-variant-metadata",
                variantOperationCommandOptions.SynchronizeVariantMetadataCommandOptions);
        variantOperationSubCommands.addCommand("index-variant-sample", variantOperationCommandOptions.IndexVariantSampleCommandOptions);
        variantOperationSubCommands.addCommand("configure-sample-index", variantOperationCommandOptions.ConfigureSampleIndexCommandOptions);
        variantOperationSubCommands.addCommand("delete-variant-score", variantOperationCommandOptions.DeleteVariantScoreCommandOptions);
        variantOperationSubCommands.addCommand("index-variant-score", variantOperationCommandOptions.IndexVariantScoreCommandOptions);
        variantOperationSubCommands.addCommand("secondary-index-variant",
                variantOperationCommandOptions.SecondaryIndexVariantCommandOptions);
        variantOperationSubCommands.addCommand("delete-variant-secondary-index",
                variantOperationCommandOptions.DeleteVariantSecondaryIndexCommandOptions);
        variantOperationSubCommands.addCommand("index-variant-stats", variantOperationCommandOptions.IndexVariantStatsCommandOptions);

        metaCommandOptions = new MetaCommandOptions(commonCommandOptions, jCommander);
        jCommander.addCommand("meta", metaCommandOptions);
        JCommander metaSubCommands = jCommander.getCommands().get("meta");
        metaSubCommands.addCommand("about", metaCommandOptions.AboutCommandOptions);
        metaSubCommands.addCommand("api", metaCommandOptions.ApiCommandOptions);
        metaSubCommands.addCommand("fail", metaCommandOptions.FailCommandOptions);
        metaSubCommands.addCommand("ping", metaCommandOptions.PingCommandOptions);
        metaSubCommands.addCommand("status", metaCommandOptions.StatusCommandOptions);
    }

    @Override
    public boolean isHelp() {
        String parsedCommand = jCommander.getParsedCommand();
        if (parsedCommand != null) {
            JCommander jCommander2 = jCommander.getCommands().get(parsedCommand);
            List<Object> objects = jCommander2.getObjects();
            if (!objects.isEmpty() && objects.get(0) instanceof AdminCliOptionsParser.AdminCommonCommandOptions) {
                return ((AdminCliOptionsParser.AdminCommonCommandOptions) objects.get(0)).commonOptions.help;
            }
        }
        return commonCommandOptions.help;
    }

    @Override
    public void printUsage() {
        String parsedCommand = getCommand();
        if (parsedCommand.isEmpty()) {
            System.err.println("");
            System.err.println("Program:     OpenCGA (OpenCB)");
            System.err.println("Version:     " + GitRepositoryState.get().getBuildVersion());
            System.err.println("Git commit:  " + GitRepositoryState.get().getCommitId());
            System.err.println("Description: Big Data platform for processing and analysing NGS data");
            System.err.println("");
            System.err.println("Usage:       opencga.sh [-h|--help] [--version] <command> [options]");
            System.err.println("");
            printMainUsage();
            System.err.println("");
        } else {
            String parsedSubCommand = getSubCommand();
            if (parsedSubCommand.isEmpty()) {
                System.err.println("");
                System.err.println("Usage:   opencga.sh " + parsedCommand + " <subcommand> [options]");
                System.err.println("");
                System.err.println("Subcommands:");
                printCommands(jCommander.getCommands().get(parsedCommand));
                System.err.println("");
            } else {
                System.err.println("");
                System.err.println("Usage:   opencga.sh " + parsedCommand + " " + parsedSubCommand + " [options]");
                System.err.println("");
                System.err.println("Options:");
                CommandLineUtils.printCommandUsage(jCommander.getCommands().get(parsedCommand).getCommands().get(parsedSubCommand));
                System.err.println("");
            }
        }
    }

    @Override
    protected void printMainUsage() {
        Set<String> analysisCommands = new HashSet<>(Arrays.asList("alignments", "variant", "clinical"));
        Set<String> operationsCommands = new HashSet<>(Collections.singletonList(OPERATIONS_COMMAND));

        System.err.println("Catalog commands:");
        for (String command : jCommander.getCommands().keySet()) {
            if (!analysisCommands.contains(command) && !operationsCommands.contains(command)) {
                System.err.printf("%14s  %s\n", command, jCommander.getCommandDescription(command));
            }
        }

        System.err.println("");
        System.err.println("Analysis commands:");
        for (String command : jCommander.getCommands().keySet()) {
            if (analysisCommands.contains(command)) {
                System.err.printf("%14s  %s\n", command, jCommander.getCommandDescription(command));
            }
        }

        System.err.println("");
        System.err.println("Operation commands:");
        for (String command : jCommander.getCommands().keySet()) {
            if (operationsCommands.contains(command)) {
                System.err.printf("%14s  %s\n", command, jCommander.getCommandDescription(command));
            }
        }
    }

    public GeneralCliOptions.CommonCommandOptions getCommonCommandOptions() {
        return commonCommandOptions;
    }

    public UserCommandOptions getUserCommandOptions() {
        return userCommandOptions;
    }

    public ProjectCommandOptions getProjectCommandOptions() {
        return projectCommandOptions;
    }

    public StudyCommandOptions getStudyCommandOptions() {
        return studyCommandOptions;
    }

    public FileCommandOptions getFileCommandOptions() {
        return fileCommandOptions;
    }

    public JobCommandOptions getJobCommandOptions() {
        return jobCommandOptions;
    }

    public SampleCommandOptions getSampleCommandOptions() {
        return sampleCommandOptions;
    }

    public IndividualCommandOptions getIndividualCommandOptions() {
        return individualCommandOptions;
    }

    public FamilyCommandOptions getFamilyCommandOptions() {
        return familyCommandOptions;
    }

    public CohortCommandOptions getCohortCommandOptions() {
        return cohortCommandOptions;
    }

    public DiseasePanelCommandOptions getDiseasePanelCommandOptions() {
        return diseasePanelCommandOptions;
    }

    public AlignmentCommandOptions getAlignmentCommandOptions() {
        return alignmentCommandOptions;
    }

    public VariantCommandOptions getVariantCommandOptions() {
        return variantCommandOptions;
    }

    public ClinicalCommandOptions getClinicalCommandOptions() {
        return clinicalCommandOptions;
    }

    public VariantOperationCommandOptions getVariantOperationCommandOptions() {
        return variantOperationCommandOptions;
    }

    public MetaCommandOptions getMetaCommandOptions() {
        return metaCommandOptions;
    }
}
