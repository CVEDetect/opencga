/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import java.lang.Object;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.app.cli.main.options.DiseasePanelCommandOptions;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.panel.Panel;
import org.opencb.opencga.core.models.panel.PanelAclUpdateParams;
import org.opencb.opencga.core.models.panel.PanelCreateParams;
import org.opencb.opencga.core.models.panel.PanelUpdateParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-09-02 11:54:59
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class DiseasePanelCommandExecutor extends OpencgaCommandExecutor {

    private DiseasePanelCommandOptions diseasepanelCommandOptions;

    public DiseasePanelCommandExecutor(DiseasePanelCommandOptions diseasepanelCommandOptions) {
        super(diseasepanelCommandOptions.commonCommandOptions);
        this.diseasepanelCommandOptions = diseasepanelCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Disease Panels command line");
        
        String subCommandString = getParsedSubCommand(diseasepanelCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "update-acl":
                queryResponse = updateAcl();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "search":
                queryResponse = search();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "update":
                queryResponse = update();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<ObjectMap> updateAcl() throws ClientException {
        logger.debug("Executing updateAcl in DiseasePanel command line");

        DiseasePanelCommandOptions.UpdateAclCommandOptions commandOptions = diseasepanelCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        PanelAclUpdateParams panelAclUpdateParams = new PanelAclUpdateParams()
                .setPanel(commandOptions.panel);

        return openCGAClient.getDiseasePanelClient().updateAcl(commandOptions.members,commandOptions.action, panelAclUpdateParams, queryParams);
    }
    
    private RestResponse<Panel> create() throws ClientException {
        logger.debug("Executing create in DiseasePanel command line");

        DiseasePanelCommandOptions.CreateCommandOptions commandOptions = diseasepanelCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("source", commandOptions.source);
        queryParams.putIfNotEmpty("id", commandOptions.id);

        PanelCreateParams panelCreateParams = new PanelCreateParams()
                .setId(commandOptions.id)
                .setName(commandOptions.name)
                .setDescription(commandOptions.description)
                .setAuthor(commandOptions.author);

        return openCGAClient.getDiseasePanelClient().create(panelCreateParams, queryParams);
    }
    
    private RestResponse<ObjectMap> distinct() throws ClientException {
        logger.debug("Executing distinct in DiseasePanel command line");

        DiseasePanelCommandOptions.DistinctCommandOptions commandOptions = diseasepanelCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("genes", commandOptions.genes);
        queryParams.putIfNotEmpty("regions", commandOptions.regions);
        queryParams.putIfNotEmpty("categories", commandOptions.categories);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("author", commandOptions.author);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);

        return openCGAClient.getDiseasePanelClient().distinct(commandOptions.field, queryParams);
    }
    
    private RestResponse<Panel> search() throws ClientException {
        logger.debug("Executing search in DiseasePanel command line");

        DiseasePanelCommandOptions.SearchCommandOptions commandOptions = diseasepanelCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("genes", commandOptions.genes);
        queryParams.putIfNotEmpty("regions", commandOptions.regions);
        queryParams.putIfNotEmpty("categories", commandOptions.categories);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("author", commandOptions.author);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("snapshot", commandOptions.snapshot);

        return openCGAClient.getDiseasePanelClient().search(queryParams);
    }
    
    private RestResponse<ObjectMap> acl() throws ClientException {
        logger.debug("Executing acl in DiseasePanel command line");

        DiseasePanelCommandOptions.AclCommandOptions commandOptions = diseasepanelCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getDiseasePanelClient().acl(commandOptions.panels, queryParams);
    }
    
    private RestResponse<Panel> delete() throws ClientException {
        logger.debug("Executing delete in DiseasePanel command line");

        DiseasePanelCommandOptions.DeleteCommandOptions commandOptions = diseasepanelCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getDiseasePanelClient().delete(commandOptions.panels, queryParams);
    }
    
    private RestResponse<Panel> info() throws ClientException {
        logger.debug("Executing info in DiseasePanel command line");

        DiseasePanelCommandOptions.InfoCommandOptions commandOptions = diseasepanelCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);

        return openCGAClient.getDiseasePanelClient().info(commandOptions.panels, queryParams);
    }
    
    private RestResponse<Panel> update() throws ClientException {
        logger.debug("Executing update in DiseasePanel command line");

        DiseasePanelCommandOptions.UpdateCommandOptions commandOptions = diseasepanelCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("incVersion", commandOptions.incVersion);

        PanelUpdateParams panelUpdateParams = new PanelUpdateParams()
                .setId(commandOptions.id)
                .setName(commandOptions.name)
                .setDescription(commandOptions.description)
                .setAuthor(commandOptions.author);

        return openCGAClient.getDiseasePanelClient().update(commandOptions.panels, panelUpdateParams, queryParams);
    }
    
}
