/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.biodata.models.clinical.ClinicalProperty.ModeOfInheritance;
import org.opencb.biodata.models.clinical.ClinicalProperty.Penetrance;
import org.opencb.biodata.models.clinical.qc.Signature;
import org.opencb.biodata.models.variant.Variant;
import org.opencb.biodata.models.variant.avro.VariantAnnotation;
import org.opencb.biodata.models.variant.metadata.SampleVariantStats;
import org.opencb.biodata.models.variant.metadata.VariantMetadata;
import org.opencb.biodata.models.variant.metadata.VariantSetStats;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.commons.datastore.core.QueryResponse;
import org.opencb.opencga.app.cli.main.options.VariantCommandOptions;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByGene;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividual;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.operations.variant.VariantStatsExportParams;
import org.opencb.opencga.core.models.variant.CircosAnalysisParams;
import org.opencb.opencga.core.models.variant.CohortVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.FamilyQcAnalysisParams;
import org.opencb.opencga.core.models.variant.GatkWrapperParams;
import org.opencb.opencga.core.models.variant.GenomePlotAnalysisParams;
import org.opencb.opencga.core.models.variant.GwasAnalysisParams;
import org.opencb.opencga.core.models.variant.IndividualQcAnalysisParams;
import org.opencb.opencga.core.models.variant.InferredSexAnalysisParams;
import org.opencb.opencga.core.models.variant.KnockoutAnalysisParams;
import org.opencb.opencga.core.models.variant.MendelianErrorAnalysisParams;
import org.opencb.opencga.core.models.variant.MutationalSignatureAnalysisParams;
import org.opencb.opencga.core.models.variant.PlinkWrapperParams;
import org.opencb.opencga.core.models.variant.RelatednessAnalysisParams;
import org.opencb.opencga.core.models.variant.RvtestsWrapperParams;
import org.opencb.opencga.core.models.variant.SampleEligibilityAnalysisParams;
import org.opencb.opencga.core.models.variant.SampleQcAnalysisParams;
import org.opencb.opencga.core.models.variant.SampleVariantFilterParams;
import org.opencb.opencga.core.models.variant.SampleVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.VariantExportParams;
import org.opencb.opencga.core.models.variant.VariantIndexParams;
import org.opencb.opencga.core.models.variant.VariantStatsAnalysisParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-27 13:07:31
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class VariantCommandExecutor extends OpencgaCommandExecutor {

    private VariantCommandOptions variantCommandOptions;

    public VariantCommandExecutor(VariantCommandOptions variantCommandOptions) {
        super(variantCommandOptions.commonCommandOptions);
        this.variantCommandOptions = variantCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Analysis - Variant command line");
        
        String subCommandString = getParsedSubCommand(variantCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "aggregationStats":
                queryResponse = aggregationStats();
                break;
            case "metadataAnnotation":
                queryResponse = metadataAnnotation();
                break;
            case "queryAnnotation":
                queryResponse = queryAnnotation();
                break;
            case "runCircos":
                queryResponse = runCircos();
                break;
            case "deleteCohortStats":
                queryResponse = deleteCohortStats();
                break;
            case "infoCohortStats":
                queryResponse = infoCohortStats();
                break;
            case "runCohortStats":
                queryResponse = runCohortStats();
                break;
            case "runExport":
                queryResponse = runExport();
                break;
            case "genotypesFamily":
                queryResponse = genotypesFamily();
                break;
            case "runFamilyQc":
                queryResponse = runFamilyQc();
                break;
            case "deleteFile":
                queryResponse = deleteFile();
                break;
            case "runGatk":
                queryResponse = runGatk();
                break;
            case "runGenomePlot":
                queryResponse = runGenomePlot();
                break;
            case "runGwas":
                queryResponse = runGwas();
                break;
            case "runIndex":
                queryResponse = runIndex();
                break;
            case "runIndividualQc":
                queryResponse = runIndividualQc();
                break;
            case "runInferredSex":
                queryResponse = runInferredSex();
                break;
            case "queryKnockoutGene":
                queryResponse = queryKnockoutGene();
                break;
            case "queryKnockoutIndividual":
                queryResponse = queryKnockoutIndividual();
                break;
            case "runKnockout":
                queryResponse = runKnockout();
                break;
            case "runMendelianError":
                queryResponse = runMendelianError();
                break;
            case "metadata":
                queryResponse = metadata();
                break;
            case "queryMutationalSignature":
                queryResponse = queryMutationalSignature();
                break;
            case "runMutationalSignature":
                queryResponse = runMutationalSignature();
                break;
            case "runPlink":
                queryResponse = runPlink();
                break;
            case "query":
                queryResponse = query();
                break;
            case "runRelatedness":
                queryResponse = runRelatedness();
                break;
            case "runRvtests":
                queryResponse = runRvtests();
                break;
            case "aggregationStatsSample":
                queryResponse = aggregationStatsSample();
                break;
            case "runSampleEligibility":
                queryResponse = runSampleEligibility();
                break;
            case "runSampleQc":
                queryResponse = runSampleQc();
                break;
            case "querySample":
                queryResponse = querySample();
                break;
            case "runSample":
                queryResponse = runSample();
                break;
            case "querySampleStats":
                queryResponse = querySampleStats();
                break;
            case "runSampleStats":
                queryResponse = runSampleStats();
                break;
            case "runStatsExport":
                queryResponse = runStatsExport();
                break;
            case "runStats":
                queryResponse = runStats();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<QueryResponse> aggregationStats() throws ClientException {
        logger.debug("Executing aggregationStats in Variant command line");

        VariantCommandOptions.AggregationStatsCommandOptions commandOptions = variantCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        queryParams.putIfNotEmpty("field", commandOptions.field);

        return openCGAClient.getVariantClient().aggregationStats(queryParams);
    }
    
    private RestResponse<ObjectMap> metadataAnnotation() throws ClientException {
        logger.debug("Executing metadataAnnotation in Variant command line");

        VariantCommandOptions.MetadataAnnotationCommandOptions commandOptions = variantCommandOptions.metadataAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);
        queryParams.putIfNotEmpty("project", commandOptions.project);

        return openCGAClient.getVariantClient().metadataAnnotation(queryParams);
    }
    
    private RestResponse<VariantAnnotation> queryAnnotation() throws ClientException {
        logger.debug("Executing queryAnnotation in Variant command line");

        VariantCommandOptions.QueryAnnotationCommandOptions commandOptions = variantCommandOptions.queryAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);

        return openCGAClient.getVariantClient().queryAnnotation(queryParams);
    }
    
    private RestResponse<String> runCircos() throws ClientException {
        logger.debug("Executing runCircos in Variant command line");

        VariantCommandOptions.RunCircosCommandOptions commandOptions = variantCommandOptions.runCircosCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        CircosAnalysisParams circosAnalysisParams = new CircosAnalysisParams()
                .setTitle(commandOptions.title)
                .setDensity(commandOptions.density)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runCircos(circosAnalysisParams, queryParams);
    }
    
    private RestResponse<SampleVariantStats> deleteCohortStats() throws ClientException {
        logger.debug("Executing deleteCohortStats in Variant command line");

        VariantCommandOptions.DeleteCohortStatsCommandOptions commandOptions = variantCommandOptions.deleteCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);

        return openCGAClient.getVariantClient().deleteCohortStats(queryParams);
    }
    
    private RestResponse<VariantSetStats> infoCohortStats() throws ClientException {
        logger.debug("Executing infoCohortStats in Variant command line");

        VariantCommandOptions.InfoCohortStatsCommandOptions commandOptions = variantCommandOptions.infoCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getVariantClient().infoCohortStats(commandOptions.cohort, queryParams);
    }
    
    private RestResponse<Job> runCohortStats() throws ClientException {
        logger.debug("Executing runCohortStats in Variant command line");

        VariantCommandOptions.RunCohortStatsCommandOptions commandOptions = variantCommandOptions.runCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        CohortVariantStatsAnalysisParams cohortVariantStatsAnalysisParams = new CohortVariantStatsAnalysisParams()
                .setCohort(commandOptions.cohort)
                .setIndex(commandOptions.index)
                .setSampleAnnotation(commandOptions.sampleAnnotation)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runCohortStats(cohortVariantStatsAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runExport() throws ClientException {
        logger.debug("Executing runExport in Variant command line");

        VariantCommandOptions.RunExportCommandOptions commandOptions = variantCommandOptions.runExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        VariantExportParams variantExportParams = new VariantExportParams()
                .setOutdir(commandOptions.outdir)
                .setOutputFileName(commandOptions.outputFileName)
                .setOutputFormat(commandOptions.outputFormat)
                .setCompress(commandOptions.compress)
                .setVariantsFile(commandOptions.variantsFile)
                .setInclude(commandOptions.include)
                .setExclude(commandOptions.exclude)
                .setSummary(commandOptions.summary);

        return openCGAClient.getVariantClient().runExport(variantExportParams, queryParams);
    }
    
    private RestResponse<ObjectMap> genotypesFamily() throws ClientException {
        logger.debug("Executing genotypesFamily in Variant command line");

        VariantCommandOptions.GenotypesFamilyCommandOptions commandOptions = variantCommandOptions.genotypesFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("clinicalAnalysis", commandOptions.clinicalAnalysis);
        queryParams.putIfNotNull("penetrance", commandOptions.penetrance);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);

        return openCGAClient.getVariantClient().genotypesFamily(commandOptions.modeOfInheritance, queryParams);
    }
    
    private RestResponse<Job> runFamilyQc() throws ClientException {
        logger.debug("Executing runFamilyQc in Variant command line");

        VariantCommandOptions.RunFamilyQcCommandOptions commandOptions = variantCommandOptions.runFamilyQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        FamilyQcAnalysisParams familyQcAnalysisParams = new FamilyQcAnalysisParams()
                .setFamily(commandOptions.family)
                .setRelatednessMethod(commandOptions.relatednessMethod)
                .setRelatednessMaf(commandOptions.relatednessMaf)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runFamilyQc(familyQcAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> deleteFile() throws ClientException {
        logger.debug("Executing deleteFile in Variant command line");

        VariantCommandOptions.DeleteFileCommandOptions commandOptions = variantCommandOptions.deleteFileCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotNull("resume", commandOptions.resume);

        return openCGAClient.getVariantClient().deleteFile(queryParams);
    }
    
    private RestResponse<Job> runGatk() throws ClientException {
        logger.debug("Executing runGatk in Variant command line");

        VariantCommandOptions.RunGatkCommandOptions commandOptions = variantCommandOptions.runGatkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        GatkWrapperParams gatkWrapperParams = new GatkWrapperParams()
                .setCommand(commandOptions.command)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runGatk(gatkWrapperParams, queryParams);
    }
    
    private RestResponse<Job> runGenomePlot() throws ClientException {
        logger.debug("Executing runGenomePlot in Variant command line");

        VariantCommandOptions.RunGenomePlotCommandOptions commandOptions = variantCommandOptions.runGenomePlotCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        GenomePlotAnalysisParams genomePlotAnalysisParams = new GenomePlotAnalysisParams()
                .setSample(commandOptions.sample)
                .setId(commandOptions.id)
                .setDescription(commandOptions.description)
                .setConfigFile(commandOptions.configFile)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runGenomePlot(genomePlotAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runGwas() throws ClientException {
        logger.debug("Executing runGwas in Variant command line");

        VariantCommandOptions.RunGwasCommandOptions commandOptions = variantCommandOptions.runGwasCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        GwasAnalysisParams gwasAnalysisParams = new GwasAnalysisParams()
                .setPhenotype(commandOptions.phenotype)
                .setIndex(commandOptions.index)
                .setIndexScoreId(commandOptions.indexScoreId)
                .setCaseCohort(commandOptions.caseCohort)
                .setCaseCohortSamplesAnnotation(commandOptions.caseCohortSamplesAnnotation)
                .setControlCohort(commandOptions.controlCohort)
                .setControlCohortSamplesAnnotation(commandOptions.controlCohortSamplesAnnotation)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runGwas(gwasAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runIndex() throws ClientException {
        logger.debug("Executing runIndex in Variant command line");

        VariantCommandOptions.RunIndexCommandOptions commandOptions = variantCommandOptions.runIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        VariantIndexParams variantIndexParams = new VariantIndexParams()
                .setFile(commandOptions.file)
                .setResume(commandOptions.resume)
                .setOutdir(commandOptions.outdir)
                .setTransform(commandOptions.transform)
                .setGvcf(commandOptions.gvcf)
                .setNormalizationSkip(commandOptions.normalizationSkip)
                .setReferenceGenome(commandOptions.referenceGenome)
                .setFamily(commandOptions.family)
                .setSomatic(commandOptions.somatic)
                .setLoad(commandOptions.load)
                .setLoadSplitData(commandOptions.loadSplitData)
                .setLoadMultiFileData(commandOptions.loadMultiFileData)
                .setLoadSampleIndex(commandOptions.loadSampleIndex)
                .setLoadArchive(commandOptions.loadArchive)
                .setLoadHomRef(commandOptions.loadHomRef)
                .setPostLoadCheck(commandOptions.postLoadCheck)
                .setExcludeGenotypes(commandOptions.excludeGenotypes)
                .setIncludeSampleData(commandOptions.includeSampleData)
                .setMerge(commandOptions.merge)
                .setDeduplicationPolicy(commandOptions.deduplicationPolicy)
                .setCalculateStats(commandOptions.calculateStats)
                .setAggregationMappingFile(commandOptions.aggregationMappingFile)
                .setAnnotate(commandOptions.annotate)
                .setAnnotator(commandOptions.annotator)
                .setOverwriteAnnotations(commandOptions.overwriteAnnotations)
                .setIndexSearch(commandOptions.indexSearch)
                .setSkipIndexedFiles(commandOptions.skipIndexedFiles);

        return openCGAClient.getVariantClient().runIndex(variantIndexParams, queryParams);
    }
    
    private RestResponse<Job> runIndividualQc() throws ClientException {
        logger.debug("Executing runIndividualQc in Variant command line");

        VariantCommandOptions.RunIndividualQcCommandOptions commandOptions = variantCommandOptions.runIndividualQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        IndividualQcAnalysisParams individualQcAnalysisParams = new IndividualQcAnalysisParams()
                .setIndividual(commandOptions.individual)
                .setSample(commandOptions.sample)
                .setInferredSexMethod(commandOptions.inferredSexMethod)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runIndividualQc(individualQcAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runInferredSex() throws ClientException {
        logger.debug("Executing runInferredSex in Variant command line");

        VariantCommandOptions.RunInferredSexCommandOptions commandOptions = variantCommandOptions.runInferredSexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        InferredSexAnalysisParams inferredSexAnalysisParams = new InferredSexAnalysisParams()
                .setIndividual(commandOptions.individual)
                .setSample(commandOptions.sample)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runInferredSex(inferredSexAnalysisParams, queryParams);
    }
    
    private RestResponse<KnockoutByGene> queryKnockoutGene() throws ClientException {
        logger.debug("Executing queryKnockoutGene in Variant command line");

        VariantCommandOptions.QueryKnockoutGeneCommandOptions commandOptions = variantCommandOptions.queryKnockoutGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);

        return openCGAClient.getVariantClient().queryKnockoutGene(queryParams);
    }
    
    private RestResponse<KnockoutByIndividual> queryKnockoutIndividual() throws ClientException {
        logger.debug("Executing queryKnockoutIndividual in Variant command line");

        VariantCommandOptions.QueryKnockoutIndividualCommandOptions commandOptions = variantCommandOptions.queryKnockoutIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);

        return openCGAClient.getVariantClient().queryKnockoutIndividual(queryParams);
    }
    
    private RestResponse<Job> runKnockout() throws ClientException {
        logger.debug("Executing runKnockout in Variant command line");

        VariantCommandOptions.RunKnockoutCommandOptions commandOptions = variantCommandOptions.runKnockoutCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        KnockoutAnalysisParams knockoutAnalysisParams = new KnockoutAnalysisParams()
                .setBiotype(commandOptions.biotype)
                .setConsequenceType(commandOptions.consequenceType)
                .setFilter(commandOptions.filter)
                .setQual(commandOptions.qual)
                .setSkipGenesFile(commandOptions.skipGenesFile)
                .setOutdir(commandOptions.outdir)
                .setIndex(commandOptions.index);

        return openCGAClient.getVariantClient().runKnockout(knockoutAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runMendelianError() throws ClientException {
        logger.debug("Executing runMendelianError in Variant command line");

        VariantCommandOptions.RunMendelianErrorCommandOptions commandOptions = variantCommandOptions.runMendelianErrorCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        MendelianErrorAnalysisParams mendelianErrorAnalysisParams = new MendelianErrorAnalysisParams()
                .setFamily(commandOptions.family)
                .setIndividual(commandOptions.individual)
                .setSample(commandOptions.sample)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runMendelianError(mendelianErrorAnalysisParams, queryParams);
    }
    
    private RestResponse<VariantMetadata> metadata() throws ClientException {
        logger.debug("Executing metadata in Variant command line");

        VariantCommandOptions.MetadataCommandOptions commandOptions = variantCommandOptions.metadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);

        return openCGAClient.getVariantClient().metadata(queryParams);
    }
    
    private RestResponse<Signature> queryMutationalSignature() throws ClientException {
        logger.debug("Executing queryMutationalSignature in Variant command line");

        VariantCommandOptions.QueryMutationalSignatureCommandOptions commandOptions = variantCommandOptions.queryMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotNull("fitting", commandOptions.fitting);

        return openCGAClient.getVariantClient().queryMutationalSignature(queryParams);
    }
    
    private RestResponse<Job> runMutationalSignature() throws ClientException {
        logger.debug("Executing runMutationalSignature in Variant command line");

        VariantCommandOptions.RunMutationalSignatureCommandOptions commandOptions = variantCommandOptions.runMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        MutationalSignatureAnalysisParams mutationalSignatureAnalysisParams = new MutationalSignatureAnalysisParams()
                .setSample(commandOptions.sample)
                .setId(commandOptions.id)
                .setDescription(commandOptions.description)
                .setQuery(commandOptions.query)
                .setRelease(commandOptions.release)
                .setFitting(commandOptions.fitting)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runMutationalSignature(mutationalSignatureAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runPlink() throws ClientException {
        logger.debug("Executing runPlink in Variant command line");

        VariantCommandOptions.RunPlinkCommandOptions commandOptions = variantCommandOptions.runPlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        PlinkWrapperParams plinkWrapperParams = new PlinkWrapperParams()
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runPlink(plinkWrapperParams, queryParams);
    }
    
    private RestResponse<Variant> query() throws ClientException {
        logger.debug("Executing query in Variant command line");

        VariantCommandOptions.QueryCommandOptions commandOptions = variantCommandOptions.queryCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("sort", commandOptions.sort);
        queryParams.putIfNotNull("summary", commandOptions.summary);
        queryParams.putIfNotNull("approximateCount", commandOptions.approximateCount);
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("reference", commandOptions.reference);
        queryParams.putIfNotEmpty("alternate", commandOptions.alternate);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotNull("sampleMetadata", commandOptions.sampleMetadata);
        queryParams.putIfNotEmpty("unknownGenotype", commandOptions.unknownGenotype);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("includeSampleData", commandOptions.includeSampleData);
        queryParams.putIfNotEmpty("includeGenotype", commandOptions.includeGenotype);
        queryParams.putIfNotEmpty("includeSampleId", commandOptions.includeSampleId);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);

        return openCGAClient.getVariantClient().query(queryParams);
    }
    
    private RestResponse<Job> runRelatedness() throws ClientException {
        logger.debug("Executing runRelatedness in Variant command line");

        VariantCommandOptions.RunRelatednessCommandOptions commandOptions = variantCommandOptions.runRelatednessCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        RelatednessAnalysisParams relatednessAnalysisParams = new RelatednessAnalysisParams()
                .setMinorAlleleFreq(commandOptions.minorAlleleFreq)
                .setMethod(commandOptions.method)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runRelatedness(relatednessAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runRvtests() throws ClientException {
        logger.debug("Executing runRvtests in Variant command line");

        VariantCommandOptions.RunRvtestsCommandOptions commandOptions = variantCommandOptions.runRvtestsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        RvtestsWrapperParams rvtestsWrapperParams = new RvtestsWrapperParams()
                .setCommand(commandOptions.command)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runRvtests(rvtestsWrapperParams, queryParams);
    }
    
    private RestResponse<FacetField> aggregationStatsSample() throws ClientException {
        logger.debug("Executing aggregationStatsSample in Variant command line");

        VariantCommandOptions.AggregationStatsSampleCommandOptions commandOptions = variantCommandOptions.aggregationStatsSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("field", commandOptions.field);

        return openCGAClient.getVariantClient().aggregationStatsSample(queryParams);
    }
    
    private RestResponse<Job> runSampleEligibility() throws ClientException {
        logger.debug("Executing runSampleEligibility in Variant command line");

        VariantCommandOptions.RunSampleEligibilityCommandOptions commandOptions = variantCommandOptions.runSampleEligibilityCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        SampleEligibilityAnalysisParams sampleEligibilityAnalysisParams = new SampleEligibilityAnalysisParams()
                .setQuery(commandOptions.query)
                .setIndex(commandOptions.index)
                .setCohortId(commandOptions.cohortId);

        return openCGAClient.getVariantClient().runSampleEligibility(sampleEligibilityAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runSampleQc() throws ClientException {
        logger.debug("Executing runSampleQc in Variant command line");

        VariantCommandOptions.RunSampleQcCommandOptions commandOptions = variantCommandOptions.runSampleQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        SampleQcAnalysisParams sampleQcAnalysisParams = new SampleQcAnalysisParams()
                .setSample(commandOptions.sample)
                .setVariantStatsId(commandOptions.variantStatsId)
                .setVariantStatsDescription(commandOptions.variantStatsDescription)
                .setSignatureId(commandOptions.signatureId)
                .setSignatureDescription(commandOptions.signatureDescription)
                .setSignatureQuery(commandOptions.signatureQuery)
                .setSignatureRelease(commandOptions.signatureRelease)
                .setGenomePlotId(commandOptions.genomePlotId)
                .setGenomePlotDescription(commandOptions.genomePlotDescription)
                .setGenomePlotConfigFile(commandOptions.genomePlotConfigFile)
                .setOutdir(commandOptions.outdir);

        return openCGAClient.getVariantClient().runSampleQc(sampleQcAnalysisParams, queryParams);
    }
    
    private RestResponse<Variant> querySample() throws ClientException {
        logger.debug("Executing querySample in Variant command line");

        VariantCommandOptions.QuerySampleCommandOptions commandOptions = variantCommandOptions.querySampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("variant", commandOptions.variant);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);

        return openCGAClient.getVariantClient().querySample(queryParams);
    }
    
    private RestResponse<Job> runSample() throws ClientException {
        logger.debug("Executing runSample in Variant command line");

        VariantCommandOptions.RunSampleCommandOptions commandOptions = variantCommandOptions.runSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        SampleVariantFilterParams sampleVariantFilterParams = new SampleVariantFilterParams()
                .setSamplesInAllVariants(commandOptions.samplesInAllVariants)
                .setMaxVariants(commandOptions.maxVariants);

        return openCGAClient.getVariantClient().runSample(sampleVariantFilterParams, queryParams);
    }
    
    private RestResponse<SampleVariantStats> querySampleStats() throws ClientException {
        logger.debug("Executing querySampleStats in Variant command line");

        VariantCommandOptions.QuerySampleStatsCommandOptions commandOptions = variantCommandOptions.querySampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);

        return openCGAClient.getVariantClient().querySampleStats(commandOptions.sample, queryParams);
    }
    
    private RestResponse<Job> runSampleStats() throws ClientException {
        logger.debug("Executing runSampleStats in Variant command line");

        VariantCommandOptions.RunSampleStatsCommandOptions commandOptions = variantCommandOptions.runSampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        SampleVariantStatsAnalysisParams sampleVariantStatsAnalysisParams = new SampleVariantStatsAnalysisParams()
                .setOutdir(commandOptions.outdir)
                .setIndex(commandOptions.index)
                .setIndexOverwrite(commandOptions.indexOverwrite)
                .setIndexId(commandOptions.indexId)
                .setIndexDescription(commandOptions.indexDescription);

        return openCGAClient.getVariantClient().runSampleStats(sampleVariantStatsAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runStatsExport() throws ClientException {
        logger.debug("Executing runStatsExport in Variant command line");

        VariantCommandOptions.RunStatsExportCommandOptions commandOptions = variantCommandOptions.runStatsExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        VariantStatsExportParams variantStatsExportParams = new VariantStatsExportParams()
                .setOutput(commandOptions.output)
                .setRegion(commandOptions.region)
                .setGene(commandOptions.gene)
                .setOutputFormat(commandOptions.outputFormat);

        return openCGAClient.getVariantClient().runStatsExport(variantStatsExportParams, queryParams);
    }
    
    private RestResponse<Job> runStats() throws ClientException {
        logger.debug("Executing runStats in Variant command line");

        VariantCommandOptions.RunStatsCommandOptions commandOptions = variantCommandOptions.runStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        VariantStatsAnalysisParams variantStatsAnalysisParams = new VariantStatsAnalysisParams()
                .setRegion(commandOptions.region)
                .setGene(commandOptions.gene)
                .setOutdir(commandOptions.outdir)
                .setOutputFileName(commandOptions.outputFileName)
                .setAggregationMappingFile(commandOptions.aggregationMappingFile);

        return openCGAClient.getVariantClient().runStats(variantStatsAnalysisParams, queryParams);
    }
    
}
