/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.core.response.RestResponse;
import java.lang.Object;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.app.cli.main.options.JobCommandOptions;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.file.FileContent;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.job.JobAclUpdateParams;
import org.opencb.opencga.core.models.job.JobCreateParams;
import org.opencb.opencga.core.models.job.JobRetryParams;
import org.opencb.opencga.core.models.job.JobTop;
import org.opencb.opencga.core.models.job.JobUpdateParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-27 13:07:31
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class JobCommandExecutor extends OpencgaCommandExecutor {

    private JobCommandOptions jobCommandOptions;

    public JobCommandExecutor(JobCommandOptions jobCommandOptions) {
        super(jobCommandOptions.commonCommandOptions);
        this.jobCommandOptions = jobCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Jobs command line");
        
        String subCommandString = getParsedSubCommand(jobCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "updateAcl":
                queryResponse = updateAcl();
                break;
            case "aggregationStats":
                queryResponse = aggregationStats();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "retry":
                queryResponse = retry();
                break;
            case "search":
                queryResponse = search();
                break;
            case "top":
                queryResponse = top();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "update":
                queryResponse = update();
                break;
            case "headLog":
                queryResponse = headLog();
                break;
            case "tailLog":
                queryResponse = tailLog();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<ObjectMap> updateAcl() throws ClientException {
        logger.debug("Executing updateAcl in Job command line");

        JobCommandOptions.UpdateAclCommandOptions commandOptions = jobCommandOptions.updateAclCommandOptions;
        JobAclUpdateParams jobAclUpdateParams = new JobAclUpdateParams()
                .setJob(commandOptions.job);

        return openCGAClient.getJobClient().updateAcl(commandOptions.members,commandOptions.action, jobAclUpdateParams);
    }
    
    private RestResponse<FacetField> aggregationStats() throws ClientException {
        logger.debug("Executing aggregationStats in Job command line");

        JobCommandOptions.AggregationStatsCommandOptions commandOptions = jobCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        queryParams.putIfNotEmpty("toolScope", commandOptions.toolScope);
        queryParams.putIfNotEmpty("toolType", commandOptions.toolType);
        queryParams.putIfNotEmpty("toolResource", commandOptions.toolResource);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("executorId", commandOptions.executorId);
        queryParams.putIfNotEmpty("executorFramework", commandOptions.executorFramework);
        queryParams.putIfNotEmpty("creationYear", commandOptions.creationYear);
        queryParams.putIfNotEmpty("creationMonth", commandOptions.creationMonth);
        queryParams.putIfNotEmpty("creationDay", commandOptions.creationDay);
        queryParams.putIfNotEmpty("creationDayOfWeek", commandOptions.creationDayOfWeek);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("defaultParam", commandOptions.defaultParam);
        queryParams.putIfNotEmpty("field", commandOptions.field);

        return openCGAClient.getJobClient().aggregationStats(queryParams);
    }
    
    private RestResponse<Job> create() throws ClientException {
        logger.debug("Executing create in Job command line");

        JobCommandOptions.CreateCommandOptions commandOptions = jobCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        JobCreateParams jobCreateParams = new JobCreateParams()
                .setId(commandOptions.id)
                .setDescription(commandOptions.description)
                .setCommandLine(commandOptions.commandLine)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate);

        return openCGAClient.getJobClient().create(jobCreateParams, queryParams);
    }
    
    private RestResponse<ObjectMap> distinct() throws ClientException {
        logger.debug("Executing distinct in Job command line");

        JobCommandOptions.DistinctCommandOptions commandOptions = jobCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("otherStudies", commandOptions.otherStudies);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("input", commandOptions.input);
        queryParams.putIfNotEmpty("output", commandOptions.output);
        queryParams.putIfNotEmpty("executionStart", commandOptions.executionStart);
        queryParams.putIfNotEmpty("executionEnd", commandOptions.executionEnd);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);

        return openCGAClient.getJobClient().distinct(commandOptions.field, queryParams);
    }
    
    private RestResponse<Job> retry() throws ClientException {
        logger.debug("Executing retry in Job command line");

        JobCommandOptions.RetryCommandOptions commandOptions = jobCommandOptions.retryCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        JobRetryParams jobRetryParams = new JobRetryParams()
                .setJob(commandOptions.job);

        return openCGAClient.getJobClient().retry(jobRetryParams, queryParams);
    }
    
    private RestResponse<Job> search() throws ClientException {
        logger.debug("Executing search in Job command line");

        JobCommandOptions.SearchCommandOptions commandOptions = jobCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("otherStudies", commandOptions.otherStudies);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotNull("visited", commandOptions.visited);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("input", commandOptions.input);
        queryParams.putIfNotEmpty("output", commandOptions.output);
        queryParams.putIfNotEmpty("executionStart", commandOptions.executionStart);
        queryParams.putIfNotEmpty("executionEnd", commandOptions.executionEnd);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);

        return openCGAClient.getJobClient().search(queryParams);
    }
    
    private RestResponse<JobTop> top() throws ClientException {
        logger.debug("Executing top in Job command line");

        JobCommandOptions.TopCommandOptions commandOptions = jobCommandOptions.topCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("userId", commandOptions.userId);
        queryParams.putIfNotEmpty("toolId", commandOptions.toolId);

        return openCGAClient.getJobClient().top(queryParams);
    }
    
    private RestResponse<ObjectMap> acl() throws ClientException {
        logger.debug("Executing acl in Job command line");

        JobCommandOptions.AclCommandOptions commandOptions = jobCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getJobClient().acl(commandOptions.jobs, queryParams);
    }
    
    private RestResponse<Job> delete() throws ClientException {
        logger.debug("Executing delete in Job command line");

        JobCommandOptions.DeleteCommandOptions commandOptions = jobCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getJobClient().delete(commandOptions.jobs, queryParams);
    }
    
    private RestResponse<Job> info() throws ClientException {
        logger.debug("Executing info in Job command line");

        JobCommandOptions.InfoCommandOptions commandOptions = jobCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);

        return openCGAClient.getJobClient().info(commandOptions.jobs, queryParams);
    }
    
    private RestResponse<Job> update() throws ClientException {
        logger.debug("Executing update in Job command line");

        JobCommandOptions.UpdateCommandOptions commandOptions = jobCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        JobUpdateParams jobUpdateParams = new JobUpdateParams()
                .setDescription(commandOptions.description);

        return openCGAClient.getJobClient().update(commandOptions.jobs, jobUpdateParams, queryParams);
    }
    
    private RestResponse<FileContent> headLog() throws ClientException {
        logger.debug("Executing headLog in Job command line");

        JobCommandOptions.HeadLogCommandOptions commandOptions = jobCommandOptions.headLogCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("type", commandOptions.type);

        return openCGAClient.getJobClient().headLog(commandOptions.job, queryParams);
    }
    
    private RestResponse<FileContent> tailLog() throws ClientException {
        logger.debug("Executing tailLog in Job command line");

        JobCommandOptions.TailLogCommandOptions commandOptions = jobCommandOptions.tailLogCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("type", commandOptions.type);

        return openCGAClient.getJobClient().tailLog(commandOptions.job, queryParams);
    }
    
}
