/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.core.response.RestResponse;
import java.io.DataInputStream;
import java.lang.Object;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.app.cli.main.options.FileCommandOptions;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.catalog.utils.ParamUtils.CompleteUpdateAction;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.common.TsvAnnotationParams;
import org.opencb.opencga.core.models.file.File;
import org.opencb.opencga.core.models.file.FileAclUpdateParams;
import org.opencb.opencga.core.models.file.FileContent;
import org.opencb.opencga.core.models.file.FileCreateParams;
import org.opencb.opencga.core.models.file.FileFetch;
import org.opencb.opencga.core.models.file.FileLinkParams;
import org.opencb.opencga.core.models.file.FileLinkToolParams;
import org.opencb.opencga.core.models.file.FileTree;
import org.opencb.opencga.core.models.file.FileUpdateParams;
import org.opencb.opencga.core.models.file.PostLinkToolParams;
import org.opencb.opencga.core.models.job.Job;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-27 13:07:31
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class FileCommandExecutor extends OpencgaCommandExecutor {

    private FileCommandOptions fileCommandOptions;

    public FileCommandExecutor(FileCommandOptions fileCommandOptions) {
        super(fileCommandOptions.commonCommandOptions);
        this.fileCommandOptions = fileCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Files command line");
        
        String subCommandString = getParsedSubCommand(fileCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "updateAcl":
                queryResponse = updateAcl();
                break;
            case "aggregationStats":
                queryResponse = aggregationStats();
                break;
            case "loadAnnotationSets":
                queryResponse = loadAnnotationSets();
                break;
            case "bioformats":
                queryResponse = bioformats();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "fetch":
                queryResponse = fetch();
                break;
            case "formats":
                queryResponse = formats();
                break;
            case "link":
                queryResponse = link();
                break;
            case "runLink":
                queryResponse = runLink();
                break;
            case "runPostlink":
                queryResponse = runPostlink();
                break;
            case "search":
                queryResponse = search();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "unlink":
                queryResponse = unlink();
                break;
            case "update":
                queryResponse = update();
                break;
            case "updateAnnotations":
                queryResponse = updateAnnotations();
                break;
            case "download":
                queryResponse = download();
                break;
            case "grep":
                queryResponse = grep();
                break;
            case "head":
                queryResponse = head();
                break;
            case "image":
                queryResponse = image();
                break;
            case "refresh":
                queryResponse = refresh();
                break;
            case "tail":
                queryResponse = tail();
                break;
            case "list":
                queryResponse = list();
                break;
            case "tree":
                queryResponse = tree();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<ObjectMap> updateAcl() throws ClientException {
        logger.debug("Executing updateAcl in File command line");

        FileCommandOptions.UpdateAclCommandOptions commandOptions = fileCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        FileAclUpdateParams fileAclUpdateParams = new FileAclUpdateParams()
                .setFile(commandOptions.file)
                .setSample(commandOptions.sample);

        return openCGAClient.getFileClient().updateAcl(commandOptions.members,commandOptions.action, fileAclUpdateParams, queryParams);
    }
    
    private RestResponse<FacetField> aggregationStats() throws ClientException {
        logger.debug("Executing aggregationStats in File command line");

        FileCommandOptions.AggregationStatsCommandOptions commandOptions = fileCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("format", commandOptions.format);
        queryParams.putIfNotEmpty("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("creationYear", commandOptions.creationYear);
        queryParams.putIfNotEmpty("creationMonth", commandOptions.creationMonth);
        queryParams.putIfNotEmpty("creationDay", commandOptions.creationDay);
        queryParams.putIfNotEmpty("creationDayOfWeek", commandOptions.creationDayOfWeek);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("external", commandOptions.external);
        queryParams.putIfNotEmpty("size", commandOptions.size);
        queryParams.putIfNotEmpty("software", commandOptions.software);
        queryParams.putIfNotEmpty("experiment", commandOptions.experiment);
        queryParams.putIfNotEmpty("numSamples", commandOptions.numSamples);
        queryParams.putIfNotEmpty("numRelatedFiles", commandOptions.numRelatedFiles);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotNull("defaultParam", commandOptions.defaultParam);
        queryParams.putIfNotEmpty("field", commandOptions.field);

        return openCGAClient.getFileClient().aggregationStats(queryParams);
    }
    
    private RestResponse<Job> loadAnnotationSets() throws ClientException {
        logger.debug("Executing loadAnnotationSets in File command line");

        FileCommandOptions.LoadAnnotationSetsCommandOptions commandOptions = fileCommandOptions.loadAnnotationSetsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("parents", commandOptions.parents);
        queryParams.putIfNotEmpty("annotationSetId", commandOptions.annotationSetId);

        TsvAnnotationParams tsvAnnotationParams = new TsvAnnotationParams()
                .setContent(commandOptions.content);

        return openCGAClient.getFileClient().loadAnnotationSets(commandOptions.variableSetId,commandOptions.path, tsvAnnotationParams, queryParams);
    }
    
    private RestResponse<File.Bioformat> bioformats() throws ClientException {
        logger.debug("Executing bioformats in File command line");

        FileCommandOptions.BioformatsCommandOptions commandOptions = fileCommandOptions.bioformatsCommandOptions;
        return openCGAClient.getFileClient().bioformats();
    }
    
    private RestResponse<File> create() throws ClientException {
        logger.debug("Executing create in File command line");

        FileCommandOptions.CreateCommandOptions commandOptions = fileCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        FileCreateParams fileCreateParams = new FileCreateParams()
                .setPath(commandOptions.path)
                .setContent(commandOptions.content)
                .setDescription(commandOptions.description)
                .setParents(commandOptions.parents)
                .setDirectory(commandOptions.directory);

        return openCGAClient.getFileClient().create(fileCreateParams, queryParams);
    }
    
    private RestResponse<ObjectMap> distinct() throws ClientException {
        logger.debug("Executing distinct in File command line");

        FileCommandOptions.DistinctCommandOptions commandOptions = fileCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("path", commandOptions.path);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("format", commandOptions.format);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("directory", commandOptions.directory);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("size", commandOptions.size);
        queryParams.putIfNotEmpty("sampleIds", commandOptions.sampleIds);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);
        queryParams.putIfNotEmpty("release", commandOptions.release);

        return openCGAClient.getFileClient().distinct(commandOptions.field, queryParams);
    }
    
    private RestResponse<Job> fetch() throws ClientException {
        logger.debug("Executing fetch in File command line");

        FileCommandOptions.FetchCommandOptions commandOptions = fileCommandOptions.fetchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        FileFetch fileFetch = new FileFetch()
                .setUrl(commandOptions.url)
                .setPath(commandOptions.path);

        return openCGAClient.getFileClient().fetch(fileFetch, queryParams);
    }
    
    private RestResponse<File.Format> formats() throws ClientException {
        logger.debug("Executing formats in File command line");

        FileCommandOptions.FormatsCommandOptions commandOptions = fileCommandOptions.formatsCommandOptions;
        return openCGAClient.getFileClient().formats();
    }
    
    private RestResponse<File> link() throws ClientException {
        logger.debug("Executing link in File command line");

        FileCommandOptions.LinkCommandOptions commandOptions = fileCommandOptions.linkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("parents", commandOptions.parents);

        FileLinkParams fileLinkParams = new FileLinkParams()
                .setUri(commandOptions.uri)
                .setPath(commandOptions.path)
                .setDescription(commandOptions.description)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate);

        return openCGAClient.getFileClient().link(fileLinkParams, queryParams);
    }
    
    private RestResponse<Job> runLink() throws ClientException {
        logger.debug("Executing runLink in File command line");

        FileCommandOptions.RunLinkCommandOptions commandOptions = fileCommandOptions.runLinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        FileLinkToolParams fileLinkToolParams = new FileLinkToolParams()
                .setPath(commandOptions.path)
                .setDescription(commandOptions.description)
                .setParents(commandOptions.parents);

        return openCGAClient.getFileClient().runLink(fileLinkToolParams, queryParams);
    }
    
    private RestResponse<Job> runPostlink() throws ClientException {
        logger.debug("Executing runPostlink in File command line");

        FileCommandOptions.RunPostlinkCommandOptions commandOptions = fileCommandOptions.runPostlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        PostLinkToolParams postLinkToolParams = new PostLinkToolParams();

        return openCGAClient.getFileClient().runPostlink(postLinkToolParams, queryParams);
    }
    
    private RestResponse<File> search() throws ClientException {
        logger.debug("Executing search in File command line");

        FileCommandOptions.SearchCommandOptions commandOptions = fileCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("path", commandOptions.path);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("format", commandOptions.format);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("internalIndexStatus", commandOptions.internalIndexStatus);
        queryParams.putIfNotEmpty("directory", commandOptions.directory);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("size", commandOptions.size);
        queryParams.putIfNotEmpty("sampleIds", commandOptions.sampleIds);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);
        queryParams.putIfNotEmpty("release", commandOptions.release);

        return openCGAClient.getFileClient().search(queryParams);
    }
    
    
    private RestResponse<ObjectMap> acl() throws ClientException {
        logger.debug("Executing acl in File command line");

        FileCommandOptions.AclCommandOptions commandOptions = fileCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getFileClient().acl(commandOptions.files, queryParams);
    }
    
    private RestResponse<Job> delete() throws ClientException {
        logger.debug("Executing delete in File command line");

        FileCommandOptions.DeleteCommandOptions commandOptions = fileCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipTrash", commandOptions.skipTrash);

        return openCGAClient.getFileClient().delete(commandOptions.files, queryParams);
    }
    
    private RestResponse<File> info() throws ClientException {
        logger.debug("Executing info in File command line");

        FileCommandOptions.InfoCommandOptions commandOptions = fileCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);

        return openCGAClient.getFileClient().info(commandOptions.files, queryParams);
    }
    
    private RestResponse<Job> unlink() throws ClientException {
        logger.debug("Executing unlink in File command line");

        FileCommandOptions.UnlinkCommandOptions commandOptions = fileCommandOptions.unlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().unlink(commandOptions.files, queryParams);
    }
    
    private RestResponse<File> update() throws ClientException {
        logger.debug("Executing update in File command line");

        FileCommandOptions.UpdateCommandOptions commandOptions = fileCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("sampleIdsAction", commandOptions.sampleIdsAction);
        queryParams.putIfNotNull("annotationSetsAction", commandOptions.annotationSetsAction);
        queryParams.putIfNotNull("relatedFilesAction", commandOptions.relatedFilesAction);
        queryParams.putIfNotNull("tagsAction", commandOptions.tagsAction);

        FileUpdateParams fileUpdateParams = new FileUpdateParams()
                .setName(commandOptions.name)
                .setDescription(commandOptions.description)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate)
                .setChecksum(commandOptions.checksum)
                .setSize(commandOptions.size);

        return openCGAClient.getFileClient().update(commandOptions.files, fileUpdateParams, queryParams);
    }
    
    private RestResponse<File> updateAnnotations() throws ClientException {
        logger.debug("Executing updateAnnotations in File command line");

        FileCommandOptions.UpdateAnnotationsCommandOptions commandOptions = fileCommandOptions.updateAnnotationsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("action", commandOptions.action);

        ObjectMap map = new ObjectMap();

        return openCGAClient.getFileClient().updateAnnotations(commandOptions.file,commandOptions.annotationSet, map, queryParams);
    }
    
    private RestResponse<DataInputStream> download() throws ClientException {
        logger.debug("Executing download in File command line");

        FileCommandOptions.DownloadCommandOptions commandOptions = fileCommandOptions.downloadCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().download(commandOptions.file, queryParams);
    }
    
    private RestResponse<FileContent> grep() throws ClientException {
        logger.debug("Executing grep in File command line");

        FileCommandOptions.GrepCommandOptions commandOptions = fileCommandOptions.grepCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("pattern", commandOptions.pattern);
        queryParams.putIfNotNull("ignoreCase", commandOptions.ignoreCase);
        queryParams.putIfNotNull("maxCount", commandOptions.maxCount);

        return openCGAClient.getFileClient().grep(commandOptions.file, queryParams);
    }
    
    private RestResponse<FileContent> head() throws ClientException {
        logger.debug("Executing head in File command line");

        FileCommandOptions.HeadCommandOptions commandOptions = fileCommandOptions.headCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().head(commandOptions.file, queryParams);
    }
    
    private RestResponse<FileContent> image() throws ClientException {
        logger.debug("Executing image in File command line");

        FileCommandOptions.ImageCommandOptions commandOptions = fileCommandOptions.imageCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().image(commandOptions.file, queryParams);
    }
    
    private RestResponse<File> refresh() throws ClientException {
        logger.debug("Executing refresh in File command line");

        FileCommandOptions.RefreshCommandOptions commandOptions = fileCommandOptions.refreshCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().refresh(commandOptions.file, queryParams);
    }
    
    private RestResponse<FileContent> tail() throws ClientException {
        logger.debug("Executing tail in File command line");

        FileCommandOptions.TailCommandOptions commandOptions = fileCommandOptions.tailCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().tail(commandOptions.file, queryParams);
    }
    
    private RestResponse<File> list() throws ClientException {
        logger.debug("Executing list in File command line");

        FileCommandOptions.ListCommandOptions commandOptions = fileCommandOptions.listCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().list(commandOptions.folder, queryParams);
    }
    
    private RestResponse<FileTree> tree() throws ClientException {
        logger.debug("Executing tree in File command line");

        FileCommandOptions.TreeCommandOptions commandOptions = fileCommandOptions.treeCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("maxDepth", commandOptions.maxDepth);

        return openCGAClient.getFileClient().tree(commandOptions.folder, queryParams);
    }
    
}
