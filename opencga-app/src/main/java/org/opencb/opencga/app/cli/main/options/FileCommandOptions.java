/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.ParametersDelegate;
import com.beust.jcommander.Parameter;
import static org.opencb.opencga.app.cli.GeneralCliOptions.*;
import com.beust.jcommander.Parameters;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-08-05 17:10:12
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the File command line.
 *    Command line version: 2.1.0
 *    PATH: files
 */
@Parameters(commandNames = {"files"}, commandDescription = "File commands")
public class FileCommandOptions {

        public JCommander jCommander;
        public CommonCommandOptions commonCommandOptions;

        public UpdateAclCommandOptions updateAclCommandOptions;
        public AggregationStatsCommandOptions aggregationStatsCommandOptions;
        public LoadAnnotationSetsCommandOptions loadAnnotationSetsCommandOptions;
        public BioformatsCommandOptions bioformatsCommandOptions;
        public CreateCommandOptions createCommandOptions;
        public DistinctCommandOptions distinctCommandOptions;
        public FetchCommandOptions fetchCommandOptions;
        public FormatsCommandOptions formatsCommandOptions;
        public LinkCommandOptions linkCommandOptions;
        public RunLinkCommandOptions runLinkCommandOptions;
        public RunPostlinkCommandOptions runPostlinkCommandOptions;
        public SearchCommandOptions searchCommandOptions;
        public AclCommandOptions aclCommandOptions;
        public DeleteCommandOptions deleteCommandOptions;
        public InfoCommandOptions infoCommandOptions;
        public UnlinkCommandOptions unlinkCommandOptions;
        public UpdateCommandOptions updateCommandOptions;
        public UpdateAnnotationsCommandOptions updateAnnotationsCommandOptions;
        public DownloadCommandOptions downloadCommandOptions;
        public GrepCommandOptions grepCommandOptions;
        public HeadCommandOptions headCommandOptions;
        public ImageCommandOptions imageCommandOptions;
        public RefreshCommandOptions refreshCommandOptions;
        public TailCommandOptions tailCommandOptions;
        public ListCommandOptions listCommandOptions;
        public TreeCommandOptions treeCommandOptions;


    public FileCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        this.jCommander = jCommander;
        this.commonCommandOptions = commonCommandOptions;
        this.updateAclCommandOptions = new UpdateAclCommandOptions();
        this.aggregationStatsCommandOptions = new AggregationStatsCommandOptions();
        this.loadAnnotationSetsCommandOptions = new LoadAnnotationSetsCommandOptions();
        this.bioformatsCommandOptions = new BioformatsCommandOptions();
        this.createCommandOptions = new CreateCommandOptions();
        this.distinctCommandOptions = new DistinctCommandOptions();
        this.fetchCommandOptions = new FetchCommandOptions();
        this.formatsCommandOptions = new FormatsCommandOptions();
        this.linkCommandOptions = new LinkCommandOptions();
        this.runLinkCommandOptions = new RunLinkCommandOptions();
        this.runPostlinkCommandOptions = new RunPostlinkCommandOptions();
        this.searchCommandOptions = new SearchCommandOptions();
        this.aclCommandOptions = new AclCommandOptions();
        this.deleteCommandOptions = new DeleteCommandOptions();
        this.infoCommandOptions = new InfoCommandOptions();
        this.unlinkCommandOptions = new UnlinkCommandOptions();
        this.updateCommandOptions = new UpdateCommandOptions();
        this.updateAnnotationsCommandOptions = new UpdateAnnotationsCommandOptions();
        this.downloadCommandOptions = new DownloadCommandOptions();
        this.grepCommandOptions = new GrepCommandOptions();
        this.headCommandOptions = new HeadCommandOptions();
        this.imageCommandOptions = new ImageCommandOptions();
        this.refreshCommandOptions = new RefreshCommandOptions();
        this.tailCommandOptions = new TailCommandOptions();
        this.listCommandOptions = new ListCommandOptions();
        this.treeCommandOptions = new TreeCommandOptions();
    
    }
    
    
    @Parameters(commandNames = {"update-acl"}, commandDescription = "Update the set of permissions granted for the member.")
    public class UpdateAclCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--members"}, description = "Comma separated list of user or group ids", required = true, arity = 1)
        public String members; 
    
        @Parameter(names = {"--action"}, description = "Action to be performed [ADD, SET, REMOVE or RESET].", required = true, arity = 1)
        public String action; 
    
  }
  
  
    @Parameters(commandNames = {"aggregation-stats"}, commandDescription = "Fetch catalog file stats.")
    public class AggregationStatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--name"}, description = "Name", required = false, arity = 1)
        public String name; 
    
        @Parameter(names = {"--type"}, description = "Type", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--format"}, description = "Format", required = false, arity = 1)
        public String format; 
    
        @Parameter(names = {"--bioformat"}, description = "Bioformat", required = false, arity = 1)
        public String bioformat; 
    
        @Parameter(names = {"--creation-year"}, description = "Creation year", required = false, arity = 1)
        public String creationYear; 
    
        @Parameter(names = {"--creation-month"}, description = "Creation month (JANUARY, FEBRUARY...)", required = false, arity = 1)
        public String creationMonth; 
    
        @Parameter(names = {"--creation-day"}, description = "Creation day", required = false, arity = 1)
        public String creationDay; 
    
        @Parameter(names = {"--creation-day-of-week"}, description = "Creation day of week (MONDAY, TUESDAY...)",
                              required = false, arity = 1)
        public String creationDayOfWeek; 
    
        @Parameter(names = {"--status"}, description = "Status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--release"}, description = "Release", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--external"}, description = "External", required = false, arity = 1)
        public boolean external; 
    
        @Parameter(names = {"--size"}, description = "Size", required = false, arity = 1)
        public String size; 
    
        @Parameter(names = {"--software"}, description = "Software", required = false, arity = 1)
        public String software; 
    
        @Parameter(names = {"--experiment"}, description = "Experiment", required = false, arity = 1)
        public String experiment; 
    
        @Parameter(names = {"--num-samples"}, description = "Number of samples", required = false, arity = 1)
        public String numSamples; 
    
        @Parameter(names = {"--num-related-files"}, description = "Number of related files", required = false, arity = 1)
        public String numRelatedFiles; 
    
        @Parameter(names = {"--annotation"}, description = "Annotation filters. Example: age>30;gender=FEMALE. For more information, "
                              + "please visit http://docs.opencb.org/display/opencga/AnnotationSets+1.4.0", required = false, arity = 1)
        public String annotation; 
    
        @Parameter(names = {"--default"}, description = "Calculate default stats", required = false, arity = 1)
        public boolean defaultParam; 
    
        @Parameter(names = {"--field"}, description = "List of fields separated by semicolons, e.g.: studies;type. For nested fields use "
                              + ">>, e.g.: studies>>biotype;type;numSamples[0..10]:1", required = false, arity = 1)
        public String field; 
    
  }
  
  
    @Parameters(commandNames = {"load-annotation-sets"}, commandDescription = "Load annotation sets from a TSV file.")
    public class LoadAnnotationSetsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--variable-set-id"}, description = "Variable set ID or name", required = true, arity = 1)
        public String variableSetId; 
    
        @Parameter(names = {"--path"}, description = "Path where the TSV file is located in OpenCGA or where it should be located.",
                              required = true, arity = 1)
        public String path; 
    
        @Parameter(names = {"--parents"}, description = "Flag indicating whether to create parent directories if they don't exist (only "
                              + "when TSV file was not previously associated).", required = false, arity = 1)
        public boolean parents; 
    
        @Parameter(names = {"--annotation-set-id"}, description = "Annotation set id. If not provided, variableSetId will be used.",
                              required = false, arity = 1)
        public String annotationSetId; 
    
  }
  
  
    @Parameters(commandNames = {"bioformats"}, commandDescription = "List of accepted file bioformats.")
    public class BioformatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
  }
  
  
    @Parameters(commandNames = {"create"}, commandDescription = "Create file or folder.")
    public class CreateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"distinct"}, commandDescription = "File distinct method.")
    public class DistinctCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--name"}, description = "Comma separated list of file names", required = false, arity = 1)
        public String name; 
    
        @Parameter(names = {"--path"}, description = "Comma separated list of paths", required = false, arity = 1)
        public String path; 
    
        @Parameter(names = {"--type"}, description = "File type, either FILE or DIRECTORY", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--bioformat"}, description = "Comma separated Bioformat values. For existing Bioformats see "
                              + "files/bioformats", required = false, arity = 1)
        public String bioformat; 
    
        @Parameter(names = {"--format"}, description = "Comma separated Format values. For existing Formats see files/formats",
                              required = false, arity = 1)
        public String format; 
    
        @Parameter(names = {"--status"}, description = "Filter by status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--internal-status"}, description = "Filter by internal status", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--directory"}, description = "Directory under which we want to look for files or folders",
                              required = false, arity = 1)
        public String directory; 
    
        @Parameter(names = {"--creation-date"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, "
                              + "<201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, "
                              + "2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--description"}, description = "Description", required = false, arity = 1)
        public String description; 
    
        @Parameter(names = {"--tags"}, description = "Tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--size"}, description = "File size", required = false, arity = 1)
        public String size; 
    
        @Parameter(names = {"--sample-ids"}, description = "Comma separated list sample IDs or UUIDs up to a maximum of 100",
                              required = false, arity = 1)
        public String sampleIds; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID that created the file(s) or folder(s)", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--annotation"}, description = "Annotation filters. Example: age>30;gender=FEMALE. For more information, "
                              + "please visit http://docs.opencb.org/display/opencga/AnnotationSets+1.4.0", required = false, arity = 1)
        public String annotation; 
    
        @Parameter(names = {"--acl"}, description = "Filter entries for which a user has the provided permissions. Format: "
                              + "acl={user}:{permissions}. Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which "
                              + "user john has both WRITE and WRITE_ANNOTATIONS permissions. Only study owners or administrators can "
                              + "query by this field. ", required = false, arity = 1)
        public String acl; 
    
        @Parameter(names = {"--attributes"}, description = "Text attributes (Format: sex=male,age>20 ...)", required = false, arity = 1)
        public String attributes; 
    
        @Parameter(names = {"--release"}, description = "Release when it was created", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--field"}, description = "Field for which to obtain the distinct values", required = true, arity = 1)
        public String field; 
    
  }
  
  
    @Parameters(commandNames = {"fetch"}, commandDescription = "Download an external file to catalog and register it.")
    public class FetchCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"formats"}, commandDescription = "List of accepted file formats.")
    public class FormatsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
  }
  
  
    @Parameters(commandNames = {"link"}, commandDescription = "Link an external file into catalog.")
    public class LinkCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--parents"}, description = "Create the parent directories if they do not exist", required = false, arity = 1)
        public boolean parents; 
    
  }
  
  
    @Parameters(commandNames = {"run-link"}, commandDescription = "Link an external file into catalog asynchronously.")
    public class RunLinkCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
  }
  
  
    @Parameters(commandNames = {"run-postlink"}, commandDescription = "Associate non-registered samples for files with high volumes of "
                              + "samples.")
    public class RunPostlinkCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated "
                              + "automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.",
                              required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
  }
  
  
    @Parameters(commandNames = {"search"}, commandDescription = "File search method.")
    public class SearchCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.",
                              required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--flatten-annotations"}, description = "Boolean indicating to flatten the annotations.",
                              required = false, arity = 1)
        public boolean flattenAnnotations; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--name"}, description = "Comma separated list of file names", required = false, arity = 1)
        public String name; 
    
        @Parameter(names = {"--path"}, description = "Comma separated list of paths", required = false, arity = 1)
        public String path; 
    
        @Parameter(names = {"--type"}, description = "File type, either FILE or DIRECTORY", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--bioformat"}, description = "Comma separated Bioformat values. For existing Bioformats see "
                              + "files/bioformats", required = false, arity = 1)
        public String bioformat; 
    
        @Parameter(names = {"--format"}, description = "Comma separated Format values. For existing Formats see files/formats",
                              required = false, arity = 1)
        public String format; 
    
        @Parameter(names = {"--status"}, description = "Filter by status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--internal-status"}, description = "Filter by internal status", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--internal-index-status"}, description = "Filter by internal index status", required = false, arity = 1)
        public String internalIndexStatus; 
    
        @Parameter(names = {"--directory"}, description = "Directory under which we want to look for files or folders",
                              required = false, arity = 1)
        public String directory; 
    
        @Parameter(names = {"--creation-date"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, "
                              + "<201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, "
                              + "2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--description"}, description = "Description", required = false, arity = 1)
        public String description; 
    
        @Parameter(names = {"--tags"}, description = "Tags", required = false, arity = 1)
        public String tags; 
    
        @Parameter(names = {"--size"}, description = "File size", required = false, arity = 1)
        public String size; 
    
        @Parameter(names = {"--sample-ids"}, description = "Comma separated list sample IDs or UUIDs up to a maximum of 100",
                              required = false, arity = 1)
        public String sampleIds; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID that created the file(s) or folder(s)", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--annotation"}, description = "Annotation filters. Example: age>30;gender=FEMALE. For more information, "
                              + "please visit http://docs.opencb.org/display/opencga/AnnotationSets+1.4.0", required = false, arity = 1)
        public String annotation; 
    
        @Parameter(names = {"--acl"}, description = "Filter entries for which a user has the provided permissions. Format: "
                              + "acl={user}:{permissions}. Example: acl=john:WRITE,WRITE_ANNOTATIONS will return all entries for which "
                              + "user john has both WRITE and WRITE_ANNOTATIONS permissions. Only study owners or administrators can "
                              + "query by this field. ", required = false, arity = 1)
        public String acl; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, arity = 1)
        public boolean deleted; 
    
        @Parameter(names = {"--attributes"}, description = "Text attributes (Format: sex=male,age>20 ...)", required = false, arity = 1)
        public String attributes; 
    
        @Parameter(names = {"--release"}, description = "Release when it was created", required = false, arity = 1)
        public String release; 
    
  }
  
  

//excluded upload

    @Parameters(commandNames = {"acl"}, commandDescription = "Return the acl defined for the file or folder. If member is provided, it "
                              + "will only return the acl for the member.")
    public class AclCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--files"}, description = "Comma separated list of file IDs or names up to a maximum of 100",
                              required = true, arity = 1)
        public String files; 
    
        @Parameter(names = {"--study"}, description = "Comma separated list of Studies [[user@]project:]study where study and project "
                              + "can be either the ID or UUID up to a maximum of 100", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--member"}, description = "User or group id", required = false, arity = 1)
        public String member; 
    
        @Parameter(names = {"--silent"}, description = "Boolean to retrieve all possible entries that are queried for, false to raise an "
                              + "exception whenever one of the entries looked for cannot be shown for whichever reason",
                              required = false, arity = 1)
        public boolean silent; 
    
  }
  
  
    @Parameters(commandNames = {"delete"}, commandDescription = "Delete existing files and folders.")
    public class DeleteCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--files"}, description = "Comma separated list of file ids, names or paths.", required = false, arity = 1)
        public String files; 
    
        @Parameter(names = {"--skip-trash"}, description = "Skip trash and delete the files/folders from disk directly (CANNOT BE "
                              + "RECOVERED)", required = false, arity = 1)
        public boolean skipTrash; 
    
  }
  
  
    @Parameters(commandNames = {"info"}, commandDescription = "File info.")
    public class InfoCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--flatten-annotations"}, description = "Flatten the annotations?", required = false, arity = 1)
        public boolean flattenAnnotations; 
    
        @Parameter(names = {"--files"}, description = "Comma separated list of file IDs or names up to a maximum of 100",
                              required = false, arity = 1)
        public String files; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted files", required = false, arity = 1)
        public boolean deleted; 
    
  }
  
  
    @Parameters(commandNames = {"unlink"}, commandDescription = "Unlink linked files and folders.")
    public class UnlinkCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--files"}, description = "Comma separated list of file ids, names or paths.", required = false, arity = 1)
        public String files; 
    
  }
  
  
    @Parameters(commandNames = {"update"}, commandDescription = "Update some file attributes.")
    public class UpdateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--files"}, description = "Comma separated list of file ids, names or paths. Paths must be separated by : "
                              + "instead of /", required = false, arity = 1)
        public String files; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--sample-ids-action"}, description = "Action to be performed if the array of samples is being updated.",
                              required = false, arity = 1)
        public String sampleIdsAction; 
    
        @Parameter(names = {"--annotation-sets-action"}, description = "Action to be performed if the array of annotationSets is being "
                              + "updated.", required = false, arity = 1)
        public String annotationSetsAction; 
    
        @Parameter(names = {"--related-files-action"}, description = "Action to be performed if the array of relatedFiles is being "
                              + "updated.", required = false, arity = 1)
        public String relatedFilesAction; 
    
        @Parameter(names = {"--tags-action"}, description = "Action to be performed if the array of tags is being updated.",
                              required = false, arity = 1)
        public String tagsAction; 
    
  }
  
  
    @Parameters(commandNames = {"update-annotations"}, commandDescription = "Update annotations from an annotationSet.")
    public class UpdateAnnotationsCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--file"}, description = "File id, name or path. Paths must be separated by : instead of /",
                              required = true, arity = 1)
        public String file; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--annotation-set"}, description = "AnnotationSet ID to be updated.", required = false, arity = 1)
        public String annotationSet; 
    
        @Parameter(names = {"--action"}, description = "Action to be performed: ADD to add new annotations; REPLACE to replace the value "
                              + "of an already existing annotation; SET to set the new list of annotations removing any possible old "
                              + "annotations; REMOVE to remove some annotations; RESET to set some annotations to the default value "
                              + "configured in the corresponding variables of the VariableSet if any.", required = false, arity = 1)
        public String action; 
    
  }
  
  
    @Parameters(commandNames = {"download"}, commandDescription = "Download file.")
    public class DownloadCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--file"}, description = "File id, name or path. Paths must be separated by : instead of /",
                              required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"grep"}, commandDescription = "Filter lines of the file containing the pattern.")
    public class GrepCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--file"}, description = "File uuid, id, or name.", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--pattern"}, description = "String pattern", required = false, arity = 1)
        public String pattern; 
    
        @Parameter(names = {"--ignore-case"}, description = "Flag to perform a case insensitive search", required = false, arity = 1)
        public boolean ignoreCase; 
    
        @Parameter(names = {"--max-count"}, description = "Stop reading a file after 'n' matching lines. 0 means no limit.",
                              required = false, arity = 1)
        public int maxCount; 
    
  }
  
  
    @Parameters(commandNames = {"head"}, commandDescription = "Show the first lines of a file (up to a limit).")
    public class HeadCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--file"}, description = "File uuid, id, or name.", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--offset"}, description = "Starting byte from which the file will be read", required = false, arity = 1)
        public Long offset; 
    
        @Parameter(names = {"--lines"}, description = "Maximum number of lines to be returned up to a maximum of 1000",
                              required = false, arity = 1)
        public int lines; 
    
  }
  
  
    @Parameters(commandNames = {"image"}, commandDescription = "Obtain the base64 content of an image.")
    public class ImageCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--file"}, description = "File ID", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"refresh"}, commandDescription = "Refresh metadata from the selected file or folder. Return updated files.")
    public class RefreshCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--file"}, description = "File id, name or path. Paths must be separated by : instead of /",
                              required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"tail"}, commandDescription = "Show the last lines of a file (up to a limit).")
    public class TailCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--file"}, description = "File uuid, id, or name.", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--lines"}, description = "Maximum number of lines to be returned up to a maximum of 1000",
                              required = false, arity = 1)
        public int lines; 
    
  }
  
  
    @Parameters(commandNames = {"list"}, commandDescription = "List all the files inside the folder.")
    public class ListCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.",
                              required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--folder"}, description = "Folder ID, name or path", required = false, arity = 1)
        public String folder; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
  }
  
  
    @Parameters(commandNames = {"tree"}, commandDescription = "Obtain a tree view of the files and folders within a folder.")
    public class TreeCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided",
                              required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--folder"}, description = "Folder id or name. Paths must be separated by : instead of /",
                              required = false, arity = 1)
        public String folder; 
    
        @Parameter(names = {"--study"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID",
                              required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--max-depth"}, description = "Maximum depth to get files from", required = false, arity = 1)
        public int maxDepth; 
    
  }
  
  
}
