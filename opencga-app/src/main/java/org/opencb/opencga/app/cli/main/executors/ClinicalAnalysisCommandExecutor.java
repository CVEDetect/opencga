/*
* Copyright 2015-2021 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.biodata.models.clinical.interpretation.ClinicalVariant;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.app.cli.main.options.ClinicalAnalysisCommandOptions;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.catalog.utils.ParamUtils.AddRemoveReplaceAction;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.catalog.utils.ParamUtils.SaveInterpretationAs;
import org.opencb.opencga.catalog.utils.ParamUtils.UpdateAction;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByGeneSummary;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividual;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividualSummary;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByVariant;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByVariantSummary;
import org.opencb.opencga.core.models.analysis.knockout.RgaKnockoutByGene;
import org.opencb.opencga.core.models.clinical.CancerTieringInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysis;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisAclUpdateParams;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisCreateParams;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisUpdateParams;
import org.opencb.opencga.core.models.clinical.Interpretation;
import org.opencb.opencga.core.models.clinical.InterpretationCreateParams;
import org.opencb.opencga.core.models.clinical.InterpretationMergeParams;
import org.opencb.opencga.core.models.clinical.InterpretationUpdateParams;
import org.opencb.opencga.core.models.clinical.RgaAnalysisParams;
import org.opencb.opencga.core.models.clinical.TeamInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.TieringInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.ZettaInterpretationAnalysisParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.study.configuration.ClinicalAnalysisStudyConfiguration;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-09-02 11:54:59
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/

public class ClinicalAnalysisCommandExecutor extends OpencgaCommandExecutor {

    private ClinicalAnalysisCommandOptions clinicalanalysisCommandOptions;

    public ClinicalAnalysisCommandExecutor(ClinicalAnalysisCommandOptions clinicalanalysisCommandOptions) {
        super(clinicalanalysisCommandOptions.commonCommandOptions);
        this.clinicalanalysisCommandOptions = clinicalanalysisCommandOptions;
    }

    @Override
    public void execute() throws Exception {
        logger.debug("Executing Analysis - Clinical command line");
        
        String subCommandString = getParsedSubCommand(clinicalanalysisCommandOptions.jCommander);
        RestResponse queryResponse = null;
        switch (subCommandString) {
            case "update-acl":
                queryResponse = updateAcl();
                break;
            case "update-clinical-configuration":
                queryResponse = updateClinicalConfiguration();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "distinct-interpretation":
                queryResponse = distinctInterpretation();
                break;
            case "search-interpretation":
                queryResponse = searchInterpretation();
                break;
            case "info-interpretation":
                queryResponse = infoInterpretation();
                break;
            case "run-interpreter-cancer-tiering":
                queryResponse = runInterpreterCancerTiering();
                break;
            case "run-interpreter-team":
                queryResponse = runInterpreterTeam();
                break;
            case "run-interpreter-tiering":
                queryResponse = runInterpreterTiering();
                break;
            case "run-interpreter-zetta":
                queryResponse = runInterpreterZetta();
                break;
            case "aggregation-stats-rga":
                queryResponse = aggregationStatsRga();
                break;
            case "query-rga-gene":
                queryResponse = queryRgaGene();
                break;
            case "summary-rga-gene":
                queryResponse = summaryRgaGene();
                break;
            case "run-rga-index":
                queryResponse = runRgaIndex();
                break;
            case "query-rga-individual":
                queryResponse = queryRgaIndividual();
                break;
            case "summary-rga-individual":
                queryResponse = summaryRgaIndividual();
                break;
            case "query-rga-variant":
                queryResponse = queryRgaVariant();
                break;
            case "summary-rga-variant":
                queryResponse = summaryRgaVariant();
                break;
            case "search":
                queryResponse = search();
                break;
            case "actionable-variant":
                queryResponse = actionableVariant();
                break;
            case "query-variant":
                queryResponse = queryVariant();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "update":
                queryResponse = update();
                break;
            case "info":
                queryResponse = info();
                break;
            case "create-interpretation":
                queryResponse = createInterpretation();
                break;
            case "clear-interpretation":
                queryResponse = clearInterpretation();
                break;
            case "delete-interpretation":
                queryResponse = deleteInterpretation();
                break;
            case "merge-interpretation":
                queryResponse = mergeInterpretation();
                break;
            case "revert-interpretation":
                queryResponse = revertInterpretation();
                break;
            case "update-interpretation":
                queryResponse = updateInterpretation();
                break;
            default:
                logger.error("Subcommand not valid");
                 break;
        }
    
        createOutput(queryResponse);
    
    }
    

    private RestResponse<ObjectMap> updateAcl() throws ClientException {
        logger.debug("Executing updateAcl in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.UpdateAclCommandOptions commandOptions = clinicalanalysisCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("propagate", commandOptions.propagate);

        ClinicalAnalysisAclUpdateParams clinicalAnalysisAclUpdateParams = new ClinicalAnalysisAclUpdateParams()
                .setClinicalAnalysis(commandOptions.clinicalAnalysis);

        return openCGAClient.getClinicalAnalysisClient().updateAcl(commandOptions.members,commandOptions.action, clinicalAnalysisAclUpdateParams, queryParams);
    }
    
    private RestResponse<ObjectMap> updateClinicalConfiguration() throws ClientException {
        logger.debug("Executing updateClinicalConfiguration in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.UpdateClinicalConfigurationCommandOptions commandOptions = clinicalanalysisCommandOptions.updateClinicalConfigurationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        ClinicalAnalysisStudyConfiguration clinicalAnalysisStudyConfiguration = new ClinicalAnalysisStudyConfiguration();

        return openCGAClient.getClinicalAnalysisClient().updateClinicalConfiguration(clinicalAnalysisStudyConfiguration, queryParams);
    }
    
    private RestResponse<ClinicalAnalysis> create() throws ClientException {
        logger.debug("Executing create in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.CreateCommandOptions commandOptions = clinicalanalysisCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("createDefaultInterpretation", commandOptions.createDefaultInterpretation);

        ClinicalAnalysisCreateParams clinicalAnalysisCreateParams = new ClinicalAnalysisCreateParams()
                .setId(commandOptions.id)
                .setDescription(commandOptions.description)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate)
                .setDueDate(commandOptions.dueDate);

        return openCGAClient.getClinicalAnalysisClient().create(clinicalAnalysisCreateParams, queryParams);
    }
    
    private RestResponse<ObjectMap> distinct() throws ClientException {
        logger.debug("Executing distinct in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.DistinctCommandOptions commandOptions = clinicalanalysisCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("dueDate", commandOptions.dueDate);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("proband", commandOptions.proband);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("individual", commandOptions.individual);
        queryParams.putIfNotEmpty("analystAssignee", commandOptions.analystAssignee);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        queryParams.putIfNotEmpty("flags", commandOptions.flags);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);

        return openCGAClient.getClinicalAnalysisClient().distinct(commandOptions.field, queryParams);
    }
    
    private RestResponse<ObjectMap> distinctInterpretation() throws ClientException {
        logger.debug("Executing distinctInterpretation in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.DistinctInterpretationCommandOptions commandOptions = clinicalanalysisCommandOptions.distinctInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("clinicalAnalysisId", commandOptions.clinicalAnalysisId);
        queryParams.putIfNotEmpty("analyst", commandOptions.analyst);
        queryParams.putIfNotEmpty("methods", commandOptions.methods);
        queryParams.putIfNotEmpty("primaryFindings", commandOptions.primaryFindings);
        queryParams.putIfNotEmpty("secondaryFindings", commandOptions.secondaryFindings);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);

        return openCGAClient.getClinicalAnalysisClient().distinctInterpretation(commandOptions.field, queryParams);
    }
    
    private RestResponse<Interpretation> searchInterpretation() throws ClientException {
        logger.debug("Executing searchInterpretation in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.SearchInterpretationCommandOptions commandOptions = clinicalanalysisCommandOptions.searchInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("sort", commandOptions.sort);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("clinicalAnalysisId", commandOptions.clinicalAnalysisId);
        queryParams.putIfNotEmpty("analyst", commandOptions.analyst);
        queryParams.putIfNotEmpty("methods", commandOptions.methods);
        queryParams.putIfNotEmpty("primaryFindings", commandOptions.primaryFindings);
        queryParams.putIfNotEmpty("secondaryFindings", commandOptions.secondaryFindings);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);

        return openCGAClient.getClinicalAnalysisClient().searchInterpretation(queryParams);
    }
    
    private RestResponse<Interpretation> infoInterpretation() throws ClientException {
        logger.debug("Executing infoInterpretation in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.InfoInterpretationCommandOptions commandOptions = clinicalanalysisCommandOptions.infoInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);

        return openCGAClient.getClinicalAnalysisClient().infoInterpretation(commandOptions.interpretations, queryParams);
    }
    
    private RestResponse<Job> runInterpreterCancerTiering() throws ClientException {
        logger.debug("Executing runInterpreterCancerTiering in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.RunInterpreterCancerTieringCommandOptions commandOptions = clinicalanalysisCommandOptions.runInterpreterCancerTieringCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        CancerTieringInterpretationAnalysisParams cancerTieringInterpretationAnalysisParams = new CancerTieringInterpretationAnalysisParams()
                .setClinicalAnalysis(commandOptions.clinicalAnalysis)
                .setPrimary(commandOptions.primary);

        return openCGAClient.getClinicalAnalysisClient().runInterpreterCancerTiering(cancerTieringInterpretationAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runInterpreterTeam() throws ClientException {
        logger.debug("Executing runInterpreterTeam in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.RunInterpreterTeamCommandOptions commandOptions = clinicalanalysisCommandOptions.runInterpreterTeamCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        TeamInterpretationAnalysisParams teamInterpretationAnalysisParams = new TeamInterpretationAnalysisParams()
                .setClinicalAnalysis(commandOptions.clinicalAnalysis)
                .setFamilySegregation(commandOptions.familySegregation)
                .setPrimary(commandOptions.primary);

        return openCGAClient.getClinicalAnalysisClient().runInterpreterTeam(teamInterpretationAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runInterpreterTiering() throws ClientException {
        logger.debug("Executing runInterpreterTiering in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.RunInterpreterTieringCommandOptions commandOptions = clinicalanalysisCommandOptions.runInterpreterTieringCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        TieringInterpretationAnalysisParams tieringInterpretationAnalysisParams = new TieringInterpretationAnalysisParams()
                .setClinicalAnalysis(commandOptions.clinicalAnalysis)
                .setPrimary(commandOptions.primary);

        return openCGAClient.getClinicalAnalysisClient().runInterpreterTiering(tieringInterpretationAnalysisParams, queryParams);
    }
    
    private RestResponse<Job> runInterpreterZetta() throws ClientException {
        logger.debug("Executing runInterpreterZetta in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.RunInterpreterZettaCommandOptions commandOptions = clinicalanalysisCommandOptions.runInterpreterZettaCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        ZettaInterpretationAnalysisParams zettaInterpretationAnalysisParams = new ZettaInterpretationAnalysisParams()
                .setClinicalAnalysis(commandOptions.clinicalAnalysis)
                .setRegion(commandOptions.region)
                .setType(commandOptions.type)
                .setStudy(commandOptions.study)
                .setFile(commandOptions.file)
                .setFilter(commandOptions.filter)
                .setQual(commandOptions.qual)
                .setFileData(commandOptions.fileData)
                .setSample(commandOptions.sample)
                .setSampleData(commandOptions.sampleData)
                .setSampleAnnotation(commandOptions.sampleAnnotation)
                .setSampleMetadata(commandOptions.sampleMetadata)
                .setCohort(commandOptions.cohort)
                .setCohortStatsRef(commandOptions.cohortStatsRef)
                .setCohortStatsAlt(commandOptions.cohortStatsAlt)
                .setCohortStatsMaf(commandOptions.cohortStatsMaf)
                .setCohortStatsMgf(commandOptions.cohortStatsMgf)
                .setCohortStatsPass(commandOptions.cohortStatsPass)
                .setScore(commandOptions.score)
                .setFamily(commandOptions.family)
                .setFamilyDisorder(commandOptions.familyDisorder)
                .setFamilySegregation(commandOptions.familySegregation)
                .setFamilyMembers(commandOptions.familyMembers)
                .setFamilyProband(commandOptions.familyProband)
                .setGene(commandOptions.gene)
                .setCt(commandOptions.ct)
                .setXref(commandOptions.xref)
                .setBiotype(commandOptions.biotype)
                .setProteinSubstitution(commandOptions.proteinSubstitution)
                .setConservation(commandOptions.conservation)
                .setPopulationFrequencyAlt(commandOptions.populationFrequencyAlt)
                .setPopulationFrequencyRef(commandOptions.populationFrequencyRef)
                .setPopulationFrequencyMaf(commandOptions.populationFrequencyMaf)
                .setTranscriptFlag(commandOptions.transcriptFlag)
                .setGeneTraitId(commandOptions.geneTraitId)
                .setGo(commandOptions.go)
                .setExpression(commandOptions.expression)
                .setProteinKeyword(commandOptions.proteinKeyword)
                .setDrug(commandOptions.drug)
                .setFunctionalScore(commandOptions.functionalScore)
                .setClinical(commandOptions.clinical)
                .setClinicalSignificance(commandOptions.clinicalSignificance)
                .setClinicalConfirmedStatus(commandOptions.clinicalConfirmedStatus)
                .setCustomAnnotation(commandOptions.customAnnotation)
                .setPanel(commandOptions.panel)
                .setPanelModeOfInheritance(commandOptions.panelModeOfInheritance)
                .setPanelConfidence(commandOptions.panelConfidence)
                .setPanelRoleInCancer(commandOptions.panelRoleInCancer)
                .setTrait(commandOptions.trait)
                .setPrimary(commandOptions.primary);

        return openCGAClient.getClinicalAnalysisClient().runInterpreterZetta(zettaInterpretationAnalysisParams, queryParams);
    }
    
    private RestResponse<FacetField> aggregationStatsRga() throws ClientException {
        logger.debug("Executing aggregationStatsRga in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.AggregationStatsRgaCommandOptions commandOptions = clinicalanalysisCommandOptions.aggregationStatsRgaCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getClinicalAnalysisClient().aggregationStatsRga(commandOptions.field, queryParams);
    }
    
    private RestResponse<RgaKnockoutByGene> queryRgaGene() throws ClientException {
        logger.debug("Executing queryRgaGene in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.QueryRgaGeneCommandOptions commandOptions = clinicalanalysisCommandOptions.queryRgaGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getClinicalAnalysisClient().queryRgaGene(queryParams);
    }
    
    private RestResponse<KnockoutByGeneSummary> summaryRgaGene() throws ClientException {
        logger.debug("Executing summaryRgaGene in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.SummaryRgaGeneCommandOptions commandOptions = clinicalanalysisCommandOptions.summaryRgaGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getClinicalAnalysisClient().summaryRgaGene(queryParams);
    }
    
    private RestResponse<Job> runRgaIndex() throws ClientException {
        logger.debug("Executing runRgaIndex in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.RunRgaIndexCommandOptions commandOptions = clinicalanalysisCommandOptions.runRgaIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotNull("auxiliarIndex", commandOptions.auxiliarIndex);

        RgaAnalysisParams rgaAnalysisParams = new RgaAnalysisParams()
                .setFile(commandOptions.file);

        return openCGAClient.getClinicalAnalysisClient().runRgaIndex(rgaAnalysisParams, queryParams);
    }
    
    private RestResponse<KnockoutByIndividual> queryRgaIndividual() throws ClientException {
        logger.debug("Executing queryRgaIndividual in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.QueryRgaIndividualCommandOptions commandOptions = clinicalanalysisCommandOptions.queryRgaIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getClinicalAnalysisClient().queryRgaIndividual(queryParams);
    }
    
    private RestResponse<KnockoutByIndividualSummary> summaryRgaIndividual() throws ClientException {
        logger.debug("Executing summaryRgaIndividual in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.SummaryRgaIndividualCommandOptions commandOptions = clinicalanalysisCommandOptions.summaryRgaIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getClinicalAnalysisClient().summaryRgaIndividual(queryParams);
    }
    
    private RestResponse<KnockoutByVariant> queryRgaVariant() throws ClientException {
        logger.debug("Executing queryRgaVariant in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.QueryRgaVariantCommandOptions commandOptions = clinicalanalysisCommandOptions.queryRgaVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getClinicalAnalysisClient().queryRgaVariant(queryParams);
    }
    
    private RestResponse<KnockoutByVariantSummary> summaryRgaVariant() throws ClientException {
        logger.debug("Executing summaryRgaVariant in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.SummaryRgaVariantCommandOptions commandOptions = clinicalanalysisCommandOptions.summaryRgaVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getClinicalAnalysisClient().summaryRgaVariant(queryParams);
    }
    
    private RestResponse<ClinicalAnalysis> search() throws ClientException {
        logger.debug("Executing search in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.SearchCommandOptions commandOptions = clinicalanalysisCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("dueDate", commandOptions.dueDate);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("proband", commandOptions.proband);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("individual", commandOptions.individual);
        queryParams.putIfNotEmpty("analystAssignee", commandOptions.analystAssignee);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        queryParams.putIfNotEmpty("flags", commandOptions.flags);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);

        return openCGAClient.getClinicalAnalysisClient().search(queryParams);
    }
    
    private RestResponse<ClinicalVariant> actionableVariant() throws ClientException {
        logger.debug("Executing actionableVariant in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.ActionableVariantCommandOptions commandOptions = clinicalanalysisCommandOptions.actionableVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);

        return openCGAClient.getClinicalAnalysisClient().actionableVariant(queryParams);
    }
    
    private RestResponse<ClinicalVariant> queryVariant() throws ClientException {
        logger.debug("Executing queryVariant in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.QueryVariantCommandOptions commandOptions = clinicalanalysisCommandOptions.queryVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("approximateCount", commandOptions.approximateCount);
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);

        return openCGAClient.getClinicalAnalysisClient().queryVariant(queryParams);
    }
    
    private RestResponse<ObjectMap> acl() throws ClientException {
        logger.debug("Executing acl in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.AclCommandOptions commandOptions = clinicalanalysisCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getClinicalAnalysisClient().acl(commandOptions.clinicalAnalyses, queryParams);
    }
    
    private RestResponse<ClinicalAnalysis> delete() throws ClientException {
        logger.debug("Executing delete in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.DeleteCommandOptions commandOptions = clinicalanalysisCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("force", commandOptions.force);

        return openCGAClient.getClinicalAnalysisClient().delete(commandOptions.clinicalAnalyses, queryParams);
    }
    
    private RestResponse<ClinicalAnalysis> update() throws ClientException {
        logger.debug("Executing update in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.UpdateCommandOptions commandOptions = clinicalanalysisCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("commentsAction", commandOptions.commentsAction);
        queryParams.putIfNotNull("flagsAction", commandOptions.flagsAction);
        queryParams.putIfNotNull("filesAction", commandOptions.filesAction);

        ClinicalAnalysisUpdateParams clinicalAnalysisUpdateParams = new ClinicalAnalysisUpdateParams()
                .setId(commandOptions.id)
                .setDescription(commandOptions.description)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate)
                .setDueDate(commandOptions.dueDate);

        return openCGAClient.getClinicalAnalysisClient().update(commandOptions.clinicalAnalyses, clinicalAnalysisUpdateParams, queryParams);
    }
    
    private RestResponse<ClinicalAnalysis> info() throws ClientException {
        logger.debug("Executing info in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.InfoCommandOptions commandOptions = clinicalanalysisCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);

        return openCGAClient.getClinicalAnalysisClient().info(commandOptions.clinicalAnalysis, queryParams);
    }
    
    private RestResponse<Interpretation> createInterpretation() throws ClientException {
        logger.debug("Executing createInterpretation in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.CreateInterpretationCommandOptions commandOptions = clinicalanalysisCommandOptions.createInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("setAs", commandOptions.setAs);

        InterpretationCreateParams interpretationCreateParams = new InterpretationCreateParams()
                .setId(commandOptions.id)
                .setDescription(commandOptions.description)
                .setClinicalAnalysisId(commandOptions.clinicalAnalysisId)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate);

        return openCGAClient.getClinicalAnalysisClient().createInterpretation(commandOptions.clinicalAnalysis, interpretationCreateParams, queryParams);
    }
    
    private RestResponse<Interpretation> clearInterpretation() throws ClientException {
        logger.debug("Executing clearInterpretation in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.ClearInterpretationCommandOptions commandOptions = clinicalanalysisCommandOptions.clearInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getClinicalAnalysisClient().clearInterpretation(commandOptions.clinicalAnalysis,commandOptions.interpretations, queryParams);
    }
    
    private RestResponse<Interpretation> deleteInterpretation() throws ClientException {
        logger.debug("Executing deleteInterpretation in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.DeleteInterpretationCommandOptions commandOptions = clinicalanalysisCommandOptions.deleteInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("setAsPrimary", commandOptions.setAsPrimary);

        return openCGAClient.getClinicalAnalysisClient().deleteInterpretation(commandOptions.clinicalAnalysis,commandOptions.interpretations, queryParams);
    }
    
    private RestResponse<Interpretation> mergeInterpretation() throws ClientException {
        logger.debug("Executing mergeInterpretation in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.MergeInterpretationCommandOptions commandOptions = clinicalanalysisCommandOptions.mergeInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("secondaryInterpretationId", commandOptions.secondaryInterpretationId);
        queryParams.putIfNotEmpty("findings", commandOptions.findings);

        InterpretationMergeParams interpretationMergeParams = new InterpretationMergeParams();

        return openCGAClient.getClinicalAnalysisClient().mergeInterpretation(commandOptions.clinicalAnalysis,commandOptions.interpretation, interpretationMergeParams, queryParams);
    }
    
    private RestResponse<Interpretation> revertInterpretation() throws ClientException {
        logger.debug("Executing revertInterpretation in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.RevertInterpretationCommandOptions commandOptions = clinicalanalysisCommandOptions.revertInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getClinicalAnalysisClient().revertInterpretation(commandOptions.clinicalAnalysis,commandOptions.interpretation,commandOptions.version, queryParams);
    }
    
    private RestResponse<Interpretation> updateInterpretation() throws ClientException {
        logger.debug("Executing updateInterpretation in ClinicalAnalysis command line");

        ClinicalAnalysisCommandOptions.UpdateInterpretationCommandOptions commandOptions = clinicalanalysisCommandOptions.updateInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("primaryFindingsAction", commandOptions.primaryFindingsAction);
        queryParams.putIfNotNull("methodsAction", commandOptions.methodsAction);
        queryParams.putIfNotNull("secondaryFindingsAction", commandOptions.secondaryFindingsAction);
        queryParams.putIfNotNull("commentsAction", commandOptions.commentsAction);
        queryParams.putIfNotNull("setAs", commandOptions.setAs);

        InterpretationUpdateParams interpretationUpdateParams = new InterpretationUpdateParams()
                .setId(commandOptions.id)
                .setDescription(commandOptions.description)
                .setCreationDate(commandOptions.creationDate)
                .setModificationDate(commandOptions.modificationDate);

        return openCGAClient.getClinicalAnalysisClient().updateInterpretation(commandOptions.clinicalAnalysis,commandOptions.interpretation, interpretationUpdateParams, queryParams);
    }
    
}
