package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.app.cli.main.options.FilesCommandOptions;

import org.opencb.opencga.core.models.file.File.Bioformat;
import org.opencb.opencga.core.models.file.FileFetch;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.opencga.core.models.file.FileAclUpdateParams;
import org.opencb.opencga.core.models.file.FileUpdateParams;
import org.opencb.opencga.core.models.common.TsvAnnotationParams;
import org.opencb.opencga.core.models.file.File.Format;
import org.opencb.opencga.core.models.file.FileContent;
import org.opencb.opencga.core.models.file.FileLinkToolParams;
import org.opencb.opencga.core.models.file.PostLinkToolParams;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import java.io.DataInputStream;
import java.util.Map;
import org.opencb.opencga.core.models.file.FileTree;
import org.opencb.opencga.core.models.file.FileCreateParams;
import org.opencb.opencga.catalog.utils.ParamUtils.CompleteUpdateAction;
import org.opencb.opencga.core.models.file.File;
import org.opencb.opencga.core.models.file.FileLinkParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-09-14 21:24:33+0200
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Files command line.
 *    Command line version: 3.0
 *    PATH: /{apiVersion}/files
 */
public class FilesCommandExecutor extends OpencgaCommandExecutor {

    private FilesCommandOptions filesCommandOptions;

    public FilesCommandExecutor(FilesCommandOptions filesCommandOptions) {
        super(filesCommandOptions.commonCommandOptions);
        this.filesCommandOptions = filesCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Files command line");

        String subCommandString = getParsedSubCommand(filesCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "update-acl":
                queryResponse = updateAcl();
                break;
            case "aggregationStats":
                queryResponse = aggregationStats();
                break;
            case "load-annotationSets":
                queryResponse = loadAnnotationSets();
                break;
            case "bioformats":
                queryResponse = bioformats();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "fetch":
                queryResponse = fetch();
                break;
            case "formats":
                queryResponse = formats();
                break;
            case "link":
                queryResponse = link();
                break;
            case "run-link":
                queryResponse = runLink();
                break;
            case "search":
                queryResponse = search();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "info":
                queryResponse = info();
                break;
            case "unlink":
                queryResponse = unlink();
                break;
            case "update":
                queryResponse = update();
                break;
            case "download":
                queryResponse = download();
                break;
            case "grep":
                queryResponse = grep();
                break;
            case "head":
                queryResponse = head();
                break;
            case "image":
                queryResponse = image();
                break;
            case "refresh":
                queryResponse = refresh();
                break;
            case "tail":
                queryResponse = tail();
                break;
            case "list":
                queryResponse = list();
                break;
            case "tree":
                queryResponse = tree();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<ObjectMap> updateAcl() throws Exception {

        logger.debug("Executing updateAcl in Files command line");

        FilesCommandOptions.UpdateAclCommandOptions commandOptions = filesCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        FileAclUpdateParams fileAclUpdateParams = new FileAclUpdateParams()
            .setFile(commandOptions.file)
            .setSample(commandOptions.sample);
        return openCGAClient.getFileClient().updateAcl(commandOptions.members, commandOptions.action, fileAclUpdateParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStats() throws Exception {

        logger.debug("Executing aggregationStats in Files command line");

        FilesCommandOptions.AggregationStatsCommandOptions commandOptions = filesCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("format", commandOptions.format);
        queryParams.putIfNotEmpty("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("creationYear", commandOptions.creationYear);
        queryParams.putIfNotEmpty("creationMonth", commandOptions.creationMonth);
        queryParams.putIfNotEmpty("creationDay", commandOptions.creationDay);
        queryParams.putIfNotEmpty("creationDayOfWeek", commandOptions.creationDayOfWeek);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotNull("external", commandOptions.external);
        queryParams.putIfNotEmpty("size", commandOptions.size);
        queryParams.putIfNotEmpty("software", commandOptions.software);
        queryParams.putIfNotEmpty("experiment", commandOptions.experiment);
        queryParams.putIfNotEmpty("numSamples", commandOptions.numSamples);
        queryParams.putIfNotEmpty("numRelatedFiles", commandOptions.numRelatedFiles);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotNull("default_values", commandOptions.default_values);
        queryParams.putIfNotEmpty("field", commandOptions.field);

        return openCGAClient.getFileClient().aggregationStats(queryParams);
    }

    private RestResponse<Job> loadAnnotationSets() throws Exception {

        logger.debug("Executing loadAnnotationSets in Files command line");

        FilesCommandOptions.LoadAnnotationSetsCommandOptions commandOptions = filesCommandOptions.loadAnnotationSetsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("parents", commandOptions.parents);
        queryParams.putIfNotEmpty("annotationSetId", commandOptions.annotationSetId);

        TsvAnnotationParams tsvAnnotationParams = new TsvAnnotationParams()
            .setContent(commandOptions.content);
        return openCGAClient.getFileClient().loadAnnotationSets(commandOptions.variableSetId, commandOptions.path, tsvAnnotationParams, queryParams);
    }

    private RestResponse<File.Bioformat> bioformats() throws Exception {

        logger.debug("Executing bioformats in Files command line");

        FilesCommandOptions.BioformatsCommandOptions commandOptions = filesCommandOptions.bioformatsCommandOptions;
        return openCGAClient.getFileClient().bioformats();
    }

    private RestResponse<File> create() throws Exception {

        logger.debug("Executing create in Files command line");

        FilesCommandOptions.CreateCommandOptions commandOptions = filesCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        FileCreateParams fileCreateParams = new FileCreateParams()
            .setPath(commandOptions.path)
            .setContent(commandOptions.content)
            .setDescription(commandOptions.description)
            .setParents(commandOptions.parents)
            .setDirectory(commandOptions.directory);
        return openCGAClient.getFileClient().create(fileCreateParams, queryParams);
    }

    private RestResponse<ObjectMap> distinct() throws Exception {

        logger.debug("Executing distinct in Files command line");

        FilesCommandOptions.DistinctCommandOptions commandOptions = filesCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("path", commandOptions.path);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("format", commandOptions.format);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("directory", commandOptions.directory);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("size", commandOptions.size);
        queryParams.putIfNotEmpty("sampleIds", commandOptions.sampleIds);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);
        queryParams.putIfNotEmpty("release", commandOptions.release);

        return openCGAClient.getFileClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<Job> fetch() throws Exception {

        logger.debug("Executing fetch in Files command line");

        FilesCommandOptions.FetchCommandOptions commandOptions = filesCommandOptions.fetchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        FileFetch fileFetch = new FileFetch()
            .setUrl(commandOptions.url)
            .setPath(commandOptions.path);
        return openCGAClient.getFileClient().fetch(fileFetch, queryParams);
    }

    private RestResponse<File.Format> formats() throws Exception {

        logger.debug("Executing formats in Files command line");

        FilesCommandOptions.FormatsCommandOptions commandOptions = filesCommandOptions.formatsCommandOptions;
        return openCGAClient.getFileClient().formats();
    }

    private RestResponse<File> link() throws Exception {

        logger.debug("Executing link in Files command line");

        FilesCommandOptions.LinkCommandOptions commandOptions = filesCommandOptions.linkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("parents", commandOptions.parents);

        FileLinkParams fileLinkParams = new FileLinkParams()
            .setUri(commandOptions.uri)
            .setPath(commandOptions.path)
            .setDescription(commandOptions.description)
            .setCreationDate(commandOptions.creationDate)
            .setModificationDate(commandOptions.modificationDate);
        return openCGAClient.getFileClient().link(fileLinkParams, queryParams);
    }

    private RestResponse<Job> runLink() throws Exception {

        logger.debug("Executing runLink in Files command line");

        FilesCommandOptions.RunLinkCommandOptions commandOptions = filesCommandOptions.runLinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        FileLinkToolParams fileLinkToolParams = new FileLinkToolParams()
            .setPath(commandOptions.path)
            .setDescription(commandOptions.description)
            .setParents(commandOptions.parents);
        return openCGAClient.getFileClient().runLink(fileLinkToolParams, queryParams);
    }

    private RestResponse<File> search() throws Exception {

        logger.debug("Executing search in Files command line");

        FilesCommandOptions.SearchCommandOptions commandOptions = filesCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotEmpty("path", commandOptions.path);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("bioformat", commandOptions.bioformat);
        queryParams.putIfNotEmpty("format", commandOptions.format);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("internalIndexStatus", commandOptions.internalIndexStatus);
        queryParams.putIfNotEmpty("directory", commandOptions.directory);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("description", commandOptions.description);
        queryParams.putIfNotEmpty("tags", commandOptions.tags);
        queryParams.putIfNotEmpty("size", commandOptions.size);
        queryParams.putIfNotEmpty("sampleIds", commandOptions.sampleIds);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("annotation", commandOptions.annotation);
        queryParams.putIfNotEmpty("acl", commandOptions.acl);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        queryParams.putIfNotEmpty("attributes", commandOptions.attributes);
        queryParams.putIfNotEmpty("release", commandOptions.release);

        return openCGAClient.getFileClient().search(queryParams);
    }

    private RestResponse<ObjectMap> acl() throws Exception {

        logger.debug("Executing acl in Files command line");

        FilesCommandOptions.AclCommandOptions commandOptions = filesCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);

        return openCGAClient.getFileClient().acl(commandOptions.files, queryParams);
    }

    private RestResponse<Job> delete() throws Exception {

        logger.debug("Executing delete in Files command line");

        FilesCommandOptions.DeleteCommandOptions commandOptions = filesCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipTrash", commandOptions.skipTrash);

        return openCGAClient.getFileClient().delete(commandOptions.files, queryParams);
    }

    private RestResponse<File> info() throws Exception {

        logger.debug("Executing info in Files command line");

        FilesCommandOptions.InfoCommandOptions commandOptions = filesCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("flattenAnnotations", commandOptions.flattenAnnotations);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);

        return openCGAClient.getFileClient().info(commandOptions.files, queryParams);
    }

    private RestResponse<Job> unlink() throws Exception {

        logger.debug("Executing unlink in Files command line");

        FilesCommandOptions.UnlinkCommandOptions commandOptions = filesCommandOptions.unlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().unlink(commandOptions.files, queryParams);
    }

    private RestResponse<File> update() throws Exception {

        logger.debug("Executing update in Files command line");

        FilesCommandOptions.UpdateCommandOptions commandOptions = filesCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("sampleIdsAction", commandOptions.sampleIdsAction);
        queryParams.putIfNotNull("annotationSetsAction", commandOptions.annotationSetsAction);
        queryParams.putIfNotNull("relatedFilesAction", commandOptions.relatedFilesAction);
        queryParams.putIfNotNull("tagsAction", commandOptions.tagsAction);

        FileUpdateParams fileUpdateParams = new FileUpdateParams()
            .setName(commandOptions.name)
            .setDescription(commandOptions.description)
            .setCreationDate(commandOptions.creationDate)
            .setModificationDate(commandOptions.modificationDate)
            .setChecksum(commandOptions.checksum)
            .setSize(commandOptions.size);
        return openCGAClient.getFileClient().update(commandOptions.files, fileUpdateParams, queryParams);
    }

    private RestResponse<DataInputStream> download() throws Exception {

        logger.debug("Executing download in Files command line");

        FilesCommandOptions.DownloadCommandOptions commandOptions = filesCommandOptions.downloadCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().download(commandOptions.file, queryParams);
    }

    private RestResponse<FileContent> grep() throws Exception {

        logger.debug("Executing grep in Files command line");

        FilesCommandOptions.GrepCommandOptions commandOptions = filesCommandOptions.grepCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("pattern", commandOptions.pattern);
        queryParams.putIfNotNull("ignoreCase", commandOptions.ignoreCase);
        queryParams.putIfNotNull("maxCount", commandOptions.maxCount);

        return openCGAClient.getFileClient().grep(commandOptions.file, queryParams);
    }

    private RestResponse<FileContent> head() throws Exception {

        logger.debug("Executing head in Files command line");

        FilesCommandOptions.HeadCommandOptions commandOptions = filesCommandOptions.headCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("offset", commandOptions.offset);
        queryParams.putIfNotNull("lines", commandOptions.lines);

        return openCGAClient.getFileClient().head(commandOptions.file, queryParams);
    }

    private RestResponse<FileContent> image() throws Exception {

        logger.debug("Executing image in Files command line");

        FilesCommandOptions.ImageCommandOptions commandOptions = filesCommandOptions.imageCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().image(commandOptions.file, queryParams);
    }

    private RestResponse<File> refresh() throws Exception {

        logger.debug("Executing refresh in Files command line");

        FilesCommandOptions.RefreshCommandOptions commandOptions = filesCommandOptions.refreshCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().refresh(commandOptions.file, queryParams);
    }

    private RestResponse<FileContent> tail() throws Exception {

        logger.debug("Executing tail in Files command line");

        FilesCommandOptions.TailCommandOptions commandOptions = filesCommandOptions.tailCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("lines", commandOptions.lines);

        return openCGAClient.getFileClient().tail(commandOptions.file, queryParams);
    }

    private RestResponse<File> list() throws Exception {

        logger.debug("Executing list in Files command line");

        FilesCommandOptions.ListCommandOptions commandOptions = filesCommandOptions.listCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);

        return openCGAClient.getFileClient().list(commandOptions.folder, queryParams);
    }

    private RestResponse<FileTree> tree() throws Exception {

        logger.debug("Executing tree in Files command line");

        FilesCommandOptions.TreeCommandOptions commandOptions = filesCommandOptions.treeCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("maxDepth", commandOptions.maxDepth);

        return openCGAClient.getFileClient().tree(commandOptions.folder, queryParams);
    }
}