package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.commons.utils.PrintUtils;

import org.opencb.opencga.app.cli.main.options.AnalysisClinicalCommandOptions;

import org.opencb.opencga.core.models.clinical.ClinicalReport;
import org.opencb.opencga.core.models.clinical.ProbandParam;
import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisAclUpdateParams;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.opencga.core.models.analysis.knockout.RgaKnockoutByGene;
import org.opencb.opencga.core.models.clinical.InterpretationCreateParams;
import org.opencb.opencga.core.models.clinical.RgaAnalysisParams;
import org.opencb.opencga.catalog.utils.ParamUtils.UpdateAction;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisQualityControl;
import org.opencb.biodata.models.clinical.interpretation.InterpretationMethod;
import org.opencb.opencga.core.models.common.StatusParam;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByVariant;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysis;
import org.opencb.opencga.core.models.clinical.FamilyParam;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividual;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisUpdateParams;
import org.opencb.opencga.core.models.clinical.DisorderReferenceParam;
import org.opencb.opencga.catalog.utils.ParamUtils.AddRemoveReplaceAction;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisCreateParams;
import org.opencb.opencga.core.models.clinical.CancerTieringInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.TeamInterpretationAnalysisParams;
import org.opencb.opencga.catalog.utils.ParamUtils.SaveInterpretationAs;
import org.opencb.opencga.core.models.clinical.ZettaInterpretationAnalysisParams;
import org.opencb.biodata.models.clinical.interpretation.ClinicalVariant;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.clinical.TieringInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.Interpretation;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.core.models.clinical.PriorityParam;
import org.opencb.opencga.core.models.study.configuration.ClinicalAnalysisStudyConfiguration;
import org.opencb.opencga.core.models.study.configuration.ClinicalConsentAnnotationParam;
import org.opencb.opencga.core.models.clinical.InterpretationUpdateParams;
import org.opencb.opencga.core.models.study.configuration.ClinicalConsentConfiguration;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByGeneSummary;
import java.util.Map;
import org.opencb.biodata.models.clinical.ClinicalProperty;
import org.opencb.opencga.core.models.clinical.ClinicalAnalystParam;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividualSummary;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByVariantSummary;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisQualityControlUpdateParam;
import org.opencb.opencga.core.models.study.configuration.InterpretationStudyConfiguration;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2022-05-03
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Analysis - Clinical command line.
 *    OpenCGA version: 2.3.0-SNAPSHOT
 *    PATH: /{apiVersion}/analysis/clinical
 */
public class AnalysisClinicalCommandExecutor extends OpencgaCommandExecutor {

    private AnalysisClinicalCommandOptions analysisClinicalCommandOptions;

    public AnalysisClinicalCommandExecutor(AnalysisClinicalCommandOptions analysisClinicalCommandOptions) throws CatalogAuthenticationException {
        super(analysisClinicalCommandOptions.commonCommandOptions);
        this.analysisClinicalCommandOptions = analysisClinicalCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Analysis - Clinical command line");

        String subCommandString = getParsedSubCommand(analysisClinicalCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "acl-update":
                queryResponse = updateAcl();
                break;
            case "clinical-configuration-update":
                queryResponse = updateClinicalConfiguration();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "interpretation-distinct":
                queryResponse = distinctInterpretation();
                break;
            case "interpretation-search":
                queryResponse = searchInterpretation();
                break;
            case "interpretation-info":
                queryResponse = infoInterpretation();
                break;
            case "interpreter-cancer-tiering-run":
                queryResponse = runInterpreterCancerTiering();
                break;
            case "interpreter-team-run":
                queryResponse = runInterpreterTeam();
                break;
            case "interpreter-tiering-run":
                queryResponse = runInterpreterTiering();
                break;
            case "interpreter-zetta-run":
                queryResponse = runInterpreterZetta();
                break;
            case "rga-aggregation-stats":
                queryResponse = aggregationStatsRga();
                break;
            case "rga-gene-query":
                queryResponse = queryRgaGene();
                break;
            case "rga-gene-summary":
                queryResponse = summaryRgaGene();
                break;
            case "rga-index-run":
                queryResponse = runRgaIndex();
                break;
            case "rga-individual-query":
                queryResponse = queryRgaIndividual();
                break;
            case "rga-individual-summary":
                queryResponse = summaryRgaIndividual();
                break;
            case "rga-variant-query":
                queryResponse = queryRgaVariant();
                break;
            case "rga-variant-summary":
                queryResponse = summaryRgaVariant();
                break;
            case "search":
                queryResponse = search();
                break;
            case "variant-actionable":
                queryResponse = actionableVariant();
                break;
            case "variant-query":
                queryResponse = queryVariant();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "update":
                queryResponse = update();
                break;
            case "info":
                queryResponse = info();
                break;
            case "interpretation-create":
                queryResponse = createInterpretation();
                break;
            case "interpretation-clear":
                queryResponse = clearInterpretation();
                break;
            case "interpretation-delete":
                queryResponse = deleteInterpretation();
                break;
            case "interpretation-revert":
                queryResponse = revertInterpretation();
                break;
            case "interpretation-update":
                queryResponse = updateInterpretation();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<ObjectMap> updateAcl() throws Exception {

        logger.debug("Executing updateAcl in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateAclCommandOptions commandOptions = analysisClinicalCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("propagate", commandOptions.propagate);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ClinicalAnalysisAclUpdateParams clinicalAnalysisAclUpdateParams = new ClinicalAnalysisAclUpdateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<ObjectMap> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(clinicalAnalysisAclUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), clinicalAnalysisAclUpdateParams);
        }  else {
            clinicalAnalysisAclUpdateParams.setPermissions(commandOptions.permissions);
            clinicalAnalysisAclUpdateParams.setClinicalAnalysis(commandOptions.clinicalAnalysis);

        }
        return openCGAClient.getClinicalAnalysisClient().updateAcl(commandOptions.members, commandOptions.action, clinicalAnalysisAclUpdateParams, queryParams);
    }

    private RestResponse<ObjectMap> updateClinicalConfiguration() throws Exception {

        logger.debug("Executing updateClinicalConfiguration in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateClinicalConfigurationCommandOptions commandOptions = analysisClinicalCommandOptions.updateClinicalConfigurationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ClinicalAnalysisStudyConfiguration clinicalAnalysisStudyConfiguration = new ClinicalAnalysisStudyConfiguration();
        if (commandOptions.jsonDataModel) {
            RestResponse<ObjectMap> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(clinicalAnalysisStudyConfiguration));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), clinicalAnalysisStudyConfiguration);
        }         return openCGAClient.getClinicalAnalysisClient().updateClinicalConfiguration(clinicalAnalysisStudyConfiguration, queryParams);
    }

    private RestResponse<ClinicalAnalysis> create() throws Exception {

        logger.debug("Executing create in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.CreateCommandOptions commandOptions = analysisClinicalCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("skipCreateDefaultInterpretation", commandOptions.skipCreateDefaultInterpretation);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PriorityParam priorityParam= new PriorityParam();
        invokeSetter(priorityParam, "id", commandOptions.priorityId);

        ClinicalReport clinicalReport= new ClinicalReport();
        invokeSetter(clinicalReport, "title", commandOptions.reportTitle);
        invokeSetter(clinicalReport, "overview", commandOptions.reportOverview);
        invokeSetter(clinicalReport, "discussion", commandOptions.reportDiscussion);
        invokeSetter(clinicalReport, "logo", commandOptions.reportLogo);
        invokeSetter(clinicalReport, "signedBy", commandOptions.reportSignedBy);
        invokeSetter(clinicalReport, "signature", commandOptions.reportSignature);
        invokeSetter(clinicalReport, "date", commandOptions.reportDate);

        StatusParam statusParam= new StatusParam();
        invokeSetter(statusParam, "id", commandOptions.statusId);

        ClinicalAnalysisQualityControlUpdateParam clinicalAnalysisQualityControlUpdateParam= new ClinicalAnalysisQualityControlUpdateParam();

        ProbandParam probandParam= new ProbandParam();
        invokeSetter(probandParam, "id", commandOptions.probandId);

        InterpretationCreateParams interpretationCreateParams= new InterpretationCreateParams();
        invokeSetter(interpretationCreateParams, "description", commandOptions.interpretationDescription);
        invokeSetter(interpretationCreateParams, "clinicalAnalysisId", commandOptions.interpretationClinicalAnalysisId);
        invokeSetter(interpretationCreateParams, "creationDate", commandOptions.interpretationCreationDate);
        invokeSetter(interpretationCreateParams, "modificationDate", commandOptions.interpretationModificationDate);
        invokeSetter(interpretationCreateParams, "locked", commandOptions.interpretationLocked);

        ClinicalAnalystParam clinicalAnalystParam= new ClinicalAnalystParam();
        invokeSetter(clinicalAnalystParam, "id", commandOptions.analystId);

        DisorderReferenceParam disorderReferenceParam= new DisorderReferenceParam();
        invokeSetter(disorderReferenceParam, "id", commandOptions.disorderId);

        FamilyParam familyParam= new FamilyParam();
        invokeSetter(familyParam, "id", commandOptions.familyId);
        ClinicalAnalysis.Type typeParam = null;
        if (commandOptions.type != null) {
         typeParam = ClinicalAnalysis.Type.valueOf(commandOptions.type);

        } 

        ClinicalAnalysisCreateParams clinicalAnalysisCreateParams = new ClinicalAnalysisCreateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<ClinicalAnalysis> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(clinicalAnalysisCreateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), clinicalAnalysisCreateParams);
        }  else {
            clinicalAnalysisCreateParams.setId(commandOptions.id);
            clinicalAnalysisCreateParams.setDescription(commandOptions.description);
            clinicalAnalysisCreateParams.setType(typeParam);
            clinicalAnalysisCreateParams.setDisorder(disorderReferenceParam);
            clinicalAnalysisCreateParams.setProband(probandParam);
            clinicalAnalysisCreateParams.setFamily(familyParam);
            clinicalAnalysisCreateParams.setAnalyst(clinicalAnalystParam);
            clinicalAnalysisCreateParams.setReport(clinicalReport);
            clinicalAnalysisCreateParams.setInterpretation(interpretationCreateParams);
            clinicalAnalysisCreateParams.setQualityControl(clinicalAnalysisQualityControlUpdateParam);
            clinicalAnalysisCreateParams.setCreationDate(commandOptions.creationDate);
            clinicalAnalysisCreateParams.setModificationDate(commandOptions.modificationDate);
            clinicalAnalysisCreateParams.setDueDate(commandOptions.dueDate);
            clinicalAnalysisCreateParams.setPriority(priorityParam);
            clinicalAnalysisCreateParams.setStatus(statusParam);

            if (commandOptions.panelLock != null){
                ((ClinicalAnalysisCreateParams)clinicalAnalysisCreateParams).setPanelLock(commandOptions.panelLock);
             }

        }
        return openCGAClient.getClinicalAnalysisClient().create(clinicalAnalysisCreateParams, queryParams);
    }

    private RestResponse<ObjectMap> distinct() throws Exception {

        logger.debug("Executing distinct in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DistinctCommandOptions commandOptions = analysisClinicalCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        queryParams.putIfNotEmpty("files", commandOptions.files);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("individual", commandOptions.individual);
        queryParams.putIfNotEmpty("proband", commandOptions.proband);
        queryParams.putIfNotEmpty("probandSamples", commandOptions.probandSamples);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyMemberSamples", commandOptions.familyMemberSamples);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotNull("locked", commandOptions.locked);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("flags", commandOptions.flags);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("qualityControlSummary", commandOptions.qualityControlSummary);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<ObjectMap> distinctInterpretation() throws Exception {

        logger.debug("Executing distinctInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DistinctInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.distinctInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("clinicalAnalysisId", commandOptions.clinicalAnalysisId);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("methodName", commandOptions.methodName);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotEmpty("primaryFindings", commandOptions.primaryFindings);
        queryParams.putIfNotEmpty("secondaryFindings", commandOptions.secondaryFindings);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().distinctInterpretation(commandOptions.field, queryParams);
    }

    private RestResponse<Interpretation> searchInterpretation() throws Exception {

        logger.debug("Executing searchInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SearchInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.searchInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("sort", commandOptions.sort);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("clinicalAnalysisId", commandOptions.clinicalAnalysisId);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("methodName", commandOptions.methodName);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotEmpty("primaryFindings", commandOptions.primaryFindings);
        queryParams.putIfNotEmpty("secondaryFindings", commandOptions.secondaryFindings);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().searchInterpretation(queryParams);
    }

    private RestResponse<Interpretation> infoInterpretation() throws Exception {

        logger.debug("Executing infoInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.InfoInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.infoInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().infoInterpretation(commandOptions.interpretations, queryParams);
    }

    private RestResponse<Job> runInterpreterCancerTiering() throws Exception {

        logger.debug("Executing runInterpreterCancerTiering in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterCancerTieringCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterCancerTieringCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CancerTieringInterpretationAnalysisParams cancerTieringInterpretationAnalysisParams = new CancerTieringInterpretationAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(cancerTieringInterpretationAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), cancerTieringInterpretationAnalysisParams);
        }  else {
            cancerTieringInterpretationAnalysisParams.setClinicalAnalysis(commandOptions.clinicalAnalysis);
            cancerTieringInterpretationAnalysisParams.setDiscardedVariants(splitWithTrim(commandOptions.discardedVariants));

            if (commandOptions.primary != null){
                ((CancerTieringInterpretationAnalysisParams)cancerTieringInterpretationAnalysisParams).setPrimary(commandOptions.primary);
             }

        }
        return openCGAClient.getClinicalAnalysisClient().runInterpreterCancerTiering(cancerTieringInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterTeam() throws Exception {

        logger.debug("Executing runInterpreterTeam in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterTeamCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterTeamCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        TeamInterpretationAnalysisParams teamInterpretationAnalysisParams = new TeamInterpretationAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(teamInterpretationAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), teamInterpretationAnalysisParams);
        }  else {
            teamInterpretationAnalysisParams.setClinicalAnalysis(commandOptions.clinicalAnalysis);
            teamInterpretationAnalysisParams.setPanels(splitWithTrim(commandOptions.panels));
            teamInterpretationAnalysisParams.setFamilySegregation(commandOptions.familySegregation);

            if (commandOptions.primary != null){
                ((TeamInterpretationAnalysisParams)teamInterpretationAnalysisParams).setPrimary(commandOptions.primary);
             }

        }
        return openCGAClient.getClinicalAnalysisClient().runInterpreterTeam(teamInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterTiering() throws Exception {

        logger.debug("Executing runInterpreterTiering in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterTieringCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterTieringCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        ClinicalProperty.Penetrance penetranceParam = null;
        if (commandOptions.penetrance != null) {
         penetranceParam = ClinicalProperty.Penetrance.valueOf(commandOptions.penetrance);

        } 

        TieringInterpretationAnalysisParams tieringInterpretationAnalysisParams = new TieringInterpretationAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(tieringInterpretationAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), tieringInterpretationAnalysisParams);
        }  else {
            tieringInterpretationAnalysisParams.setClinicalAnalysis(commandOptions.clinicalAnalysis);
            tieringInterpretationAnalysisParams.setPanels(splitWithTrim(commandOptions.panels));
            tieringInterpretationAnalysisParams.setPenetrance(penetranceParam);

            if (commandOptions.primary != null){
                ((TieringInterpretationAnalysisParams)tieringInterpretationAnalysisParams).setPrimary(commandOptions.primary);
             }

        }
        return openCGAClient.getClinicalAnalysisClient().runInterpreterTiering(tieringInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterZetta() throws Exception {

        logger.debug("Executing runInterpreterZetta in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterZettaCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterZettaCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        ZettaInterpretationAnalysisParams zettaInterpretationAnalysisParams = new ZettaInterpretationAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(zettaInterpretationAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), zettaInterpretationAnalysisParams);
        }  else {
            zettaInterpretationAnalysisParams.setClinicalAnalysis(commandOptions.clinicalAnalysis);
            zettaInterpretationAnalysisParams.setId(splitWithTrim(commandOptions.id));
            zettaInterpretationAnalysisParams.setRegion(commandOptions.region);
            zettaInterpretationAnalysisParams.setType(commandOptions.type);
            zettaInterpretationAnalysisParams.setStudy(commandOptions.bodyStudy);
            zettaInterpretationAnalysisParams.setFile(commandOptions.file);
            zettaInterpretationAnalysisParams.setFilter(commandOptions.filter);
            zettaInterpretationAnalysisParams.setQual(commandOptions.qual);
            zettaInterpretationAnalysisParams.setFileData(commandOptions.fileData);
            zettaInterpretationAnalysisParams.setSample(commandOptions.sample);
            zettaInterpretationAnalysisParams.setSampleData(commandOptions.sampleData);
            zettaInterpretationAnalysisParams.setSampleAnnotation(commandOptions.sampleAnnotation);
            zettaInterpretationAnalysisParams.setSampleMetadata(commandOptions.sampleMetadata);
            zettaInterpretationAnalysisParams.setCohort(commandOptions.cohort);
            zettaInterpretationAnalysisParams.setCohortStatsRef(commandOptions.cohortStatsRef);
            zettaInterpretationAnalysisParams.setCohortStatsAlt(commandOptions.cohortStatsAlt);
            zettaInterpretationAnalysisParams.setCohortStatsMaf(commandOptions.cohortStatsMaf);
            zettaInterpretationAnalysisParams.setCohortStatsMgf(commandOptions.cohortStatsMgf);
            zettaInterpretationAnalysisParams.setCohortStatsPass(commandOptions.cohortStatsPass);
            zettaInterpretationAnalysisParams.setScore(commandOptions.score);
            zettaInterpretationAnalysisParams.setFamily(commandOptions.family);
            zettaInterpretationAnalysisParams.setFamilyDisorder(commandOptions.familyDisorder);
            zettaInterpretationAnalysisParams.setFamilySegregation(commandOptions.familySegregation);
            zettaInterpretationAnalysisParams.setFamilyMembers(commandOptions.familyMembers);
            zettaInterpretationAnalysisParams.setFamilyProband(commandOptions.familyProband);
            zettaInterpretationAnalysisParams.setGene(commandOptions.gene);
            zettaInterpretationAnalysisParams.setCt(commandOptions.ct);
            zettaInterpretationAnalysisParams.setXref(commandOptions.xref);
            zettaInterpretationAnalysisParams.setBiotype(commandOptions.biotype);
            zettaInterpretationAnalysisParams.setProteinSubstitution(commandOptions.proteinSubstitution);
            zettaInterpretationAnalysisParams.setConservation(commandOptions.conservation);
            zettaInterpretationAnalysisParams.setPopulationFrequencyAlt(commandOptions.populationFrequencyAlt);
            zettaInterpretationAnalysisParams.setPopulationFrequencyRef(commandOptions.populationFrequencyRef);
            zettaInterpretationAnalysisParams.setPopulationFrequencyMaf(commandOptions.populationFrequencyMaf);
            zettaInterpretationAnalysisParams.setTranscriptFlag(commandOptions.transcriptFlag);
            zettaInterpretationAnalysisParams.setGeneTraitId(commandOptions.geneTraitId);
            zettaInterpretationAnalysisParams.setGo(commandOptions.go);
            zettaInterpretationAnalysisParams.setExpression(commandOptions.expression);
            zettaInterpretationAnalysisParams.setProteinKeyword(commandOptions.proteinKeyword);
            zettaInterpretationAnalysisParams.setDrug(commandOptions.drug);
            zettaInterpretationAnalysisParams.setFunctionalScore(commandOptions.functionalScore);
            zettaInterpretationAnalysisParams.setClinical(commandOptions.clinical);
            zettaInterpretationAnalysisParams.setClinicalSignificance(commandOptions.clinicalSignificance);
            zettaInterpretationAnalysisParams.setCustomAnnotation(commandOptions.customAnnotation);
            zettaInterpretationAnalysisParams.setPanel(commandOptions.panel);
            zettaInterpretationAnalysisParams.setPanelModeOfInheritance(commandOptions.panelModeOfInheritance);
            zettaInterpretationAnalysisParams.setPanelConfidence(commandOptions.panelConfidence);
            zettaInterpretationAnalysisParams.setPanelRoleInCancer(commandOptions.panelRoleInCancer);
            zettaInterpretationAnalysisParams.setTrait(commandOptions.trait);

            if (commandOptions.clinicalConfirmedStatus != null){
                ((ZettaInterpretationAnalysisParams)zettaInterpretationAnalysisParams).setClinicalConfirmedStatus(commandOptions.clinicalConfirmedStatus);
             }

            if (commandOptions.primary != null){
                ((ZettaInterpretationAnalysisParams)zettaInterpretationAnalysisParams).setPrimary(commandOptions.primary);
             }

        }
        return openCGAClient.getClinicalAnalysisClient().runInterpreterZetta(zettaInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStatsRga() throws Exception {

        logger.debug("Executing aggregationStatsRga in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.AggregationStatsRgaCommandOptions commandOptions = analysisClinicalCommandOptions.aggregationStatsRgaCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().aggregationStatsRga(commandOptions.field, queryParams);
    }

    private RestResponse<RgaKnockoutByGene> queryRgaGene() throws Exception {

        logger.debug("Executing queryRgaGene in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryRgaGeneCommandOptions commandOptions = analysisClinicalCommandOptions.queryRgaGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotNull("skipIndividual", commandOptions.skipIndividual);
        queryParams.putIfNotNull("limitIndividual", commandOptions.limitIndividual);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryRgaGene(queryParams);
    }

    private RestResponse<KnockoutByGeneSummary> summaryRgaGene() throws Exception {

        logger.debug("Executing summaryRgaGene in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SummaryRgaGeneCommandOptions commandOptions = analysisClinicalCommandOptions.summaryRgaGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().summaryRgaGene(queryParams);
    }

    private RestResponse<Job> runRgaIndex() throws Exception {

        logger.debug("Executing runRgaIndex in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunRgaIndexCommandOptions commandOptions = analysisClinicalCommandOptions.runRgaIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotNull("auxiliarIndex", commandOptions.auxiliarIndex);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        RgaAnalysisParams rgaAnalysisParams = new RgaAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(rgaAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), rgaAnalysisParams);
        }  else {
            rgaAnalysisParams.setFile(commandOptions.file);

        }
        return openCGAClient.getClinicalAnalysisClient().runRgaIndex(rgaAnalysisParams, queryParams);
    }

    private RestResponse<KnockoutByIndividual> queryRgaIndividual() throws Exception {

        logger.debug("Executing queryRgaIndividual in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryRgaIndividualCommandOptions commandOptions = analysisClinicalCommandOptions.queryRgaIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryRgaIndividual(queryParams);
    }

    private RestResponse<KnockoutByIndividualSummary> summaryRgaIndividual() throws Exception {

        logger.debug("Executing summaryRgaIndividual in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SummaryRgaIndividualCommandOptions commandOptions = analysisClinicalCommandOptions.summaryRgaIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().summaryRgaIndividual(queryParams);
    }

    private RestResponse<KnockoutByVariant> queryRgaVariant() throws Exception {

        logger.debug("Executing queryRgaVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryRgaVariantCommandOptions commandOptions = analysisClinicalCommandOptions.queryRgaVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotNull("skipIndividual", commandOptions.skipIndividual);
        queryParams.putIfNotNull("limitIndividual", commandOptions.limitIndividual);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryRgaVariant(queryParams);
    }

    private RestResponse<KnockoutByVariantSummary> summaryRgaVariant() throws Exception {

        logger.debug("Executing summaryRgaVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SummaryRgaVariantCommandOptions commandOptions = analysisClinicalCommandOptions.summaryRgaVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().summaryRgaVariant(queryParams);
    }

    private RestResponse<ClinicalAnalysis> search() throws Exception {

        logger.debug("Executing search in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SearchCommandOptions commandOptions = analysisClinicalCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        queryParams.putIfNotEmpty("files", commandOptions.files);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("individual", commandOptions.individual);
        queryParams.putIfNotEmpty("proband", commandOptions.proband);
        queryParams.putIfNotEmpty("probandSamples", commandOptions.probandSamples);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyMemberSamples", commandOptions.familyMemberSamples);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotNull("locked", commandOptions.locked);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("flags", commandOptions.flags);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("qualityControlSummary", commandOptions.qualityControlSummary);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().search(queryParams);
    }

    private RestResponse<ClinicalVariant> actionableVariant() throws Exception {

        logger.debug("Executing actionableVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.ActionableVariantCommandOptions commandOptions = analysisClinicalCommandOptions.actionableVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().actionableVariant(queryParams);
    }

    private RestResponse<ClinicalVariant> queryVariant() throws Exception {

        logger.debug("Executing queryVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryVariantCommandOptions commandOptions = analysisClinicalCommandOptions.queryVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("approximateCount", commandOptions.approximateCount);
        queryParams.putIfNotNull("approximateCountSamplingSize", commandOptions.approximateCountSamplingSize);
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotEmpty("panelFeatureType", commandOptions.panelFeatureType);
        queryParams.putIfNotNull("panelIntersection", commandOptions.panelIntersection);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryVariant(queryParams);
    }

    private RestResponse<ObjectMap> acl() throws Exception {

        logger.debug("Executing acl in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.AclCommandOptions commandOptions = analysisClinicalCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().acl(commandOptions.clinicalAnalyses, queryParams);
    }

    private RestResponse<ClinicalAnalysis> delete() throws Exception {

        logger.debug("Executing delete in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DeleteCommandOptions commandOptions = analysisClinicalCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("force", commandOptions.force);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().delete(commandOptions.clinicalAnalyses, queryParams);
    }

    private RestResponse<ClinicalAnalysis> update() throws Exception {

        logger.debug("Executing update in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateCommandOptions commandOptions = analysisClinicalCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PriorityParam priorityParam= new PriorityParam();
        invokeSetter(priorityParam, "id", commandOptions.priorityId);

        ClinicalReport clinicalReport= new ClinicalReport();
        invokeSetter(clinicalReport, "title", commandOptions.reportTitle);
        invokeSetter(clinicalReport, "overview", commandOptions.reportOverview);
        invokeSetter(clinicalReport, "discussion", commandOptions.reportDiscussion);
        invokeSetter(clinicalReport, "logo", commandOptions.reportLogo);
        invokeSetter(clinicalReport, "signedBy", commandOptions.reportSignedBy);
        invokeSetter(clinicalReport, "signature", commandOptions.reportSignature);
        invokeSetter(clinicalReport, "date", commandOptions.reportDate);

        StatusParam statusParam= new StatusParam();
        invokeSetter(statusParam, "id", commandOptions.statusId);

        ClinicalAnalysisQualityControlUpdateParam clinicalAnalysisQualityControlUpdateParam= new ClinicalAnalysisQualityControlUpdateParam();

        ProbandParam probandParam= new ProbandParam();
        invokeSetter(probandParam, "id", commandOptions.probandId);

        ClinicalAnalystParam clinicalAnalystParam= new ClinicalAnalystParam();
        invokeSetter(clinicalAnalystParam, "id", commandOptions.analystId);

        DisorderReferenceParam disorderReferenceParam= new DisorderReferenceParam();
        invokeSetter(disorderReferenceParam, "id", commandOptions.disorderId);

        FamilyParam familyParam= new FamilyParam();
        invokeSetter(familyParam, "id", commandOptions.familyId);
        ClinicalAnalysis.Type typeParam = null;
        if (commandOptions.type != null) {
         typeParam = ClinicalAnalysis.Type.valueOf(commandOptions.type);

        } 

        ClinicalAnalysisUpdateParams clinicalAnalysisUpdateParams = new ClinicalAnalysisUpdateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<ClinicalAnalysis> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(clinicalAnalysisUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), clinicalAnalysisUpdateParams);
        }  else {
            clinicalAnalysisUpdateParams.setId(commandOptions.id);
            clinicalAnalysisUpdateParams.setDescription(commandOptions.description);
            clinicalAnalysisUpdateParams.setType(typeParam);
            clinicalAnalysisUpdateParams.setDisorder(disorderReferenceParam);
            clinicalAnalysisUpdateParams.setProband(probandParam);
            clinicalAnalysisUpdateParams.setFamily(familyParam);
            clinicalAnalysisUpdateParams.setAnalyst(clinicalAnalystParam);
            clinicalAnalysisUpdateParams.setReport(clinicalReport);
            clinicalAnalysisUpdateParams.setQualityControl(clinicalAnalysisQualityControlUpdateParam);
            clinicalAnalysisUpdateParams.setCreationDate(commandOptions.creationDate);
            clinicalAnalysisUpdateParams.setModificationDate(commandOptions.modificationDate);
            clinicalAnalysisUpdateParams.setDueDate(commandOptions.dueDate);
            clinicalAnalysisUpdateParams.setPriority(priorityParam);
            clinicalAnalysisUpdateParams.setStatus(statusParam);

            if (commandOptions.panelLock != null){
                ((ClinicalAnalysisUpdateParams)clinicalAnalysisUpdateParams).setPanelLock(commandOptions.panelLock);
             }

            if (commandOptions.locked != null){
                ((ClinicalAnalysisUpdateParams)clinicalAnalysisUpdateParams).setLocked(commandOptions.locked);
             }

        }
        return openCGAClient.getClinicalAnalysisClient().update(commandOptions.clinicalAnalyses, clinicalAnalysisUpdateParams, queryParams);
    }

    private RestResponse<ClinicalAnalysis> info() throws Exception {

        logger.debug("Executing info in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.InfoCommandOptions commandOptions = analysisClinicalCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().info(commandOptions.clinicalAnalysis, queryParams);
    }

    private RestResponse<Interpretation> createInterpretation() throws Exception {

        logger.debug("Executing createInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.CreateInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.createInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("setAs", commandOptions.setAs);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        StatusParam statusParam= new StatusParam();
        invokeSetter(statusParam, "id", commandOptions.statusId);

        InterpretationMethod interpretationMethod= new InterpretationMethod();
        invokeSetter(interpretationMethod, "name", commandOptions.methodName);
        invokeSetter(interpretationMethod, "version", commandOptions.methodVersion);
        invokeSetter(interpretationMethod, "commit", commandOptions.methodCommit);

        ClinicalAnalystParam clinicalAnalystParam= new ClinicalAnalystParam();
        invokeSetter(clinicalAnalystParam, "id", commandOptions.analystId);

        InterpretationCreateParams interpretationCreateParams = new InterpretationCreateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Interpretation> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(interpretationCreateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), interpretationCreateParams);
        }  else {
            interpretationCreateParams.setDescription(commandOptions.description);
            interpretationCreateParams.setClinicalAnalysisId(commandOptions.clinicalAnalysisId);
            interpretationCreateParams.setCreationDate(commandOptions.creationDate);
            interpretationCreateParams.setModificationDate(commandOptions.modificationDate);
            interpretationCreateParams.setAnalyst(clinicalAnalystParam);
            interpretationCreateParams.setMethod(interpretationMethod);
            interpretationCreateParams.setStatus(statusParam);

            if (commandOptions.locked != null){
                ((InterpretationCreateParams)interpretationCreateParams).setLocked(commandOptions.locked);
             }

        }
        return openCGAClient.getClinicalAnalysisClient().createInterpretation(commandOptions.clinicalAnalysis, interpretationCreateParams, queryParams);
    }

    private RestResponse<Interpretation> clearInterpretation() throws Exception {

        logger.debug("Executing clearInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.ClearInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.clearInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().clearInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretations, queryParams);
    }

    private RestResponse<Interpretation> deleteInterpretation() throws Exception {

        logger.debug("Executing deleteInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DeleteInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.deleteInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("setAsPrimary", commandOptions.setAsPrimary);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().deleteInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretations, queryParams);
    }

    private RestResponse<Interpretation> revertInterpretation() throws Exception {

        logger.debug("Executing revertInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RevertInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.revertInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().revertInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretation, commandOptions.version, queryParams);
    }

    private RestResponse<Interpretation> updateInterpretation() throws Exception {

        logger.debug("Executing updateInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.updateInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("setAs", commandOptions.setAs);
        queryParams.putIfNotNull("includeResult", commandOptions.includeResult);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        StatusParam statusParam= new StatusParam();
        invokeSetter(statusParam, "id", commandOptions.statusId);

        InterpretationMethod interpretationMethod= new InterpretationMethod();
        invokeSetter(interpretationMethod, "name", commandOptions.methodName);
        invokeSetter(interpretationMethod, "version", commandOptions.methodVersion);
        invokeSetter(interpretationMethod, "commit", commandOptions.methodCommit);

        ClinicalAnalystParam clinicalAnalystParam= new ClinicalAnalystParam();
        invokeSetter(clinicalAnalystParam, "id", commandOptions.analystId);

        InterpretationUpdateParams interpretationUpdateParams = new InterpretationUpdateParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Interpretation> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(interpretationUpdateParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.writeValue(new java.io.File(commandOptions.jsonFile), interpretationUpdateParams);
        }  else {
            interpretationUpdateParams.setDescription(commandOptions.description);
            interpretationUpdateParams.setAnalyst(clinicalAnalystParam);
            interpretationUpdateParams.setMethod(interpretationMethod);
            interpretationUpdateParams.setCreationDate(commandOptions.creationDate);
            interpretationUpdateParams.setModificationDate(commandOptions.modificationDate);
            interpretationUpdateParams.setStatus(statusParam);

            if (commandOptions.locked != null){
                ((InterpretationUpdateParams)interpretationUpdateParams).setLocked(commandOptions.locked);
             }

        }
        return openCGAClient.getClinicalAnalysisClient().updateInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretation, interpretationUpdateParams, queryParams);
    }
}