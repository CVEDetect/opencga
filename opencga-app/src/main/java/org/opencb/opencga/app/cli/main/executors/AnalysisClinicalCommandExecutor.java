package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.app.cli.main.CommandLineUtils;

import java.util.List;

import org.opencb.opencga.app.cli.main.options.AnalysisClinicalCommandOptions;

import org.opencb.opencga.catalog.utils.ParamUtils.BasicUpdateAction;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisAclUpdateParams;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.opencga.core.models.analysis.knockout.RgaKnockoutByGene;
import org.opencb.opencga.core.models.clinical.RgaAnalysisParams;
import org.opencb.opencga.core.models.clinical.InterpretationCreateParams;
import org.opencb.opencga.catalog.utils.ParamUtils.UpdateAction;
import org.opencb.opencga.catalog.utils.ParamUtils.AclAction;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByVariant;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysis;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividual;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisUpdateParams;
import org.opencb.opencga.catalog.utils.ParamUtils.AddRemoveReplaceAction;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisCreateParams;
import org.opencb.opencga.core.models.clinical.CancerTieringInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.TeamInterpretationAnalysisParams;
import org.opencb.opencga.catalog.utils.ParamUtils.SaveInterpretationAs;
import org.opencb.opencga.core.models.clinical.ZettaInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.InterpretationMergeParams;
import org.opencb.biodata.models.clinical.interpretation.ClinicalVariant;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.clinical.TieringInterpretationAnalysisParams;
import org.opencb.opencga.core.models.clinical.Interpretation;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.core.models.study.configuration.ClinicalAnalysisStudyConfiguration;
import org.opencb.opencga.core.models.clinical.InterpretationUpdateParams;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByGeneSummary;
import java.util.Map;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividualSummary;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByVariantSummary;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-10-14
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Analysis - Clinical command line.
 *    OpenCGA version: 2.2.0-SNAPSHOT
 *    PATH: /{apiVersion}/analysis/clinical
 */
public class AnalysisClinicalCommandExecutor extends OpencgaCommandExecutor {

    private AnalysisClinicalCommandOptions analysisClinicalCommandOptions;

    public AnalysisClinicalCommandExecutor(AnalysisClinicalCommandOptions analysisClinicalCommandOptions) {
        super(analysisClinicalCommandOptions.commonCommandOptions);
        this.analysisClinicalCommandOptions = analysisClinicalCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Analysis - Clinical command line");

        String subCommandString = getParsedSubCommand(analysisClinicalCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "update-acl":
                queryResponse = updateAcl();
                break;
            case "create":
                queryResponse = create();
                break;
            case "distinct":
                queryResponse = distinct();
                break;
            case "distinct-interpretation":
                queryResponse = distinctInterpretation();
                break;
            case "search-interpretation":
                queryResponse = searchInterpretation();
                break;
            case "info-interpretation":
                queryResponse = infoInterpretation();
                break;
            case "run-interpreter-cancerTiering":
                queryResponse = runInterpreterCancerTiering();
                break;
            case "run-interpreter-team":
                queryResponse = runInterpreterTeam();
                break;
            case "run-interpreter-tiering":
                queryResponse = runInterpreterTiering();
                break;
            case "run-interpreter-zetta":
                queryResponse = runInterpreterZetta();
                break;
            case "aggregationStats-rga":
                queryResponse = aggregationStatsRga();
                break;
            case "query-rga-gene":
                queryResponse = queryRgaGene();
                break;
            case "summary-rga-gene":
                queryResponse = summaryRgaGene();
                break;
            case "run-rga-index":
                queryResponse = runRgaIndex();
                break;
            case "query-rga-individual":
                queryResponse = queryRgaIndividual();
                break;
            case "summary-rga-individual":
                queryResponse = summaryRgaIndividual();
                break;
            case "query-rga-variant":
                queryResponse = queryRgaVariant();
                break;
            case "summary-rga-variant":
                queryResponse = summaryRgaVariant();
                break;
            case "search":
                queryResponse = search();
                break;
            case "actionable-variant":
                queryResponse = actionableVariant();
                break;
            case "query-variant":
                queryResponse = queryVariant();
                break;
            case "acl":
                queryResponse = acl();
                break;
            case "delete":
                queryResponse = delete();
                break;
            case "update":
                queryResponse = update();
                break;
            case "info":
                queryResponse = info();
                break;
            case "create-interpretation":
                queryResponse = createInterpretation();
                break;
            case "delete-interpretation":
                queryResponse = deleteInterpretation();
                break;
            case "update-interpretation":
                queryResponse = updateInterpretation();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<ObjectMap> updateAcl() throws Exception {

        logger.debug("Executing updateAcl in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateAclCommandOptions commandOptions = analysisClinicalCommandOptions.updateAclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("propagate", commandOptions.propagate);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        ClinicalAnalysisAclUpdateParams clinicalAnalysisAclUpdateParams = new ClinicalAnalysisAclUpdateParams()
            .setClinicalAnalysis(commandOptions.clinicalAnalysis);
        return openCGAClient.getClinicalAnalysisClient().updateAcl(commandOptions.members, commandOptions.action, clinicalAnalysisAclUpdateParams, queryParams);
    }

    private RestResponse<ClinicalAnalysis> create() throws Exception {

        logger.debug("Executing create in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.CreateCommandOptions commandOptions = analysisClinicalCommandOptions.createCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("createDefaultInterpretation", commandOptions.createDefaultInterpretation);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        ClinicalAnalysisCreateParams clinicalAnalysisCreateParams = new ClinicalAnalysisCreateParams()
            .setId(commandOptions.id)
            .setDescription(commandOptions.description)
            .setCreationDate(commandOptions.creationDate)
            .setModificationDate(commandOptions.modificationDate)
            .setDueDate(commandOptions.dueDate);
        return openCGAClient.getClinicalAnalysisClient().create(clinicalAnalysisCreateParams, queryParams);
    }

    private RestResponse<ObjectMap> distinct() throws Exception {

        logger.debug("Executing distinct in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DistinctCommandOptions commandOptions = analysisClinicalCommandOptions.distinctCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        queryParams.putIfNotEmpty("files", commandOptions.files);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("individual", commandOptions.individual);
        queryParams.putIfNotEmpty("proband", commandOptions.proband);
        queryParams.putIfNotEmpty("probandSamples", commandOptions.probandSamples);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyMemberSamples", commandOptions.familyMemberSamples);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotNull("locked", commandOptions.locked);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("flags", commandOptions.flags);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("qualityControlSummary", commandOptions.qualityControlSummary);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().distinct(commandOptions.field, queryParams);
    }

    private RestResponse<ObjectMap> distinctInterpretation() throws Exception {

        logger.debug("Executing distinctInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DistinctInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.distinctInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("clinicalAnalysisId", commandOptions.clinicalAnalysisId);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("methodsName", commandOptions.methodsName);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotEmpty("primaryFindings", commandOptions.primaryFindings);
        queryParams.putIfNotEmpty("secondaryFindings", commandOptions.secondaryFindings);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().distinctInterpretation(commandOptions.field, queryParams);
    }

    private RestResponse<Interpretation> searchInterpretation() throws Exception {

        logger.debug("Executing searchInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SearchInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.searchInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("sort", commandOptions.sort);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("clinicalAnalysisId", commandOptions.clinicalAnalysisId);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("methodsName", commandOptions.methodsName);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotEmpty("primaryFindings", commandOptions.primaryFindings);
        queryParams.putIfNotEmpty("secondaryFindings", commandOptions.secondaryFindings);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().searchInterpretation(queryParams);
    }

    private RestResponse<Interpretation> infoInterpretation() throws Exception {

        logger.debug("Executing infoInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.InfoInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.infoInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("version", commandOptions.version);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().infoInterpretation(commandOptions.interpretations, queryParams);
    }

    private RestResponse<Job> runInterpreterCancerTiering() throws Exception {

        logger.debug("Executing runInterpreterCancerTiering in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterCancerTieringCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterCancerTieringCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        CancerTieringInterpretationAnalysisParams cancerTieringInterpretationAnalysisParams = new CancerTieringInterpretationAnalysisParams()
            .setClinicalAnalysis(commandOptions.clinicalAnalysis)
            .setDiscardedVariants(CommandLineUtils.getListValues(commandOptions.discardedVariants))
            .setPrimary(commandOptions.primary);
        return openCGAClient.getClinicalAnalysisClient().runInterpreterCancerTiering(cancerTieringInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterTeam() throws Exception {

        logger.debug("Executing runInterpreterTeam in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterTeamCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterTeamCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        TeamInterpretationAnalysisParams teamInterpretationAnalysisParams = new TeamInterpretationAnalysisParams()
            .setClinicalAnalysis(commandOptions.clinicalAnalysis)
            .setPanels(CommandLineUtils.getListValues(commandOptions.panels))
            .setFamilySegregation(commandOptions.familySegregation)
            .setPrimary(commandOptions.primary);
        return openCGAClient.getClinicalAnalysisClient().runInterpreterTeam(teamInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterTiering() throws Exception {

        logger.debug("Executing runInterpreterTiering in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterTieringCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterTieringCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        TieringInterpretationAnalysisParams tieringInterpretationAnalysisParams = new TieringInterpretationAnalysisParams()
            .setClinicalAnalysis(commandOptions.clinicalAnalysis)
            .setPanels(CommandLineUtils.getListValues(commandOptions.panels))
            .setPrimary(commandOptions.primary);
        return openCGAClient.getClinicalAnalysisClient().runInterpreterTiering(tieringInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInterpreterZetta() throws Exception {

        logger.debug("Executing runInterpreterZetta in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunInterpreterZettaCommandOptions commandOptions = analysisClinicalCommandOptions.runInterpreterZettaCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        ZettaInterpretationAnalysisParams zettaInterpretationAnalysisParams = new ZettaInterpretationAnalysisParams()
            .setClinicalAnalysis(commandOptions.clinicalAnalysis)
            .setId(CommandLineUtils.getListValues(commandOptions.id))
            .setRegion(commandOptions.region)
            .setType(commandOptions.type)
            .setStudy(commandOptions.bodyStudy)
            .setFile(commandOptions.file)
            .setFilter(commandOptions.filter)
            .setQual(commandOptions.qual)
            .setFileData(commandOptions.fileData)
            .setSample(commandOptions.sample)
            .setSampleData(commandOptions.sampleData)
            .setSampleAnnotation(commandOptions.sampleAnnotation)
            .setSampleMetadata(commandOptions.sampleMetadata)
            .setCohort(commandOptions.cohort)
            .setCohortStatsRef(commandOptions.cohortStatsRef)
            .setCohortStatsAlt(commandOptions.cohortStatsAlt)
            .setCohortStatsMaf(commandOptions.cohortStatsMaf)
            .setCohortStatsMgf(commandOptions.cohortStatsMgf)
            .setCohortStatsPass(commandOptions.cohortStatsPass)
            .setScore(commandOptions.score)
            .setFamily(commandOptions.family)
            .setFamilyDisorder(commandOptions.familyDisorder)
            .setFamilySegregation(commandOptions.familySegregation)
            .setFamilyMembers(commandOptions.familyMembers)
            .setFamilyProband(commandOptions.familyProband)
            .setGene(commandOptions.gene)
            .setCt(commandOptions.ct)
            .setXref(commandOptions.xref)
            .setBiotype(commandOptions.biotype)
            .setProteinSubstitution(commandOptions.proteinSubstitution)
            .setConservation(commandOptions.conservation)
            .setPopulationFrequencyAlt(commandOptions.populationFrequencyAlt)
            .setPopulationFrequencyRef(commandOptions.populationFrequencyRef)
            .setPopulationFrequencyMaf(commandOptions.populationFrequencyMaf)
            .setTranscriptFlag(commandOptions.transcriptFlag)
            .setGeneTraitId(commandOptions.geneTraitId)
            .setGo(commandOptions.go)
            .setExpression(commandOptions.expression)
            .setProteinKeyword(commandOptions.proteinKeyword)
            .setDrug(commandOptions.drug)
            .setFunctionalScore(commandOptions.functionalScore)
            .setClinical(commandOptions.clinical)
            .setClinicalSignificance(commandOptions.clinicalSignificance)
            .setClinicalConfirmedStatus(commandOptions.clinicalConfirmedStatus)
            .setCustomAnnotation(commandOptions.customAnnotation)
            .setPanel(commandOptions.panel)
            .setPanelModeOfInheritance(commandOptions.panelModeOfInheritance)
            .setPanelConfidence(commandOptions.panelConfidence)
            .setPanelRoleInCancer(commandOptions.panelRoleInCancer)
            .setTrait(commandOptions.trait)
            .setPrimary(commandOptions.primary);
        return openCGAClient.getClinicalAnalysisClient().runInterpreterZetta(zettaInterpretationAnalysisParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStatsRga() throws Exception {

        logger.debug("Executing aggregationStatsRga in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.AggregationStatsRgaCommandOptions commandOptions = analysisClinicalCommandOptions.aggregationStatsRgaCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().aggregationStatsRga(commandOptions.field, queryParams);
    }

    private RestResponse<RgaKnockoutByGene> queryRgaGene() throws Exception {

        logger.debug("Executing queryRgaGene in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryRgaGeneCommandOptions commandOptions = analysisClinicalCommandOptions.queryRgaGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotNull("skipIndividual", commandOptions.skipIndividual);
        queryParams.putIfNotNull("limitIndividual", commandOptions.limitIndividual);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryRgaGene(queryParams);
    }

    private RestResponse<KnockoutByGeneSummary> summaryRgaGene() throws Exception {

        logger.debug("Executing summaryRgaGene in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SummaryRgaGeneCommandOptions commandOptions = analysisClinicalCommandOptions.summaryRgaGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().summaryRgaGene(queryParams);
    }

    private RestResponse<Job> runRgaIndex() throws Exception {

        logger.debug("Executing runRgaIndex in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.RunRgaIndexCommandOptions commandOptions = analysisClinicalCommandOptions.runRgaIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotNull("auxiliarIndex", commandOptions.auxiliarIndex);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        RgaAnalysisParams rgaAnalysisParams = new RgaAnalysisParams()
            .setFile(commandOptions.file);
        return openCGAClient.getClinicalAnalysisClient().runRgaIndex(rgaAnalysisParams, queryParams);
    }

    private RestResponse<KnockoutByIndividual> queryRgaIndividual() throws Exception {

        logger.debug("Executing queryRgaIndividual in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryRgaIndividualCommandOptions commandOptions = analysisClinicalCommandOptions.queryRgaIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryRgaIndividual(queryParams);
    }

    private RestResponse<KnockoutByIndividualSummary> summaryRgaIndividual() throws Exception {

        logger.debug("Executing summaryRgaIndividual in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SummaryRgaIndividualCommandOptions commandOptions = analysisClinicalCommandOptions.summaryRgaIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().summaryRgaIndividual(queryParams);
    }

    private RestResponse<KnockoutByVariant> queryRgaVariant() throws Exception {

        logger.debug("Executing queryRgaVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryRgaVariantCommandOptions commandOptions = analysisClinicalCommandOptions.queryRgaVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("includeIndividual", commandOptions.includeIndividual);
        queryParams.putIfNotNull("skipIndividual", commandOptions.skipIndividual);
        queryParams.putIfNotNull("limitIndividual", commandOptions.limitIndividual);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryRgaVariant(queryParams);
    }

    private RestResponse<KnockoutByVariantSummary> summaryRgaVariant() throws Exception {

        logger.debug("Executing summaryRgaVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SummaryRgaVariantCommandOptions commandOptions = analysisClinicalCommandOptions.summaryRgaVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("sampleId", commandOptions.sampleId);
        queryParams.putIfNotEmpty("individualId", commandOptions.individualId);
        queryParams.putIfNotEmpty("sex", commandOptions.sex);
        queryParams.putIfNotEmpty("phenotypes", commandOptions.phenotypes);
        queryParams.putIfNotEmpty("disorders", commandOptions.disorders);
        queryParams.putIfNotEmpty("numParents", commandOptions.numParents);
        queryParams.putIfNotEmpty("geneId", commandOptions.geneId);
        queryParams.putIfNotEmpty("geneName", commandOptions.geneName);
        queryParams.putIfNotEmpty("chromosome", commandOptions.chromosome);
        queryParams.putIfNotEmpty("start", commandOptions.start);
        queryParams.putIfNotEmpty("end", commandOptions.end);
        queryParams.putIfNotEmpty("transcriptId", commandOptions.transcriptId);
        queryParams.putIfNotEmpty("variants", commandOptions.variants);
        queryParams.putIfNotEmpty("dbSnps", commandOptions.dbSnps);
        queryParams.putIfNotEmpty("knockoutType", commandOptions.knockoutType);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotEmpty("populationFrequency", commandOptions.populationFrequency);
        queryParams.putIfNotEmpty("consequenceType", commandOptions.consequenceType);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().summaryRgaVariant(queryParams);
    }

    private RestResponse<ClinicalAnalysis> search() throws Exception {

        logger.debug("Executing search in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.SearchCommandOptions commandOptions = analysisClinicalCommandOptions.searchCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("uuid", commandOptions.uuid);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        queryParams.putIfNotEmpty("files", commandOptions.files);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("individual", commandOptions.individual);
        queryParams.putIfNotEmpty("proband", commandOptions.proband);
        queryParams.putIfNotEmpty("probandSamples", commandOptions.probandSamples);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyMemberSamples", commandOptions.familyMemberSamples);
        queryParams.putIfNotEmpty("panels", commandOptions.panels);
        queryParams.putIfNotNull("locked", commandOptions.locked);
        queryParams.putIfNotEmpty("analystId", commandOptions.analystId);
        queryParams.putIfNotEmpty("priority", commandOptions.priority);
        queryParams.putIfNotEmpty("flags", commandOptions.flags);
        queryParams.putIfNotEmpty("creationDate", commandOptions.creationDate);
        queryParams.putIfNotEmpty("modificationDate", commandOptions.modificationDate);
        queryParams.putIfNotEmpty("qualityControlSummary", commandOptions.qualityControlSummary);
        queryParams.putIfNotEmpty("release", commandOptions.release);
        queryParams.putIfNotEmpty("status", commandOptions.status);
        queryParams.putIfNotEmpty("internalStatus", commandOptions.internalStatus);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().search(queryParams);
    }

    private RestResponse<ClinicalVariant> actionableVariant() throws Exception {

        logger.debug("Executing actionableVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.ActionableVariantCommandOptions commandOptions = analysisClinicalCommandOptions.actionableVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().actionableVariant(queryParams);
    }

    private RestResponse<ClinicalVariant> queryVariant() throws Exception {

        logger.debug("Executing queryVariant in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.QueryVariantCommandOptions commandOptions = analysisClinicalCommandOptions.queryVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("approximateCount", commandOptions.approximateCount);
        queryParams.putIfNotNull("approximateCountSamplingSize", commandOptions.approximateCountSamplingSize);
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().queryVariant(queryParams);
    }

    private RestResponse<ObjectMap> acl() throws Exception {

        logger.debug("Executing acl in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.AclCommandOptions commandOptions = analysisClinicalCommandOptions.aclCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("member", commandOptions.member);
        queryParams.putIfNotNull("silent", commandOptions.silent);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().acl(commandOptions.clinicalAnalyses, queryParams);
    }

    private RestResponse<ClinicalAnalysis> delete() throws Exception {

        logger.debug("Executing delete in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DeleteCommandOptions commandOptions = analysisClinicalCommandOptions.deleteCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("force", commandOptions.force);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().delete(commandOptions.clinicalAnalyses, queryParams);
    }

    private RestResponse<ClinicalAnalysis> update() throws Exception {

        logger.debug("Executing update in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateCommandOptions commandOptions = analysisClinicalCommandOptions.updateCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("commentsAction", commandOptions.commentsAction);
        queryParams.putIfNotNull("flagsAction", commandOptions.flagsAction);
        queryParams.putIfNotNull("filesAction", commandOptions.filesAction);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        ClinicalAnalysisUpdateParams clinicalAnalysisUpdateParams = new ClinicalAnalysisUpdateParams()
            .setId(commandOptions.id)
            .setDescription(commandOptions.description)
            .setCreationDate(commandOptions.creationDate)
            .setModificationDate(commandOptions.modificationDate)
            .setDueDate(commandOptions.dueDate);
        return openCGAClient.getClinicalAnalysisClient().update(commandOptions.clinicalAnalyses, clinicalAnalysisUpdateParams, queryParams);
    }

    private RestResponse<ClinicalAnalysis> info() throws Exception {

        logger.debug("Executing info in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.InfoCommandOptions commandOptions = analysisClinicalCommandOptions.infoCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("deleted", commandOptions.deleted);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().info(commandOptions.clinicalAnalysis, queryParams);
    }

    private RestResponse<Interpretation> createInterpretation() throws Exception {

        logger.debug("Executing createInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.CreateInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.createInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("setAs", commandOptions.setAs);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        InterpretationCreateParams interpretationCreateParams = new InterpretationCreateParams()
            .setId(commandOptions.id)
            .setDescription(commandOptions.description)
            .setClinicalAnalysisId(commandOptions.clinicalAnalysisId)
            .setCreationDate(commandOptions.creationDate)
            .setModificationDate(commandOptions.modificationDate);
        return openCGAClient.getClinicalAnalysisClient().createInterpretation(commandOptions.clinicalAnalysis, interpretationCreateParams, queryParams);
    }

    private RestResponse<Interpretation> deleteInterpretation() throws Exception {

        logger.debug("Executing deleteInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.DeleteInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.deleteInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("setAsPrimary", commandOptions.setAsPrimary);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getClinicalAnalysisClient().deleteInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretations, queryParams);
    }

    private RestResponse<Interpretation> updateInterpretation() throws Exception {

        logger.debug("Executing updateInterpretation in Analysis - Clinical command line");

        AnalysisClinicalCommandOptions.UpdateInterpretationCommandOptions commandOptions = analysisClinicalCommandOptions.updateInterpretationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("primaryFindingsAction", commandOptions.primaryFindingsAction);
        queryParams.putIfNotNull("methodsAction", commandOptions.methodsAction);
        queryParams.putIfNotNull("secondaryFindingsAction", commandOptions.secondaryFindingsAction);
        queryParams.putIfNotNull("commentsAction", commandOptions.commentsAction);
        queryParams.putIfNotNull("setAs", commandOptions.setAs);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        InterpretationUpdateParams interpretationUpdateParams = new InterpretationUpdateParams()
            .setId(commandOptions.id)
            .setDescription(commandOptions.description)
            .setCreationDate(commandOptions.creationDate)
            .setModificationDate(commandOptions.modificationDate);
        return openCGAClient.getClinicalAnalysisClient().updateInterpretation(commandOptions.clinicalAnalysis, commandOptions.interpretation, interpretationUpdateParams, queryParams);
    }
}