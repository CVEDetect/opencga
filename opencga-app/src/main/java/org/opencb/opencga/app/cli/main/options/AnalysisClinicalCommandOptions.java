package org.opencb.opencga.app.cli.main.options;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import com.beust.jcommander.ParametersDelegate;

import static org.opencb.opencga.app.cli.GeneralCliOptions.*;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-09-15 09:50:13+0200
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Analysis - Clinical command line.
 *    Command line version: 3.0
 *    PATH: /{apiVersion}/analysis/clinical
 */
@Parameters(commandNames = {"analysis - clinical"}, commandDescription = "Analysis - Clinical commands")
public class AnalysisClinicalCommandOptions {

        public JCommander jCommander;
        public CommonCommandOptions commonCommandOptions;

        public UpdateAclCommandOptions updateAclCommandOptions;
        public CreateCommandOptions createCommandOptions;
        public DistinctCommandOptions distinctCommandOptions;
        public DistinctInterpretationCommandOptions distinctInterpretationCommandOptions;
        public SearchInterpretationCommandOptions searchInterpretationCommandOptions;
        public InfoInterpretationCommandOptions infoInterpretationCommandOptions;
        public RunInterpreterCancerTieringCommandOptions runInterpreterCancerTieringCommandOptions;
        public RunInterpreterTeamCommandOptions runInterpreterTeamCommandOptions;
        public RunInterpreterTieringCommandOptions runInterpreterTieringCommandOptions;
        public RunInterpreterZettaCommandOptions runInterpreterZettaCommandOptions;
        public AggregationStatsRgaCommandOptions aggregationStatsRgaCommandOptions;
        public QueryRgaGeneCommandOptions queryRgaGeneCommandOptions;
        public SummaryRgaGeneCommandOptions summaryRgaGeneCommandOptions;
        public RunRgaIndexCommandOptions runRgaIndexCommandOptions;
        public QueryRgaIndividualCommandOptions queryRgaIndividualCommandOptions;
        public SummaryRgaIndividualCommandOptions summaryRgaIndividualCommandOptions;
        public QueryRgaVariantCommandOptions queryRgaVariantCommandOptions;
        public SummaryRgaVariantCommandOptions summaryRgaVariantCommandOptions;
        public SearchCommandOptions searchCommandOptions;
        public ActionableVariantCommandOptions actionableVariantCommandOptions;
        public QueryVariantCommandOptions queryVariantCommandOptions;
        public AclCommandOptions aclCommandOptions;
        public DeleteCommandOptions deleteCommandOptions;
        public UpdateCommandOptions updateCommandOptions;
        public InfoCommandOptions infoCommandOptions;
        public CreateInterpretationCommandOptions createInterpretationCommandOptions;
        public DeleteInterpretationCommandOptions deleteInterpretationCommandOptions;
        public UpdateInterpretationCommandOptions updateInterpretationCommandOptions;


    public AnalysisClinicalCommandOptions(CommonCommandOptions commonCommandOptions, JCommander jCommander) {
    
        this.jCommander = jCommander;
        this.commonCommandOptions = commonCommandOptions;
        this.updateAclCommandOptions = new UpdateAclCommandOptions();
        this.createCommandOptions = new CreateCommandOptions();
        this.distinctCommandOptions = new DistinctCommandOptions();
        this.distinctInterpretationCommandOptions = new DistinctInterpretationCommandOptions();
        this.searchInterpretationCommandOptions = new SearchInterpretationCommandOptions();
        this.infoInterpretationCommandOptions = new InfoInterpretationCommandOptions();
        this.runInterpreterCancerTieringCommandOptions = new RunInterpreterCancerTieringCommandOptions();
        this.runInterpreterTeamCommandOptions = new RunInterpreterTeamCommandOptions();
        this.runInterpreterTieringCommandOptions = new RunInterpreterTieringCommandOptions();
        this.runInterpreterZettaCommandOptions = new RunInterpreterZettaCommandOptions();
        this.aggregationStatsRgaCommandOptions = new AggregationStatsRgaCommandOptions();
        this.queryRgaGeneCommandOptions = new QueryRgaGeneCommandOptions();
        this.summaryRgaGeneCommandOptions = new SummaryRgaGeneCommandOptions();
        this.runRgaIndexCommandOptions = new RunRgaIndexCommandOptions();
        this.queryRgaIndividualCommandOptions = new QueryRgaIndividualCommandOptions();
        this.summaryRgaIndividualCommandOptions = new SummaryRgaIndividualCommandOptions();
        this.queryRgaVariantCommandOptions = new QueryRgaVariantCommandOptions();
        this.summaryRgaVariantCommandOptions = new SummaryRgaVariantCommandOptions();
        this.searchCommandOptions = new SearchCommandOptions();
        this.actionableVariantCommandOptions = new ActionableVariantCommandOptions();
        this.queryVariantCommandOptions = new QueryVariantCommandOptions();
        this.aclCommandOptions = new AclCommandOptions();
        this.deleteCommandOptions = new DeleteCommandOptions();
        this.updateCommandOptions = new UpdateCommandOptions();
        this.infoCommandOptions = new InfoCommandOptions();
        this.createInterpretationCommandOptions = new CreateInterpretationCommandOptions();
        this.deleteInterpretationCommandOptions = new DeleteInterpretationCommandOptions();
        this.updateInterpretationCommandOptions = new UpdateInterpretationCommandOptions();
    
    }
    
    @Parameters(commandNames = {"update-acl"}, commandDescription ="Update the set of permissions granted for the member")
    public class UpdateAclCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--members"}, description = "Comma separated list of user or group IDs", required = true, arity = 1)
        public String members; 
    
        @Parameter(names = {"--action"}, description = "Action to be performed [ADD, SET, REMOVE or RESET].", required = true, arity = 1)
        public String action; 
    
        @Parameter(names = {"--propagate"}, description = "Propagate permissions to related families, individuals, samples and files", required = false, arity = 1)
        public boolean propagate; 
    
        @Parameter(names = {"--clinical-analysis"}, description = "The body web service clinicalAnalysis parameter", required = false, arity = 1)
        public String clinicalAnalysis; 
    
  }
    @Parameters(commandNames = {"create"}, commandDescription ="Create a new clinical analysis")
    public class CreateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--create-default-interpretation"}, description = "Flag to create and initialise a default primary interpretation (Id will be '{clinicalAnalysisId}.1')", required = false, arity = 1)
        public boolean createDefaultInterpretation; 
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description; 
    
        @Parameter(names = {"--creation-date"}, description = "The body web service creationDate parameter", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "The body web service modificationDate parameter", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--due-date"}, description = "The body web service dueDate parameter", required = false, arity = 1)
        public String dueDate; 
    
  }
    @Parameters(commandNames = {"distinct"}, commandDescription ="Clinical Analysis distinct method")
    public class DistinctCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--id"}, description = "Clinical analysis ID", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--type"}, description = "Clinical analysis type", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--priority"}, description = "Priority", required = false, arity = 1)
        public String priority; 
    
        @Parameter(names = {"--creation-date"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--internal-status"}, description = "Filter by internal status", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--status"}, description = "Filter by status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--due-date"}, description = "Due date (Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805...)", required = false, arity = 1)
        public String dueDate; 
    
        @Parameter(names = {"--description"}, description = "Description", required = false, arity = 1)
        public String description; 
    
        @Parameter(names = {"--family"}, description = "Family id", required = false, arity = 1)
        public String family; 
    
        @Parameter(names = {"--proband"}, description = "Proband id", required = false, arity = 1)
        public String proband; 
    
        @Parameter(names = {"--sample"}, description = "Sample id associated to the proband or any member of a family", required = false, arity = 1)
        public String sample; 
    
        @Parameter(names = {"--individual"}, description = "Proband id or any member id of a family", required = false, arity = 1)
        public String individual; 
    
        @Parameter(names = {"--analyst-assignee"}, description = "Clinical analyst assignee", required = false, arity = 1)
        public String analystAssignee; 
    
        @Parameter(names = {"--disorder"}, description = "Disorder ID or name", required = false, arity = 1)
        public String disorder; 
    
        @Parameter(names = {"--flags"}, description = "Flags", required = false, arity = 1)
        public String flags; 
    
        @Parameter(names = {"--release"}, description = "Release value", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--attributes"}, description = "Text attributes (Format: sex=male,age>20 ...)", required = false, arity = 1)
        public String attributes; 
    
        @Parameter(names = {"--field"}, description = "Field for which to obtain the distinct values", required = true, arity = 1)
        public String field; 
    
  }
    @Parameters(commandNames = {"distinct-interpretation"}, commandDescription ="Interpretation distinct method")
    public class DistinctInterpretationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--id"}, description = "Interpretation ID", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--clinical-analysis-id"}, description = "Clinical Analysis ID", required = false, arity = 1)
        public String clinicalAnalysisId; 
    
        @Parameter(names = {"--analyst"}, description = "Clinical analyst ID", required = false, arity = 1)
        public String analyst; 
    
        @Parameter(names = {"--methods"}, description = "Interpretation method name", required = false, arity = 1)
        public String methods; 
    
        @Parameter(names = {"--primary-findings"}, description = "Primary finding IDs", required = false, arity = 1)
        public String primaryFindings; 
    
        @Parameter(names = {"--secondary-findings"}, description = "Secondary finding IDs", required = false, arity = 1)
        public String secondaryFindings; 
    
        @Parameter(names = {"--status"}, description = "Interpretation status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--creation-date"}, description = "Creation date", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "Modification date", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--field"}, description = "Field for which to obtain the distinct values", required = true, arity = 1)
        public String field; 
    
  }
    @Parameters(commandNames = {"search-interpretation"}, commandDescription ="Search clinical interpretations")
    public class SearchInterpretationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--sort"}, description = "Sort the results", required = false, arity = 1)
        public boolean sort; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--id"}, description = "Interpretation ID", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--clinical-analysis-id"}, description = "Clinical Analysis ID", required = false, arity = 1)
        public String clinicalAnalysisId; 
    
        @Parameter(names = {"--analyst"}, description = "Clinical analyst ID", required = false, arity = 1)
        public String analyst; 
    
        @Parameter(names = {"--methods"}, description = "Interpretation method name", required = false, arity = 1)
        public String methods; 
    
        @Parameter(names = {"--primary-findings"}, description = "Primary finding IDs", required = false, arity = 1)
        public String primaryFindings; 
    
        @Parameter(names = {"--secondary-findings"}, description = "Secondary finding IDs", required = false, arity = 1)
        public String secondaryFindings; 
    
        @Parameter(names = {"--status"}, description = "Interpretation status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--creation-date"}, description = "Creation date", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "Modification date", required = false, arity = 1)
        public String modificationDate; 
    
  }
    @Parameters(commandNames = {"info-interpretation"}, commandDescription ="Clinical interpretation information")
    public class InfoInterpretationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--interpretations"}, description = "Comma separated list of clinical interpretation IDs  up to a maximum of 100", required = false, arity = 1)
        public String interpretations; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--version"}, description = "Comma separated list of interpretation versions. 'all' to get all the interpretation versions. Not supported if multiple interpretation ids are provided.", required = false, arity = 1)
        public String version; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, arity = 1)
        public boolean deleted; 
    
  }
    @Parameters(commandNames = {"run-interpreter-cancerTiering"}, commandDescription ="Run cancer tiering interpretation analysis")
    public class RunInterpreterCancerTieringCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--clinical-analysis"}, description = "The body web service clinicalAnalysis parameter", required = false, arity = 1)
        public String clinicalAnalysis; 
    
        @Parameter(names = {"--primary"}, description = "The body web service primary parameter", required = false, arity = 1)
        public boolean primary; 
    
  }
    @Parameters(commandNames = {"run-interpreter-team"}, commandDescription ="Run TEAM interpretation analysis")
    public class RunInterpreterTeamCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--clinical-analysis"}, description = "The body web service clinicalAnalysis parameter", required = false, arity = 1)
        public String clinicalAnalysis; 
    
        @Parameter(names = {"--family-segregation"}, description = "The body web service familySegregation parameter", required = false, arity = 1)
        public String familySegregation; 
    
        @Parameter(names = {"--primary"}, description = "The body web service primary parameter", required = false, arity = 1)
        public boolean primary; 
    
  }
    @Parameters(commandNames = {"run-interpreter-tiering"}, commandDescription ="Run tiering interpretation analysis")
    public class RunInterpreterTieringCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--clinical-analysis"}, description = "The body web service clinicalAnalysis parameter", required = false, arity = 1)
        public String clinicalAnalysis; 
    
        @Parameter(names = {"--primary"}, description = "The body web service primary parameter", required = false, arity = 1)
        public boolean primary; 
    
  }
    @Parameters(commandNames = {"run-interpreter-zetta"}, commandDescription ="Run Zetta interpretation analysis")
    public class RunInterpreterZettaCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--clinical-analysis"}, description = "The body web service clinicalAnalysis parameter", required = false, arity = 1)
        public String clinicalAnalysis; 
    
        @Parameter(names = {"--region"}, description = "The body web service region parameter", required = false, arity = 1)
        public String region; 
    
        @Parameter(names = {"--type"}, description = "The body web service type parameter", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--body_study"}, description = "The body web service study parameter", required = false, arity = 1)
        public String bodyStudy; 
    
        @Parameter(names = {"--file"}, description = "The body web service file parameter", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--filter"}, description = "The body web service filter parameter", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--qual"}, description = "The body web service qual parameter", required = false, arity = 1)
        public String qual; 
    
        @Parameter(names = {"--file-data"}, description = "The body web service fileData parameter", required = false, arity = 1)
        public String fileData; 
    
        @Parameter(names = {"--sample"}, description = "The body web service sample parameter", required = false, arity = 1)
        public String sample; 
    
        @Parameter(names = {"--sample-data"}, description = "The body web service sampleData parameter", required = false, arity = 1)
        public String sampleData; 
    
        @Parameter(names = {"--sample-annotation"}, description = "The body web service sampleAnnotation parameter", required = false, arity = 1)
        public String sampleAnnotation; 
    
        @Parameter(names = {"--sample-metadata"}, description = "The body web service sampleMetadata parameter", required = false, arity = 1)
        public String sampleMetadata; 
    
        @Parameter(names = {"--cohort"}, description = "The body web service cohort parameter", required = false, arity = 1)
        public String cohort; 
    
        @Parameter(names = {"--cohort-stats-ref"}, description = "The body web service cohortStatsRef parameter", required = false, arity = 1)
        public String cohortStatsRef; 
    
        @Parameter(names = {"--cohort-stats-alt"}, description = "The body web service cohortStatsAlt parameter", required = false, arity = 1)
        public String cohortStatsAlt; 
    
        @Parameter(names = {"--cohort-stats-maf"}, description = "The body web service cohortStatsMaf parameter", required = false, arity = 1)
        public String cohortStatsMaf; 
    
        @Parameter(names = {"--cohort-stats-mgf"}, description = "The body web service cohortStatsMgf parameter", required = false, arity = 1)
        public String cohortStatsMgf; 
    
        @Parameter(names = {"--cohort-stats-pass"}, description = "The body web service cohortStatsPass parameter", required = false, arity = 1)
        public String cohortStatsPass; 
    
        @Parameter(names = {"--score"}, description = "The body web service score parameter", required = false, arity = 1)
        public String score; 
    
        @Parameter(names = {"--family"}, description = "The body web service family parameter", required = false, arity = 1)
        public String family; 
    
        @Parameter(names = {"--family-disorder"}, description = "The body web service familyDisorder parameter", required = false, arity = 1)
        public String familyDisorder; 
    
        @Parameter(names = {"--family-segregation"}, description = "The body web service familySegregation parameter", required = false, arity = 1)
        public String familySegregation; 
    
        @Parameter(names = {"--family-members"}, description = "The body web service familyMembers parameter", required = false, arity = 1)
        public String familyMembers; 
    
        @Parameter(names = {"--family-proband"}, description = "The body web service familyProband parameter", required = false, arity = 1)
        public String familyProband; 
    
        @Parameter(names = {"--gene"}, description = "The body web service gene parameter", required = false, arity = 1)
        public String gene; 
    
        @Parameter(names = {"--ct"}, description = "The body web service ct parameter", required = false, arity = 1)
        public String ct; 
    
        @Parameter(names = {"--xref"}, description = "The body web service xref parameter", required = false, arity = 1)
        public String xref; 
    
        @Parameter(names = {"--biotype"}, description = "The body web service biotype parameter", required = false, arity = 1)
        public String biotype; 
    
        @Parameter(names = {"--protein-substitution"}, description = "The body web service proteinSubstitution parameter", required = false, arity = 1)
        public String proteinSubstitution; 
    
        @Parameter(names = {"--conservation"}, description = "The body web service conservation parameter", required = false, arity = 1)
        public String conservation; 
    
        @Parameter(names = {"--population-frequency-alt"}, description = "The body web service populationFrequencyAlt parameter", required = false, arity = 1)
        public String populationFrequencyAlt; 
    
        @Parameter(names = {"--population-frequency-ref"}, description = "The body web service populationFrequencyRef parameter", required = false, arity = 1)
        public String populationFrequencyRef; 
    
        @Parameter(names = {"--population-frequency-maf"}, description = "The body web service populationFrequencyMaf parameter", required = false, arity = 1)
        public String populationFrequencyMaf; 
    
        @Parameter(names = {"--transcript-flag"}, description = "The body web service transcriptFlag parameter", required = false, arity = 1)
        public String transcriptFlag; 
    
        @Parameter(names = {"--gene-trait-id"}, description = "The body web service geneTraitId parameter", required = false, arity = 1)
        public String geneTraitId; 
    
        @Parameter(names = {"--go"}, description = "The body web service go parameter", required = false, arity = 1)
        public String go; 
    
        @Parameter(names = {"--expression"}, description = "The body web service expression parameter", required = false, arity = 1)
        public String expression; 
    
        @Parameter(names = {"--protein-keyword"}, description = "The body web service proteinKeyword parameter", required = false, arity = 1)
        public String proteinKeyword; 
    
        @Parameter(names = {"--drug"}, description = "The body web service drug parameter", required = false, arity = 1)
        public String drug; 
    
        @Parameter(names = {"--functional-score"}, description = "The body web service functionalScore parameter", required = false, arity = 1)
        public String functionalScore; 
    
        @Parameter(names = {"--clinical"}, description = "The body web service clinical parameter", required = false, arity = 1)
        public String clinical; 
    
        @Parameter(names = {"--clinical-significance"}, description = "The body web service clinicalSignificance parameter", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--clinical-confirmed-status"}, description = "The body web service clinicalConfirmedStatus parameter", required = false, arity = 1)
        public boolean clinicalConfirmedStatus; 
    
        @Parameter(names = {"--custom-annotation"}, description = "The body web service customAnnotation parameter", required = false, arity = 1)
        public String customAnnotation; 
    
        @Parameter(names = {"--panel"}, description = "The body web service panel parameter", required = false, arity = 1)
        public String panel; 
    
        @Parameter(names = {"--panel-mode-of-inheritance"}, description = "The body web service panelModeOfInheritance parameter", required = false, arity = 1)
        public String panelModeOfInheritance; 
    
        @Parameter(names = {"--panel-confidence"}, description = "The body web service panelConfidence parameter", required = false, arity = 1)
        public String panelConfidence; 
    
        @Parameter(names = {"--panel-role-in-cancer"}, description = "The body web service panelRoleInCancer parameter", required = false, arity = 1)
        public String panelRoleInCancer; 
    
        @Parameter(names = {"--trait"}, description = "The body web service trait parameter", required = false, arity = 1)
        public String trait; 
    
        @Parameter(names = {"--primary"}, description = "The body web service primary parameter", required = false, arity = 1)
        public boolean primary; 
    
  }
    @Parameters(commandNames = {"aggregationStats-rga"}, commandDescription ="RGA aggregation stats")
    public class AggregationStatsRgaCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--sample-id"}, description = "Filter by sample id.", required = false, arity = 1)
        public String sampleId; 
    
        @Parameter(names = {"--individual-id"}, description = "Filter by individual id.", required = false, arity = 1)
        public String individualId; 
    
        @Parameter(names = {"--sex"}, description = "Filter by sex.", required = false, arity = 1)
        public String sex; 
    
        @Parameter(names = {"--phenotypes"}, description = "Filter by phenotypes.", required = false, arity = 1)
        public String phenotypes; 
    
        @Parameter(names = {"--disorders"}, description = "Filter by disorders.", required = false, arity = 1)
        public String disorders; 
    
        @Parameter(names = {"--num-parents"}, description = "Filter by the number of parents registered.", required = false, arity = 1)
        public String numParents; 
    
        @Parameter(names = {"--gene-id"}, description = "Filter by gene id.", required = false, arity = 1)
        public String geneId; 
    
        @Parameter(names = {"--gene-name"}, description = "Filter by gene name.", required = false, arity = 1)
        public String geneName; 
    
        @Parameter(names = {"--chromosome"}, description = "Filter by chromosome.", required = false, arity = 1)
        public String chromosome; 
    
        @Parameter(names = {"--start"}, description = "Filter by start position.", required = false, arity = 1)
        public String start; 
    
        @Parameter(names = {"--end"}, description = "Filter by end position.", required = false, arity = 1)
        public String end; 
    
        @Parameter(names = {"--transcript-id"}, description = "Filter by transcript id.", required = false, arity = 1)
        public String transcriptId; 
    
        @Parameter(names = {"--variants"}, description = "Filter by variant id.", required = false, arity = 1)
        public String variants; 
    
        @Parameter(names = {"--db-snps"}, description = "Filter by DB_SNP id.", required = false, arity = 1)
        public String dbSnps; 
    
        @Parameter(names = {"--knockout-type"}, description = "Filter by knockout type.", required = false, arity = 1)
        public String knockoutType; 
    
        @Parameter(names = {"--filter"}, description = "Filter by filter (PASS, NOT_PASS).", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--type"}, description = "Filter by variant type.", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Filter by clinical significance.", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--population-frequency"}, description = "Filter by population frequency.", required = false, arity = 1)
        public String populationFrequency; 
    
        @Parameter(names = {"--consequence-type"}, description = "Filter by consequence type.", required = false, arity = 1)
        public String consequenceType; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--field"}, description = "List of fields separated by semicolons, e.g.: clinicalSignificances;type. For nested fields use >>, e.g.: type>>clinicalSignificances;knockoutType", required = true, arity = 1)
        public String field; 
    
  }
    @Parameters(commandNames = {"query-rga-gene"}, commandDescription ="Query gene RGA")
    public class QueryRgaGeneCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--include-individual"}, description = "Include only the comma separated list of individuals to the response", required = false, arity = 1)
        public String includeIndividual; 
    
        @Parameter(names = {"--skip-individual"}, description = "Number of individuals to skip", required = false, arity = 1)
        public int skipIndividual; 
    
        @Parameter(names = {"--limit-individual"}, description = "Limit number of individuals returned (default: 1000)", required = false, arity = 1)
        public int limitIndividual; 
    
        @Parameter(names = {"--sample-id"}, description = "Filter by sample id.", required = false, arity = 1)
        public String sampleId; 
    
        @Parameter(names = {"--individual-id"}, description = "Filter by individual id.", required = false, arity = 1)
        public String individualId; 
    
        @Parameter(names = {"--sex"}, description = "Filter by sex.", required = false, arity = 1)
        public String sex; 
    
        @Parameter(names = {"--phenotypes"}, description = "Filter by phenotypes.", required = false, arity = 1)
        public String phenotypes; 
    
        @Parameter(names = {"--disorders"}, description = "Filter by disorders.", required = false, arity = 1)
        public String disorders; 
    
        @Parameter(names = {"--num-parents"}, description = "Filter by the number of parents registered.", required = false, arity = 1)
        public String numParents; 
    
        @Parameter(names = {"--gene-id"}, description = "Filter by gene id.", required = false, arity = 1)
        public String geneId; 
    
        @Parameter(names = {"--gene-name"}, description = "Filter by gene name.", required = false, arity = 1)
        public String geneName; 
    
        @Parameter(names = {"--chromosome"}, description = "Filter by chromosome.", required = false, arity = 1)
        public String chromosome; 
    
        @Parameter(names = {"--start"}, description = "Filter by start position.", required = false, arity = 1)
        public String start; 
    
        @Parameter(names = {"--end"}, description = "Filter by end position.", required = false, arity = 1)
        public String end; 
    
        @Parameter(names = {"--transcript-id"}, description = "Filter by transcript id.", required = false, arity = 1)
        public String transcriptId; 
    
        @Parameter(names = {"--variants"}, description = "Filter by variant id.", required = false, arity = 1)
        public String variants; 
    
        @Parameter(names = {"--db-snps"}, description = "Filter by DB_SNP id.", required = false, arity = 1)
        public String dbSnps; 
    
        @Parameter(names = {"--knockout-type"}, description = "Filter by knockout type.", required = false, arity = 1)
        public String knockoutType; 
    
        @Parameter(names = {"--filter"}, description = "Filter by filter (PASS, NOT_PASS).", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--type"}, description = "Filter by variant type.", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Filter by clinical significance.", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--population-frequency"}, description = "Filter by population frequency.", required = false, arity = 1)
        public String populationFrequency; 
    
        @Parameter(names = {"--consequence-type"}, description = "Filter by consequence type.", required = false, arity = 1)
        public String consequenceType; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
  }
    @Parameters(commandNames = {"summary-rga-gene"}, commandDescription ="RGA gene summary stats")
    public class SummaryRgaGeneCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--sample-id"}, description = "Filter by sample id.", required = false, arity = 1)
        public String sampleId; 
    
        @Parameter(names = {"--individual-id"}, description = "Filter by individual id.", required = false, arity = 1)
        public String individualId; 
    
        @Parameter(names = {"--sex"}, description = "Filter by sex.", required = false, arity = 1)
        public String sex; 
    
        @Parameter(names = {"--phenotypes"}, description = "Filter by phenotypes.", required = false, arity = 1)
        public String phenotypes; 
    
        @Parameter(names = {"--disorders"}, description = "Filter by disorders.", required = false, arity = 1)
        public String disorders; 
    
        @Parameter(names = {"--num-parents"}, description = "Filter by the number of parents registered.", required = false, arity = 1)
        public String numParents; 
    
        @Parameter(names = {"--gene-id"}, description = "Filter by gene id.", required = false, arity = 1)
        public String geneId; 
    
        @Parameter(names = {"--gene-name"}, description = "Filter by gene name.", required = false, arity = 1)
        public String geneName; 
    
        @Parameter(names = {"--chromosome"}, description = "Filter by chromosome.", required = false, arity = 1)
        public String chromosome; 
    
        @Parameter(names = {"--start"}, description = "Filter by start position.", required = false, arity = 1)
        public String start; 
    
        @Parameter(names = {"--end"}, description = "Filter by end position.", required = false, arity = 1)
        public String end; 
    
        @Parameter(names = {"--transcript-id"}, description = "Filter by transcript id.", required = false, arity = 1)
        public String transcriptId; 
    
        @Parameter(names = {"--variants"}, description = "Filter by variant id.", required = false, arity = 1)
        public String variants; 
    
        @Parameter(names = {"--db-snps"}, description = "Filter by DB_SNP id.", required = false, arity = 1)
        public String dbSnps; 
    
        @Parameter(names = {"--knockout-type"}, description = "Filter by knockout type.", required = false, arity = 1)
        public String knockoutType; 
    
        @Parameter(names = {"--filter"}, description = "Filter by filter (PASS, NOT_PASS).", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--type"}, description = "Filter by variant type.", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Filter by clinical significance.", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--population-frequency"}, description = "Filter by population frequency.", required = false, arity = 1)
        public String populationFrequency; 
    
        @Parameter(names = {"--consequence-type"}, description = "Filter by consequence type.", required = false, arity = 1)
        public String consequenceType; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
  }
    @Parameters(commandNames = {"run-rga-index"}, commandDescription ="Generate Recessive Gene Analysis secondary index")
    public class RunRgaIndexCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--job-id"}, description = "Job ID. It must be a unique string within the study. An ID will be autogenerated automatically if not provided.", required = false, arity = 1)
        public String jobId; 
    
        @Parameter(names = {"--job-description"}, description = "Job description", required = false, arity = 1)
        public String jobDescription; 
    
        @Parameter(names = {"--job-depends-on"}, description = "Comma separated list of existing job IDs the job will depend on.", required = false, arity = 1)
        public String jobDependsOn; 
    
        @Parameter(names = {"--job-tags"}, description = "Job tags", required = false, arity = 1)
        public String jobTags; 
    
        @Parameter(names = {"--auxiliar-index"}, description = "Index auxiliar collection to improve performance assuming RGA is completely indexed.", required = false, arity = 1)
        public boolean auxiliarIndex; 
    
        @Parameter(names = {"--file"}, description = "The body web service file parameter", required = false, arity = 1)
        public String file; 
    
  }
    @Parameters(commandNames = {"query-rga-individual"}, commandDescription ="Query individual RGA")
    public class QueryRgaIndividualCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--sample-id"}, description = "Filter by sample id.", required = false, arity = 1)
        public String sampleId; 
    
        @Parameter(names = {"--individual-id"}, description = "Filter by individual id.", required = false, arity = 1)
        public String individualId; 
    
        @Parameter(names = {"--sex"}, description = "Filter by sex.", required = false, arity = 1)
        public String sex; 
    
        @Parameter(names = {"--phenotypes"}, description = "Filter by phenotypes.", required = false, arity = 1)
        public String phenotypes; 
    
        @Parameter(names = {"--disorders"}, description = "Filter by disorders.", required = false, arity = 1)
        public String disorders; 
    
        @Parameter(names = {"--num-parents"}, description = "Filter by the number of parents registered.", required = false, arity = 1)
        public String numParents; 
    
        @Parameter(names = {"--gene-id"}, description = "Filter by gene id.", required = false, arity = 1)
        public String geneId; 
    
        @Parameter(names = {"--gene-name"}, description = "Filter by gene name.", required = false, arity = 1)
        public String geneName; 
    
        @Parameter(names = {"--chromosome"}, description = "Filter by chromosome.", required = false, arity = 1)
        public String chromosome; 
    
        @Parameter(names = {"--start"}, description = "Filter by start position.", required = false, arity = 1)
        public String start; 
    
        @Parameter(names = {"--end"}, description = "Filter by end position.", required = false, arity = 1)
        public String end; 
    
        @Parameter(names = {"--transcript-id"}, description = "Filter by transcript id.", required = false, arity = 1)
        public String transcriptId; 
    
        @Parameter(names = {"--variants"}, description = "Filter by variant id.", required = false, arity = 1)
        public String variants; 
    
        @Parameter(names = {"--db-snps"}, description = "Filter by DB_SNP id.", required = false, arity = 1)
        public String dbSnps; 
    
        @Parameter(names = {"--knockout-type"}, description = "Filter by knockout type.", required = false, arity = 1)
        public String knockoutType; 
    
        @Parameter(names = {"--filter"}, description = "Filter by filter (PASS, NOT_PASS).", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--type"}, description = "Filter by variant type.", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Filter by clinical significance.", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--population-frequency"}, description = "Filter by population frequency.", required = false, arity = 1)
        public String populationFrequency; 
    
        @Parameter(names = {"--consequence-type"}, description = "Filter by consequence type.", required = false, arity = 1)
        public String consequenceType; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
  }
    @Parameters(commandNames = {"summary-rga-individual"}, commandDescription ="RGA individual summary stats")
    public class SummaryRgaIndividualCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--sample-id"}, description = "Filter by sample id.", required = false, arity = 1)
        public String sampleId; 
    
        @Parameter(names = {"--individual-id"}, description = "Filter by individual id.", required = false, arity = 1)
        public String individualId; 
    
        @Parameter(names = {"--sex"}, description = "Filter by sex.", required = false, arity = 1)
        public String sex; 
    
        @Parameter(names = {"--phenotypes"}, description = "Filter by phenotypes.", required = false, arity = 1)
        public String phenotypes; 
    
        @Parameter(names = {"--disorders"}, description = "Filter by disorders.", required = false, arity = 1)
        public String disorders; 
    
        @Parameter(names = {"--num-parents"}, description = "Filter by the number of parents registered.", required = false, arity = 1)
        public String numParents; 
    
        @Parameter(names = {"--gene-id"}, description = "Filter by gene id.", required = false, arity = 1)
        public String geneId; 
    
        @Parameter(names = {"--gene-name"}, description = "Filter by gene name.", required = false, arity = 1)
        public String geneName; 
    
        @Parameter(names = {"--chromosome"}, description = "Filter by chromosome.", required = false, arity = 1)
        public String chromosome; 
    
        @Parameter(names = {"--start"}, description = "Filter by start position.", required = false, arity = 1)
        public String start; 
    
        @Parameter(names = {"--end"}, description = "Filter by end position.", required = false, arity = 1)
        public String end; 
    
        @Parameter(names = {"--transcript-id"}, description = "Filter by transcript id.", required = false, arity = 1)
        public String transcriptId; 
    
        @Parameter(names = {"--variants"}, description = "Filter by variant id.", required = false, arity = 1)
        public String variants; 
    
        @Parameter(names = {"--db-snps"}, description = "Filter by DB_SNP id.", required = false, arity = 1)
        public String dbSnps; 
    
        @Parameter(names = {"--knockout-type"}, description = "Filter by knockout type.", required = false, arity = 1)
        public String knockoutType; 
    
        @Parameter(names = {"--filter"}, description = "Filter by filter (PASS, NOT_PASS).", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--type"}, description = "Filter by variant type.", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Filter by clinical significance.", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--population-frequency"}, description = "Filter by population frequency.", required = false, arity = 1)
        public String populationFrequency; 
    
        @Parameter(names = {"--consequence-type"}, description = "Filter by consequence type.", required = false, arity = 1)
        public String consequenceType; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
  }
    @Parameters(commandNames = {"query-rga-variant"}, commandDescription ="Query variant RGA")
    public class QueryRgaVariantCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--include-individual"}, description = "Include only the comma separated list of individuals to the response", required = false, arity = 1)
        public String includeIndividual; 
    
        @Parameter(names = {"--skip-individual"}, description = "Number of individuals to skip", required = false, arity = 1)
        public int skipIndividual; 
    
        @Parameter(names = {"--limit-individual"}, description = "Limit number of individuals returned (default: 1000)", required = false, arity = 1)
        public int limitIndividual; 
    
        @Parameter(names = {"--sample-id"}, description = "Filter by sample id.", required = false, arity = 1)
        public String sampleId; 
    
        @Parameter(names = {"--individual-id"}, description = "Filter by individual id.", required = false, arity = 1)
        public String individualId; 
    
        @Parameter(names = {"--sex"}, description = "Filter by sex.", required = false, arity = 1)
        public String sex; 
    
        @Parameter(names = {"--phenotypes"}, description = "Filter by phenotypes.", required = false, arity = 1)
        public String phenotypes; 
    
        @Parameter(names = {"--disorders"}, description = "Filter by disorders.", required = false, arity = 1)
        public String disorders; 
    
        @Parameter(names = {"--num-parents"}, description = "Filter by the number of parents registered.", required = false, arity = 1)
        public String numParents; 
    
        @Parameter(names = {"--gene-id"}, description = "Filter by gene id.", required = false, arity = 1)
        public String geneId; 
    
        @Parameter(names = {"--gene-name"}, description = "Filter by gene name.", required = false, arity = 1)
        public String geneName; 
    
        @Parameter(names = {"--chromosome"}, description = "Filter by chromosome.", required = false, arity = 1)
        public String chromosome; 
    
        @Parameter(names = {"--start"}, description = "Filter by start position.", required = false, arity = 1)
        public String start; 
    
        @Parameter(names = {"--end"}, description = "Filter by end position.", required = false, arity = 1)
        public String end; 
    
        @Parameter(names = {"--transcript-id"}, description = "Filter by transcript id.", required = false, arity = 1)
        public String transcriptId; 
    
        @Parameter(names = {"--variants"}, description = "Filter by variant id.", required = false, arity = 1)
        public String variants; 
    
        @Parameter(names = {"--db-snps"}, description = "Filter by DB_SNP id.", required = false, arity = 1)
        public String dbSnps; 
    
        @Parameter(names = {"--knockout-type"}, description = "Filter by knockout type.", required = false, arity = 1)
        public String knockoutType; 
    
        @Parameter(names = {"--filter"}, description = "Filter by filter (PASS, NOT_PASS).", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--type"}, description = "Filter by variant type.", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Filter by clinical significance.", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--population-frequency"}, description = "Filter by population frequency.", required = false, arity = 1)
        public String populationFrequency; 
    
        @Parameter(names = {"--consequence-type"}, description = "Filter by consequence type.", required = false, arity = 1)
        public String consequenceType; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
  }
    @Parameters(commandNames = {"summary-rga-variant"}, commandDescription ="RGA variant summary stats")
    public class SummaryRgaVariantCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--sample-id"}, description = "Filter by sample id.", required = false, arity = 1)
        public String sampleId; 
    
        @Parameter(names = {"--individual-id"}, description = "Filter by individual id.", required = false, arity = 1)
        public String individualId; 
    
        @Parameter(names = {"--sex"}, description = "Filter by sex.", required = false, arity = 1)
        public String sex; 
    
        @Parameter(names = {"--phenotypes"}, description = "Filter by phenotypes.", required = false, arity = 1)
        public String phenotypes; 
    
        @Parameter(names = {"--disorders"}, description = "Filter by disorders.", required = false, arity = 1)
        public String disorders; 
    
        @Parameter(names = {"--num-parents"}, description = "Filter by the number of parents registered.", required = false, arity = 1)
        public String numParents; 
    
        @Parameter(names = {"--gene-id"}, description = "Filter by gene id.", required = false, arity = 1)
        public String geneId; 
    
        @Parameter(names = {"--gene-name"}, description = "Filter by gene name.", required = false, arity = 1)
        public String geneName; 
    
        @Parameter(names = {"--chromosome"}, description = "Filter by chromosome.", required = false, arity = 1)
        public String chromosome; 
    
        @Parameter(names = {"--start"}, description = "Filter by start position.", required = false, arity = 1)
        public String start; 
    
        @Parameter(names = {"--end"}, description = "Filter by end position.", required = false, arity = 1)
        public String end; 
    
        @Parameter(names = {"--transcript-id"}, description = "Filter by transcript id.", required = false, arity = 1)
        public String transcriptId; 
    
        @Parameter(names = {"--variants"}, description = "Filter by variant id.", required = false, arity = 1)
        public String variants; 
    
        @Parameter(names = {"--db-snps"}, description = "Filter by DB_SNP id.", required = false, arity = 1)
        public String dbSnps; 
    
        @Parameter(names = {"--knockout-type"}, description = "Filter by knockout type.", required = false, arity = 1)
        public String knockoutType; 
    
        @Parameter(names = {"--filter"}, description = "Filter by filter (PASS, NOT_PASS).", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--type"}, description = "Filter by variant type.", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Filter by clinical significance.", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--population-frequency"}, description = "Filter by population frequency.", required = false, arity = 1)
        public String populationFrequency; 
    
        @Parameter(names = {"--consequence-type"}, description = "Filter by consequence type.", required = false, arity = 1)
        public String consequenceType; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
  }
    @Parameters(commandNames = {"search"}, commandDescription ="Clinical analysis search.")
    public class SearchCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--id"}, description = "Clinical analysis ID", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--type"}, description = "Clinical analysis type", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--priority"}, description = "Priority", required = false, arity = 1)
        public String priority; 
    
        @Parameter(names = {"--creation-date"}, description = "Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--internal-status"}, description = "Filter by internal status", required = false, arity = 1)
        public String internalStatus; 
    
        @Parameter(names = {"--status"}, description = "Filter by status", required = false, arity = 1)
        public String status; 
    
        @Parameter(names = {"--due-date"}, description = "Due date (Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805...)", required = false, arity = 1)
        public String dueDate; 
    
        @Parameter(names = {"--description"}, description = "Description", required = false, arity = 1)
        public String description; 
    
        @Parameter(names = {"--family"}, description = "Family id", required = false, arity = 1)
        public String family; 
    
        @Parameter(names = {"--proband"}, description = "Proband id", required = false, arity = 1)
        public String proband; 
    
        @Parameter(names = {"--sample"}, description = "Sample id associated to the proband or any member of a family", required = false, arity = 1)
        public String sample; 
    
        @Parameter(names = {"--individual"}, description = "Proband id or any member id of a family", required = false, arity = 1)
        public String individual; 
    
        @Parameter(names = {"--analyst-assignee"}, description = "Clinical analyst assignee", required = false, arity = 1)
        public String analystAssignee; 
    
        @Parameter(names = {"--disorder"}, description = "Disorder ID or name", required = false, arity = 1)
        public String disorder; 
    
        @Parameter(names = {"--flags"}, description = "Flags", required = false, arity = 1)
        public String flags; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, arity = 1)
        public boolean deleted; 
    
        @Parameter(names = {"--release"}, description = "Release value", required = false, arity = 1)
        public String release; 
    
        @Parameter(names = {"--attributes"}, description = "Text attributes (Format: sex=male,age>20 ...)", required = false, arity = 1)
        public String attributes; 
    
  }
    @Parameters(commandNames = {"actionable-variant"}, commandDescription ="Fetch actionable clinical variants")
    public class ActionableVariantCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--sample"}, description = "Sample ID", required = false, arity = 1)
        public String sample; 
    
  }
    @Parameters(commandNames = {"query-variant"}, commandDescription ="Fetch clinical variants")
    public class QueryVariantCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--limit"}, description = "Number of results to be returned", required = false, arity = 1)
        public int limit; 
    
        @Parameter(names = {"--skip"}, description = "Number of results to skip", required = false, arity = 1)
        public int skip; 
    
        @Parameter(names = {"--count"}, description = "Get the total number of results matching the query. Deactivated by default.", required = false, arity = 1)
        public boolean count; 
    
        @Parameter(names = {"--approximate-count"}, description = "Get an approximate count, instead of an exact total count. Reduces execution time", required = false, arity = 1)
        public boolean approximateCount; 
    
        @Parameter(names = {"--approximate-count-sampling-size"}, description = "Sampling size to get the approximate count. Larger values increase accuracy but also increase execution time", required = false, arity = 1)
        public int approximateCountSamplingSize; 
    
        @Parameter(names = {"--saved-filter"}, description = "Use a saved filter at User level", required = false, arity = 1)
        public String savedFilter; 
    
        @Parameter(names = {"--id"}, description = "List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g. rs116600158,19:7177679:C:T", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--region"}, description = "List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.: 2,3:100000-200000", required = false, arity = 1)
        public String region; 
    
        @Parameter(names = {"--type"}, description = "List of types, accepted values are SNV, MNV, INDEL, SV, COPY_NUMBER, COPY_NUMBER_LOSS, COPY_NUMBER_GAIN, INSERTION, DELETION, DUPLICATION, TANDEM_DUPLICATION, BREAKEND, e.g. SNV,INDEL", required = false, arity = 1)
        public String type; 
    
        @Parameter(names = {"--study -s"}, description = "Filter variants from the given studies, these can be either the numeric ID or the alias with the format user@project:study", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--file"}, description = "Filter variants from the files specified. This will set includeFile parameter when not provided", required = false, arity = 1)
        public String file; 
    
        @Parameter(names = {"--filter"}, description = "Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the filter. e.g.: PASS,LowGQX", required = false, arity = 1)
        public String filter; 
    
        @Parameter(names = {"--qual"}, description = "Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual. e.g.: >123.4", required = false, arity = 1)
        public String qual; 
    
        @Parameter(names = {"--file-data"}, description = "Filter by file data (i.e. FILTER, QUAL and INFO columns from VCF file). [{file}:]{key}{op}{value}[,;]* . If no file is specified, will use all files from 'file' filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many fields can be combined. e.g. file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10,FILTER=PASS,LowDP", required = false, arity = 1)
        public String fileData; 
    
        @Parameter(names = {"--sample"}, description = "Filter variants by sample genotype. This will automatically set 'includeSample' parameter when not provided. This filter accepts multiple 3 forms: 1) List of samples: Samples that contain the main variant. Accepts AND (;) and OR (,) operators.  e.g. HG0097,HG0098 . 2) List of samples with genotypes: {sample}:{gt1},{gt2}. Accepts AND (;) and OR (,) operators.  e.g. HG0097:0/0;HG0098:0/1,1/1 . Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT, HET_MISS and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT . 3) Sample with segregation mode: {sample}:{segregation}. Only one sample accepted.Accepted segregation modes: [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]. Value is case insensitive. e.g. HG0097:DeNovo Sample must have parents defined and indexed. ", required = false, arity = 1)
        public String sample; 
    
        @Parameter(names = {"--sample-data"}, description = "Filter by any SampleData field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is specified, will use all samples from 'sample' or 'genotype' filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can be combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10", required = false, arity = 1)
        public String sampleData; 
    
        @Parameter(names = {"--sample-annotation"}, description = "Selects some samples using metadata information from Catalog. e.g. age>20;phenotype=hpo:123,hpo:456;name=smith", required = false, arity = 1)
        public String sampleAnnotation; 
    
        @Parameter(names = {"--cohort"}, description = "Select variants with calculated stats for the selected cohorts", required = false, arity = 1)
        public String cohort; 
    
        @Parameter(names = {"--cohort-stats-ref"}, description = "Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsRef; 
    
        @Parameter(names = {"--cohort-stats-alt"}, description = "Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsAlt; 
    
        @Parameter(names = {"--cohort-stats-maf"}, description = "Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsMaf; 
    
        @Parameter(names = {"--cohort-stats-mgf"}, description = "Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4", required = false, arity = 1)
        public String cohortStatsMgf; 
    
        @Parameter(names = {"--cohort-stats-pass"}, description = "Filter PASS frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL>0.8", required = false, arity = 1)
        public String cohortStatsPass; 
    
        @Parameter(names = {"--missing-alleles"}, description = "Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}", required = false, arity = 1)
        public String missingAlleles; 
    
        @Parameter(names = {"--missing-genotypes"}, description = "Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}", required = false, arity = 1)
        public String missingGenotypes; 
    
        @Parameter(names = {"--score"}, description = "Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}", required = false, arity = 1)
        public String score; 
    
        @Parameter(names = {"--family"}, description = "Filter variants where any of the samples from the given family contains the variant (HET or HOM_ALT)", required = false, arity = 1)
        public String family; 
    
        @Parameter(names = {"--family-disorder"}, description = "Specify the disorder to use for the family segregation", required = false, arity = 1)
        public String familyDisorder; 
    
        @Parameter(names = {"--family-segregation"}, description = "Filter by segregation mode from a given family. Accepted values: [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]", required = false, arity = 1)
        public String familySegregation; 
    
        @Parameter(names = {"--family-members"}, description = "Sub set of the members of a given family", required = false, arity = 1)
        public String familyMembers; 
    
        @Parameter(names = {"--family-proband"}, description = "Specify the proband child to use for the family segregation", required = false, arity = 1)
        public String familyProband; 
    
        @Parameter(names = {"--gene"}, description = "List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref' parameter", required = false, arity = 1)
        public String gene; 
    
        @Parameter(names = {"--ct"}, description = "List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578", required = false, arity = 1)
        public String ct; 
    
        @Parameter(names = {"--xref"}, description = "List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC, Ensembl genes, dbSNP, ClinVar, HPO, Cosmic, ...", required = false, arity = 1)
        public String xref; 
    
        @Parameter(names = {"--biotype"}, description = "List of biotypes, e.g. protein_coding", required = false, arity = 1)
        public String biotype; 
    
        @Parameter(names = {"--protein-substitution"}, description = "Protein substitution scores include SIFT and PolyPhen. You can query using the score {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant", required = false, arity = 1)
        public String proteinSubstitution; 
    
        @Parameter(names = {"--conservation"}, description = "Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g. phastCons>0.5,phylop<0.1,gerp>0.1", required = false, arity = 1)
        public String conservation; 
    
        @Parameter(names = {"--population-frequency-alt"}, description = "Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyAlt; 
    
        @Parameter(names = {"--population-frequency-ref"}, description = "Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyRef; 
    
        @Parameter(names = {"--population-frequency-maf"}, description = "Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01", required = false, arity = 1)
        public String populationFrequencyMaf; 
    
        @Parameter(names = {"--transcript-flag"}, description = "List of transcript annotation flags. e.g. CCDS, basic, cds_end_NF, mRNA_end_NF, cds_start_NF, mRNA_start_NF, seleno", required = false, arity = 1)
        public String transcriptFlag; 
    
        @Parameter(names = {"--gene-trait-id"}, description = "List of gene trait association id. e.g. 'umls:C0007222' , 'OMIM:269600'", required = false, arity = 1)
        public String geneTraitId; 
    
        @Parameter(names = {"--go"}, description = "List of GO (Gene Ontology) terms. e.g. 'GO:0002020'", required = false, arity = 1)
        public String go; 
    
        @Parameter(names = {"--expression"}, description = "List of tissues of interest. e.g. 'lung'", required = false, arity = 1)
        public String expression; 
    
        @Parameter(names = {"--protein-keyword"}, description = "List of Uniprot protein variant annotation keywords", required = false, arity = 1)
        public String proteinKeyword; 
    
        @Parameter(names = {"--drug"}, description = "List of drug names", required = false, arity = 1)
        public String drug; 
    
        @Parameter(names = {"--functional-score"}, description = "Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 , cadd_raw<=0.3", required = false, arity = 1)
        public String functionalScore; 
    
        @Parameter(names = {"--clinical"}, description = "Clinical source: clinvar, cosmic", required = false, arity = 1)
        public String clinical; 
    
        @Parameter(names = {"--clinical-significance"}, description = "Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic", required = false, arity = 1)
        public String clinicalSignificance; 
    
        @Parameter(names = {"--clinical-confirmed-status"}, description = "Clinical confirmed status", required = false, arity = 1)
        public boolean clinicalConfirmedStatus; 
    
        @Parameter(names = {"--custom-annotation"}, description = "Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}", required = false, arity = 1)
        public String customAnnotation; 
    
        @Parameter(names = {"--panel"}, description = "Filter by genes from the given disease panel", required = false, arity = 1)
        public String panel; 
    
        @Parameter(names = {"--panel-mode-of-inheritance"}, description = "Filter genes from specific panels that match certain mode of inheritance. Accepted values : [ autosomalDominant, autosomalRecessive, XLinkedDominant, XLinkedRecessive, YLinked, mitochondrial, deNovo, mendelianError, compoundHeterozygous ]", required = false, arity = 1)
        public String panelModeOfInheritance; 
    
        @Parameter(names = {"--panel-confidence"}, description = "Filter genes from specific panels that match certain confidence. Accepted values : [ high, medium, low, rejected ]", required = false, arity = 1)
        public String panelConfidence; 
    
        @Parameter(names = {"--panel-role-in-cancer"}, description = "Filter genes from specific panels that match certain role in cancer. Accepted values : [ both, oncogene, tumorSuppressorGene, fusion ]", required = false, arity = 1)
        public String panelRoleInCancer; 
    
        @Parameter(names = {"--trait"}, description = "List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...", required = false, arity = 1)
        public String trait; 
    
  }
    @Parameters(commandNames = {"acl"}, commandDescription ="Returns the acl of the clinical analyses. If member is provided, it will only return the acl for the member.")
    public class AclCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--clinical-analyses"}, description = "Comma separated list of clinical analysis IDs or names up to a maximum of 100", required = true, arity = 1)
        public String clinicalAnalyses; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--member"}, description = "User or group ID", required = false, arity = 1)
        public String member; 
    
        @Parameter(names = {"--silent"}, description = "Boolean to retrieve all possible entries that are queried for, false to raise an exception whenever one of the entries looked for cannot be shown for whichever reason", required = false, arity = 1)
        public boolean silent; 
    
  }
    @Parameters(commandNames = {"delete"}, commandDescription ="Delete clinical analyses")
    public class DeleteCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--force"}, description = "Force deletion if the ClinicalAnalysis contains interpretations or is locked", required = false, arity = 1)
        public boolean force; 
    
        @Parameter(names = {"--clinical-analyses"}, description = "Comma separated list of clinical analysis IDs or names up to a maximum of 100", required = false, arity = 1)
        public String clinicalAnalyses; 
    
  }
    @Parameters(commandNames = {"update"}, commandDescription ="Update clinical analysis attributes")
    public class UpdateCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--clinical-analyses"}, description = "Comma separated list of clinical analysis IDs", required = false, arity = 1)
        public String clinicalAnalyses; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--comments-action"}, description = "Action to be performed if the array of comments is being updated.", required = false, arity = 1)
        public String commentsAction; 
    
        @Parameter(names = {"--flags-action"}, description = "Action to be performed if the array of flags is being updated.", required = false, arity = 1)
        public String flagsAction; 
    
        @Parameter(names = {"--files-action"}, description = "Action to be performed if the array of files is being updated.", required = false, arity = 1)
        public String filesAction; 
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description; 
    
        @Parameter(names = {"--creation-date"}, description = "The body web service creationDate parameter", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "The body web service modificationDate parameter", required = false, arity = 1)
        public String modificationDate; 
    
        @Parameter(names = {"--due-date"}, description = "The body web service dueDate parameter", required = false, arity = 1)
        public String dueDate; 
    
  }
    @Parameters(commandNames = {"info"}, commandDescription ="Clinical analysis info")
    public class InfoCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--include"}, description = "Fields included in the response, whole JSON path must be provided", required = false, arity = 1)
        public String include; 
    
        @Parameter(names = {"--exclude"}, description = "Fields excluded in the response, whole JSON path must be provided", required = false, arity = 1)
        public String exclude; 
    
        @Parameter(names = {"--clinical-analysis"}, description = "Comma separated list of clinical analysis IDs or names up to a maximum of 100", required = false, arity = 1)
        public String clinicalAnalysis; 
    
        @Parameter(names = {"--study -s"}, description = "Study [[user@]project:]study where study and project can be either the ID or UUID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--deleted"}, description = "Boolean to retrieve deleted entries", required = false, arity = 1)
        public boolean deleted; 
    
  }
    @Parameters(commandNames = {"create-interpretation"}, commandDescription ="Create a new Interpretation")
    public class CreateInterpretationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--clinical-analysis"}, description = "Clinical analysis ID", required = false, arity = 1)
        public String clinicalAnalysis; 
    
        @Parameter(names = {"--study -s"}, description = "[[user@]project:]study id", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--set-as"}, description = "Set interpretation as", required = false, arity = 1)
        public String setAs; 
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description; 
    
        @Parameter(names = {"--clinical-analysis-id"}, description = "The body web service clinicalAnalysisId parameter", required = false, arity = 1)
        public String clinicalAnalysisId; 
    
        @Parameter(names = {"--creation-date"}, description = "The body web service creationDate parameter", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "The body web service modificationDate parameter", required = false, arity = 1)
        public String modificationDate; 
    
  }
    @Parameters(commandNames = {"delete-interpretation"}, commandDescription ="Delete interpretation")
    public class DeleteInterpretationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "[[user@]project:]study ID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--clinical-analysis"}, description = "Clinical analysis ID", required = false, arity = 1)
        public String clinicalAnalysis; 
    
        @Parameter(names = {"--interpretations"}, description = "Interpretation IDs of the Clinical Analysis", required = false, arity = 1)
        public String interpretations; 
    
        @Parameter(names = {"--set-as-primary"}, description = "Interpretation id to set as primary from the list of secondaries in case of deleting the actual primary one", required = false, arity = 1)
        public String setAsPrimary; 
    
  }
    @Parameters(commandNames = {"update-interpretation"}, commandDescription ="Update interpretation fields")
    public class UpdateInterpretationCommandOptions {
    
        @ParametersDelegate
        public CommonCommandOptions commonOptions = commonCommandOptions;
    
        @Parameter(names = {"--study -s"}, description = "[[user@]project:]study ID", required = false, arity = 1)
        public String study; 
    
        @Parameter(names = {"--primary-findings-action"}, description = "Action to be performed if the array of primary findings is being updated.", required = false, arity = 1)
        public String primaryFindingsAction; 
    
        @Parameter(names = {"--methods-action"}, description = "Action to be performed if the array of methods is being updated.", required = false, arity = 1)
        public String methodsAction; 
    
        @Parameter(names = {"--secondary-findings-action"}, description = "Action to be performed if the array of secondary findings is being updated.", required = false, arity = 1)
        public String secondaryFindingsAction; 
    
        @Parameter(names = {"--comments-action"}, description = "Action to be performed if the array of comments is being updated. To REMOVE or REPLACE, the date will need to be provided to identify the comment.", required = false, arity = 1)
        public String commentsAction; 
    
        @Parameter(names = {"--set-as"}, description = "Set interpretation as", required = false, arity = 1)
        public String setAs; 
    
        @Parameter(names = {"--clinical-analysis"}, description = "Clinical analysis ID", required = false, arity = 1)
        public String clinicalAnalysis; 
    
        @Parameter(names = {"--interpretation"}, description = "Interpretation ID", required = false, arity = 1)
        public String interpretation; 
    
        @Parameter(names = {"--id"}, description = "The body web service id parameter", required = false, arity = 1)
        public String id; 
    
        @Parameter(names = {"--description"}, description = "The body web service description parameter", required = false, arity = 1)
        public String description; 
    
        @Parameter(names = {"--creation-date"}, description = "The body web service creationDate parameter", required = false, arity = 1)
        public String creationDate; 
    
        @Parameter(names = {"--modification-date"}, description = "The body web service modificationDate parameter", required = false, arity = 1)
        public String modificationDate; 
    
  }
}