package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.app.cli.main.options.OperationsVariantStorageCommandOptions;

import org.opencb.opencga.core.models.variant.VariantStorageMetadataSynchronizeParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.models.operations.variant.VariantAnnotationSaveParams;
import org.opencb.opencga.core.models.operations.variant.VariantAnnotationIndexParams;
import org.opencb.opencga.core.models.operations.variant.JulieParams;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.core.models.operations.variant.VariantStorageMetadataRepairToolParams;
import org.opencb.opencga.core.models.operations.variant.VariantAggregateParams;
import org.opencb.opencga.core.models.operations.variant.VariantSecondaryIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantFamilyIndexParams;
import org.opencb.opencga.core.models.variant.VariantStatsIndexParams;
import org.opencb.opencga.core.models.variant.VariantFileDeleteParams;
import org.opencb.opencga.core.models.variant.VariantIndexParams;
import org.opencb.opencga.core.config.storage.SampleIndexConfiguration;
import org.opencb.opencga.core.models.operations.variant.VariantScoreIndexParams;
import org.opencb.opencga.core.models.operations.variant.VariantAggregateFamilyParams;
import org.opencb.opencga.core.config.storage.CellBaseConfiguration;
import org.opencb.opencga.core.models.variant.VariantFileIndexJobLauncherParams;
import org.opencb.opencga.core.models.operations.variant.VariantSampleIndexParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2021-10-06
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Operations - Variant Storage command line.
 *    OpenCGA version: 2.2.0-SNAPSHOT
 *    PATH: /{apiVersion}/operation
 */
public class OperationsVariantStorageCommandExecutor extends OpencgaCommandExecutor {

    private OperationsVariantStorageCommandOptions operationsVariantStorageCommandOptions;

    public OperationsVariantStorageCommandExecutor(OperationsVariantStorageCommandOptions operationsVariantStorageCommandOptions) {
        super(operationsVariantStorageCommandOptions.commonCommandOptions);
        this.operationsVariantStorageCommandOptions = operationsVariantStorageCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Operations - Variant Storage command line");

        String subCommandString = getParsedSubCommand(operationsVariantStorageCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "configure-cellbase":
                queryResponse = configureCellbase();
                break;
            case "aggregate-variant":
                queryResponse = aggregateVariant();
                break;
            case "delete-variant-annotation":
                queryResponse = deleteVariantAnnotation();
                break;
            case "index-variant-annotation":
                queryResponse = indexVariantAnnotation();
                break;
            case "save-variant-annotation":
                queryResponse = saveVariantAnnotation();
                break;
            case "delete-variant":
                queryResponse = deleteVariant();
                break;
            case "aggregate-variant-family":
                queryResponse = aggregateVariantFamily();
                break;
            case "index-variant-family":
                queryResponse = indexVariantFamily();
                break;
            case "index-variant":
                queryResponse = indexVariant();
                break;
            case "launcher-variant-index":
                queryResponse = launcherVariantIndex();
                break;
            case "run-variant-julie":
                queryResponse = runVariantJulie();
                break;
            case "repair-variant-metadata":
                queryResponse = repairVariantMetadata();
                break;
            case "synchronize-variant-metadata":
                queryResponse = synchronizeVariantMetadata();
                break;
            case "index-variant-sample":
                queryResponse = indexVariantSample();
                break;
            case "delete-variant-score":
                queryResponse = deleteVariantScore();
                break;
            case "index-variant-score":
                queryResponse = indexVariantScore();
                break;
            case "secondaryIndex-variant":
                queryResponse = secondaryIndexVariant();
                break;
            case "delete-variant-secondaryIndex":
                queryResponse = deleteVariantSecondaryIndex();
                break;
            case "index-variant-stats":
                queryResponse = indexVariantStats();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<Job> configureCellbase() throws Exception {

        logger.debug("Executing configureCellbase in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.ConfigureCellbaseCommandOptions commandOptions = operationsVariantStorageCommandOptions.configureCellbaseCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotNull("annotationUpdate", commandOptions.annotationUpdate);
        queryParams.putIfNotEmpty("annotationSaveId", commandOptions.annotationSaveId);

        CellBaseConfiguration cellBaseConfiguration = new CellBaseConfiguration()
            .setUrl(commandOptions.url)
            .setVersion(commandOptions.version);
        return openCGAClient.getVariantOperationClient().configureCellbase(cellBaseConfiguration, queryParams);
    }

    private RestResponse<Job> aggregateVariant() throws Exception {

        logger.debug("Executing aggregateVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.AggregateVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.aggregateVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantAggregateParams variantAggregateParams = new VariantAggregateParams()
            .setOverwrite(commandOptions.overwrite)
            .setResume(commandOptions.resume);
        return openCGAClient.getVariantOperationClient().aggregateVariant(variantAggregateParams, queryParams);
    }

    private RestResponse<Job> deleteVariantAnnotation() throws Exception {

        logger.debug("Executing deleteVariantAnnotation in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantAnnotationCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);

        return openCGAClient.getVariantOperationClient().deleteVariantAnnotation(queryParams);
    }

    private RestResponse<Job> indexVariantAnnotation() throws Exception {

        logger.debug("Executing indexVariantAnnotation in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantAnnotationCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantAnnotationIndexParams variantAnnotationIndexParams = new VariantAnnotationIndexParams()
            .setOutdir(commandOptions.outdir)
            .setOutputFileName(commandOptions.outputFileName)
            .setAnnotator(commandOptions.annotator)
            .setOverwriteAnnotations(commandOptions.overwriteAnnotations)
            .setRegion(commandOptions.region)
            .setCreate(commandOptions.create)
            .setLoad(commandOptions.load)
            .setCustomName(commandOptions.customName);
        return openCGAClient.getVariantOperationClient().indexVariantAnnotation(variantAnnotationIndexParams, queryParams);
    }

    private RestResponse<Job> saveVariantAnnotation() throws Exception {

        logger.debug("Executing saveVariantAnnotation in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.SaveVariantAnnotationCommandOptions commandOptions = operationsVariantStorageCommandOptions.saveVariantAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);

        VariantAnnotationSaveParams variantAnnotationSaveParams = new VariantAnnotationSaveParams()
            .setAnnotationId(commandOptions.annotationId);
        return openCGAClient.getVariantOperationClient().saveVariantAnnotation(variantAnnotationSaveParams, queryParams);
    }

    private RestResponse<Job> deleteVariant() throws Exception {

        logger.debug("Executing deleteVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantFileDeleteParams variantFileDeleteParams = new VariantFileDeleteParams()
            .setResume(commandOptions.resume);
        return openCGAClient.getVariantOperationClient().deleteVariant(variantFileDeleteParams, queryParams);
    }

    private RestResponse<Job> aggregateVariantFamily() throws Exception {

        logger.debug("Executing aggregateVariantFamily in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.AggregateVariantFamilyCommandOptions commandOptions = operationsVariantStorageCommandOptions.aggregateVariantFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantAggregateFamilyParams variantAggregateFamilyParams = new VariantAggregateFamilyParams()
            .setResume(commandOptions.resume);
        return openCGAClient.getVariantOperationClient().aggregateVariantFamily(variantAggregateFamilyParams, queryParams);
    }

    private RestResponse<Job> indexVariantFamily() throws Exception {

        logger.debug("Executing indexVariantFamily in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantFamilyCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantFamilyIndexParams variantFamilyIndexParams = new VariantFamilyIndexParams()
            .setOverwrite(commandOptions.overwrite)
            .setSkipIncompleteFamilies(commandOptions.skipIncompleteFamilies);
        return openCGAClient.getVariantOperationClient().indexVariantFamily(variantFamilyIndexParams, queryParams);
    }

    private RestResponse<Job> indexVariant() throws Exception {

        logger.debug("Executing indexVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantIndexParams variantIndexParams = new VariantIndexParams()
            .setFile(commandOptions.file)
            .setResume(commandOptions.resume)
            .setOutdir(commandOptions.outdir)
            .setTransform(commandOptions.transform)
            .setGvcf(commandOptions.gvcf)
            .setNormalizationSkip(commandOptions.normalizationSkip)
            .setReferenceGenome(commandOptions.referenceGenome)
            .setFamily(commandOptions.family)
            .setSomatic(commandOptions.somatic)
            .setLoad(commandOptions.load)
            .setLoadSplitData(commandOptions.loadSplitData)
            .setLoadMultiFileData(commandOptions.loadMultiFileData)
            .setLoadSampleIndex(commandOptions.loadSampleIndex)
            .setLoadArchive(commandOptions.loadArchive)
            .setLoadHomRef(commandOptions.loadHomRef)
            .setPostLoadCheck(commandOptions.postLoadCheck)
            .setIncludeGenotypes(commandOptions.includeGenotypes)
            .setIncludeSampleData(commandOptions.includeSampleData)
            .setMerge(commandOptions.merge)
            .setDeduplicationPolicy(commandOptions.deduplicationPolicy)
            .setCalculateStats(commandOptions.calculateStats)
            .setAggregationMappingFile(commandOptions.aggregationMappingFile)
            .setAnnotate(commandOptions.annotate)
            .setAnnotator(commandOptions.annotator)
            .setOverwriteAnnotations(commandOptions.overwriteAnnotations)
            .setIndexSearch(commandOptions.indexSearch)
            .setSkipIndexedFiles(commandOptions.skipIndexedFiles);
        return openCGAClient.getVariantOperationClient().indexVariant(variantIndexParams, queryParams);
    }

    private RestResponse<Job> launcherVariantIndex() throws Exception {

        logger.debug("Executing launcherVariantIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.LauncherVariantIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.launcherVariantIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantFileIndexJobLauncherParams variantFileIndexJobLauncherParams = new VariantFileIndexJobLauncherParams()
            .setName(commandOptions.name)
            .setDirectory(commandOptions.directory)
            .setResumeFailed(commandOptions.resumeFailed)
            .setIgnoreFailed(commandOptions.ignoreFailed)
            .setMaxJobs(commandOptions.maxJobs);
        return openCGAClient.getVariantOperationClient().launcherVariantIndex(variantFileIndexJobLauncherParams, queryParams);
    }

    private RestResponse<Job> runVariantJulie() throws Exception {

        logger.debug("Executing runVariantJulie in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.RunVariantJulieCommandOptions commandOptions = operationsVariantStorageCommandOptions.runVariantJulieCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);

        JulieParams julieParams = new JulieParams()
            .setRegion(commandOptions.region)
            .setOverwrite(commandOptions.overwrite);
        return openCGAClient.getVariantOperationClient().runVariantJulie(julieParams, queryParams);
    }

    private RestResponse<Job> repairVariantMetadata() throws Exception {

        logger.debug("Executing repairVariantMetadata in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.RepairVariantMetadataCommandOptions commandOptions = operationsVariantStorageCommandOptions.repairVariantMetadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);

        VariantStorageMetadataRepairToolParams variantStorageMetadataRepairToolParams = new VariantStorageMetadataRepairToolParams()
            .setSamplesBatchSize(commandOptions.samplesBatchSize);
        return openCGAClient.getVariantOperationClient().repairVariantMetadata(variantStorageMetadataRepairToolParams, queryParams);
    }

    private RestResponse<Job> synchronizeVariantMetadata() throws Exception {

        logger.debug("Executing synchronizeVariantMetadata in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.SynchronizeVariantMetadataCommandOptions commandOptions = operationsVariantStorageCommandOptions.synchronizeVariantMetadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantStorageMetadataSynchronizeParams variantStorageMetadataSynchronizeParams = new VariantStorageMetadataSynchronizeParams()
            .setStudy(commandOptions.bodyStudy);
        return openCGAClient.getVariantOperationClient().synchronizeVariantMetadata(variantStorageMetadataSynchronizeParams, queryParams);
    }

    private RestResponse<Job> indexVariantSample() throws Exception {

        logger.debug("Executing indexVariantSample in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantSampleCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantSampleIndexParams variantSampleIndexParams = new VariantSampleIndexParams()
            .setBuildIndex(commandOptions.buildIndex)
            .setAnnotate(commandOptions.annotate)
            .setOverwrite(commandOptions.overwrite);
        return openCGAClient.getVariantOperationClient().indexVariantSample(variantSampleIndexParams, queryParams);
    }

    private RestResponse<Job> deleteVariantScore() throws Exception {

        logger.debug("Executing deleteVariantScore in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantScoreCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantScoreCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("name", commandOptions.name);
        queryParams.putIfNotNull("resume", commandOptions.resume);
        queryParams.putIfNotNull("force", commandOptions.force);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getVariantOperationClient().deleteVariantScore(queryParams);
    }

    private RestResponse<Job> indexVariantScore() throws Exception {

        logger.debug("Executing indexVariantScore in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantScoreCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantScoreCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantScoreIndexParams variantScoreIndexParams = new VariantScoreIndexParams()
            .setScoreName(commandOptions.scoreName)
            .setCohort1(commandOptions.cohort1)
            .setCohort2(commandOptions.cohort2)
            .setInput(commandOptions.input)
            .setInputColumns(commandOptions.inputColumns)
            .setResume(commandOptions.resume);
        return openCGAClient.getVariantOperationClient().indexVariantScore(variantScoreIndexParams, queryParams);
    }

    private RestResponse<Job> secondaryIndexVariant() throws Exception {

        logger.debug("Executing secondaryIndexVariant in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.SecondaryIndexVariantCommandOptions commandOptions = operationsVariantStorageCommandOptions.secondaryIndexVariantCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantSecondaryIndexParams variantSecondaryIndexParams = new VariantSecondaryIndexParams()
            .setRegion(commandOptions.region)
            .setOverwrite(commandOptions.overwrite);
        return openCGAClient.getVariantOperationClient().secondaryIndexVariant(variantSecondaryIndexParams, queryParams);
    }

    private RestResponse<Job> deleteVariantSecondaryIndex() throws Exception {

        logger.debug("Executing deleteVariantSecondaryIndex in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.DeleteVariantSecondaryIndexCommandOptions commandOptions = operationsVariantStorageCommandOptions.deleteVariantSecondaryIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("samples", commandOptions.samples);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        return openCGAClient.getVariantOperationClient().deleteVariantSecondaryIndex(queryParams);
    }

    private RestResponse<Job> indexVariantStats() throws Exception {

        logger.debug("Executing indexVariantStats in Operations - Variant Storage command line");

        OperationsVariantStorageCommandOptions.IndexVariantStatsCommandOptions commandOptions = operationsVariantStorageCommandOptions.indexVariantStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if(queryParams.get("study")==null){
                queryParams.putIfNotEmpty("study", cliSession.getCurrentStudy());
        }

        VariantStatsIndexParams variantStatsIndexParams = new VariantStatsIndexParams()
            .setRegion(commandOptions.region)
            .setOverwriteStats(commandOptions.overwriteStats)
            .setResume(commandOptions.resume)
            .setAggregationMappingFile(commandOptions.aggregationMappingFile);
        return openCGAClient.getVariantOperationClient().indexVariantStats(variantStatsIndexParams, queryParams);
    }
}